csv_reader: THEORY
BEGIN

  CSVError : ExceptionTag[string] = "CSVError"

  CSVFieldSpec : TYPE+ = { String, Rational, Integer, Boolean }

  CSVData: DATATYPE
  BEGIN
    str_field(str_val: string):str?
    int_field(int_val: int):int?
    rat_field(rat_val: real):rat?
    bool_field(bool_val: boolean): bool?
  END CSVData

  toString(data: CSVData): string
  = CASES data OF
       str_field(s): s,
       int_field(i): rat2str(i),
       rat_field(r): rat2str(r),
       bool_field(b): bool2str(b)
    ENDCASES

  %% THROWS NotARealNumber
  toRational(data: CSVData): real
  = CASES data OF
       str_field(s): decstr2rat(s),
       int_field(i): i,
       rat_field(r): r,
       bool_field(b): throw(NotARealNumber,bool2str(b))
    ENDCASES

   NotABoolean : ExceptionTag[string] ="NotABoolean"

   %% THROWS NotABoolean
   str2boolean(s:string): bool =
     IF str2bool(s,"TRUE")  THEN TRUE
     ELSIF str2bool(s,"FALSE") THEN FALSE
     ELSE throw(NotABoolean,s)
     ENDIF

   toBoolean(data: CSVData): bool
   = CASES data OF
       str_field(s): str2boolean(s),
       int_field(i): (i /= 0),
       rat_field(r): (r /= 0),
       bool_field(b): b
    ENDCASES
   
  IMPORTING csv_writer,structures@listn

  CSVDataFromSpec(spec: list[CSVFieldSpec]): TYPE+
  = {l: listn[CSVData](length(spec)) | 
    		      	FORALL(i:below(length(spec)))
			: CASES nth(spec,i) OF
			    String: str?(nth(l,i)),
			    Integer: int?(nth(l,i)),
			    Rational: rat?(nth(l,i)),
			    Boolean: bool?(nth(l,i))
			  ENDCASES }

  getField(spec: list[CSVFieldSpec])(data: CSVDataFromSpec(spec), i: below(length(data)))
  : {d: CSVData | CASES nth(spec,i) OF
		    String: str?(d),
		    Integer: int?(d),
		    Rational: rat?(d),
		    Boolean: bool?(d)
		  ENDCASES }
  = nth(data,i)

  % to prove getField-related TCCs use csv-tcc strategy

  csv_data_from_spec_field_rat
  : LEMMA
    FORALL(spec: list[CSVFieldSpec], data: CSVDataFromSpec(spec), i: below(length(data)))
    : nth(spec,i) = Rational
      IMPLIES rat?(getField(spec)(data,i))

  csv_data_from_spec_field_bool
  : LEMMA
    FORALL(spec: list[CSVFieldSpec], data: CSVDataFromSpec(spec), i: below(length(data)))
    : nth(spec,i) = Boolean
      IMPLIES bool?(getField(spec)(data,i))

  csv_data_from_spec_field_int
  : LEMMA
    FORALL(spec: list[CSVFieldSpec], data: CSVDataFromSpec(spec), i: below(length(data)))
    : nth(spec,i) = Integer
      IMPLIES int?(getField(spec)(data,i))

  csv_data_from_spec_field_str
  : LEMMA
    FORALL(spec: list[CSVFieldSpec], data: CSVDataFromSpec(spec), i: below(length(data)))
    : nth(spec,i) = String
      IMPLIES str?(getField(spec)(data,i))

  % THROWS CSVError
  processCSVLine(spec: list[CSVFieldSpec], tokens: list[string] | length(spec) <= length(tokens),line:nat,field:posnat)
  : RECURSIVE CSVDataFromSpec(spec)
  = IF null?(spec) THEN null
    ELSE LET fieldSpec=car(spec),
    	     token=trim(car(tokens))
	 IN catch[CSVDataFromSpec(spec)]
	    ( (: NotARealNumber , NotAnInteger, NotABoolean :) ,
	        LET rest: list[CSVData] = processCSVLine(cdr(spec),cdr(tokens),line,field+1)
	      	IN cons( IF fieldSpec = Integer THEN int_field(str2int(token))
	      	   	 ELSIF fieldSpec = Rational THEN rat_field(decstr2rat(token))
			 ELSIF fieldSpec = Boolean THEN bool_field(str2boolean(token))
	      	   	 ELSE str_field(token) ENDIF , rest),
	        LET lnstr = IF line > 0 THEN format(" line ~a,",line) ELSE "" ENDIF,
		    flstr = pvs2str(fieldSpec),
		    msg   = format("Value ~s doesn't satisfy spec ~a in~a field ~a",
		    	         {| (token,flstr,lnstr,field) |}) IN
		throw(CSVError,msg) ) ENDIF
  MEASURE tokens BY <<

  IMPORTING pvsio_checker
  IMPORTING str_util

  % THROWS CSVError
  readCSVRecordln(ins: IStream, dlct: CSVDialect, data_spec: list[CSVFieldSpec],line:nat)
  : CSVDataFromSpec(data_spec)
  = LET line   = readln_checker(ins),
    	tokens = str_split(line, dlct`dlmt),
	delta  = length(data_spec) - length(tokens)
    IN IF delta > 0
       THEN
         LET lnstr = IF line > 0 THEN rat2str(line) ELSE "" ENDIF, 
	     mssg  = format("Line~a has ~a fewer fields than data specifications",{| lnstr,delta |}) IN
         throw(CSVError,mssg)
       ELSE processCSVLine(data_spec,tokens,line,1) ENDIF

  readCSVRecord(ins: IStream, dlct: CSVDialect, data_spec: list[CSVFieldSpec])
  : MACRO CSVDataFromSpec(data_spec) =
     readCSVRecordln(ins,dlct,data_spec,0)

  readCSV(ins: IStream, dlct: CSVDialect, data_spec: list[CSVFieldSpec])
  : list[CSVDataFromSpec(data_spec)] =
    LET line = ref[nat](1),
        ret  = ref[list[CSVDataFromSpec(data_spec)]](null)
    IN prog(while(NOT eof?(ins),
       	      LET data: CSVDataFromSpec(data_spec) = readCSVRecordln(ins,MSEXCEL_DIALECT,data_spec,val(line))
	      IN
	        set(line,val(line)+1) &
	        set(ret,append(val(ret),(: data :)))) &
	    fclose(ins),
	    val(ret))
	    
  readCSV(file: string, dlct: CSVDialect, data_spec: list[CSVFieldSpec])
  : list[CSVDataFromSpec(data_spec)] =
    readCSV(fopenin(file),dlct,data_spec)

END csv_reader
