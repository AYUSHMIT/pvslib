(attachments
  |str_util|

  (defattach |str_length| (s)
    (length s))
  
  (defattach |str_split| (str delim)
    "Splits the string STR using DELIM as delimiter."
    (split str (char delim 0)))

  (defattach |numerator| (r)
    "Returns the numerator of rational number R"
    (numerator r))

  (defattach |denominator| (r)
    "Returns the denomirator of rational number R (always positive)"
    (denominator r))

  (defattach |decimal_precision| (r)
    "Returns the decimal precision of rational R, 0 if integer,  -1 if infinite decimal."
    (or (decimal-precision-of-rat r)
	(throw-pvsio-exc "NotARealNumber" (format nil "~a" r))))

  (defattach |rationalize| (r)
    "Returns a rational number close to the real number"
    r) ;;; This is PVSio, real numbers are already rational! This is just needed for casting.
)

(attachments
 |time_fun|
 
 (defattach |real_time| ()
   "Real time"
   (get-internal-real-time))
 
 (defattach |run_time| ()
   "Run time"
   (get-internal-run-time))

 (defattach |internal_time_units| ()
   "Units of internal time"
   internal-time-units-per-second))
 
(attachments
 |pathname|

 (defattach |pathname_path| (name)
   "Path (list of directories) of pathname"
   (let ((dirs (pathname-directory name)))
     (if (equal (car dirs) ':absolute)
	 (cons "/" (cdr dirs))
       (cdr dirs))))
 
 (defattach |pathname_name| (name)
   "Name of pathname"
   (or (pathname-name name) ""))

 (defattach |pathname_type| (name)
   "Type of pathname"
   (pathname-type name))

 (defattach |filename_of_stream| (stream)
   "File name of stream"
   (with-slots ((plist excl::plist)) stream
	       (let ((rest (member 'excl::filename plist)))
		 (if rest
		     (format nil "~a" (cadr rest))
		   ""))))
)

(defun csv_data2str (data rounding precision quotechar)
  (cond ((numberp data) (real2decimal data rounding precision))
	((stringp data) (format nil "~a~a~a" quotechar data quotechar))
	((null data) "FALSE")
	((eql data t) "TRUE")
	(t (throw-pvsio-exc "CSVError" (format nil "~a" data)))))

(attachments
 |csv_writerow|

 (defattach |write_row_lisp| (stream separator quotechar rounding precision row)
   "A simple CSV writer of rows that doesn't require CSVData (as defined in csv_reader.pvs)"
   (if (arrayp row)
       (let ((fmt-str (format nil "~~{~~a~~^~a~~}~~%" separator))
	     (pro-row (loop for data across row 
			    collect
			    (csv_data2str data rounding precision quotechar))))
	 (not (format stream fmt-str pro-row)))
     (not (format stream "~a~%" row))))
)

(attachments |std_syscall|
	     
  (defattach |system_call| (command)
  "Make a system call of command"
  (let ((output (extra-system-call command)))
    (pvs2cl_record (car output) (cdr output)))))

(attachments |std_gvars|

(defattach |type_of_domain_lisp| (f)
  (declare (ignore f))
  "Return the type of the domain of F"
  (let ((dom (domain (domain *the-pvs-type*))))
    (format nil "~a" dom))))
