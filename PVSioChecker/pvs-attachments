(attachments
  |str_util|

  (defattach |str_length| (s)
    (length s))

  (defattach |str_split| (str delim)
   "Splits the string STR using DELIM as delimiter."
   (split str (char delim 0))))

(attachments
 |time_fun|
 
 (defattach |real_time| ()
   "Real time"
   (get-internal-real-time))
 
 (defattach |run_time| ()
   "Run time"
   (get-internal-run-time))

 (defattach |internal_time_units| ()
   "Units of internal time"
   internal-time-units-per-second))
 
(attachments
 |pathname|

 (defattach |pathname_path| (name)
   "Path (list of directories) of pathname"
   (let ((dirs (pathname-directory name)))
     (if (equal (car dirs) ':absolute)
	 (cons "/" (cdr dirs))
       (cdr dirs))))
 
 (defattach |pathname_name| (name)
   "Name of pathname"
   (or (pathname-name name) ""))

 (defattach |pathname_type| (name)
   "Type of pathname"
   (pathname-type name)))

(attachments
 |pvsio_checker|
 
 (defattach |real2str| (r n m)
   "Converts real number r to string, where the integer n represents the precision 10^-n, and m is the rounding mode
    (0: to zero, 1: to infinity (away from zero), 2: to negative infinity (floor), 3: to positive infinity (ceiling)"
   (ratio2decimal r (or (= m 3) (and (= m 1) (> r 0)) (and (= m 0) (< r 0))) n)))

(attachments
 |csv_writerow|

 (defattach |write_row| (wrt row)
   (setq *A* wrt)
   (setq *R* row)
   (let*((dialect(elt wrt 0))
	 (stream (elt wrt 1))
	 (delim  (elt dialect 0))
	 (qchar  (elt dialect 1)))
     (if (arrayp row)
	 (let ((fmt-str (format nil "~~{~~a~~^~a ~~}~~%" delim))
	       (pro-row(loop for x across row 
			     collect
			     (cond ((numberp x) x)
				   ((stringp x) (case qchar
						  (0 (format nil "'~a'" x))
						  (1 (format nil "~s" x))
						  (2 (format nil "`~a`" x))))
				   (x "TRUE")
				   (t "FALSE")))))
	   (not (format stream fmt-str pro-row)))
       (not (format stream "~a" row))))))

(attachments |std_syscall|
	     
  (defattach |system_call| (command)
  "Make a system call with $<command>"
  (let ((output (extra-system-call command)))
    (pvs2cl_record (car output) (cdr output)))))

(attachments |std_gvars|

(defattach |type_of_domain_lisp| (f)
  "Return the type of the domain of F"
  (let ((dom (domain (domain *the-pvs-type*))))
    (format nil "~a" dom))))
