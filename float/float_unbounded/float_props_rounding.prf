(float_props_rounding
 (exp_bound_TCC1 0
  (exp_bound_TCC1-1 nil 3699177029 ("" (subtype-tcc) nil nil)
   ((float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil))
   nil
   (exp_bound subtype "float_props_rounding.exp"
    "{i: integers.int | booleans.OR(float_props_rounding.radix /= 0, reals.>=(i, 0))}")))
 (exp_bound 1
  (exp_bound-2 nil 3799081461
   ("" (skeep)
    (("" (case "FtoR(RtoF(x))=0")
      (("1" (typepred "RtoF")
        (("1" (inst -2 "x")
          (("1" (split -2)
            (("1" (typepred "exp") (("1" (assert) nil)))
             ("2" (expand "FtoR" -2)
              (("2" (hide-all-but (-2 1))
                (("2" (grind-reals) nil)))))))))))
       ("2" (case "exp < Fexp(RtoF(x))")
        (("1" (hide 2)
          (("1" (case "precision ^ exp < FtoR(RtoF(x))")
            (("1" (hide -2)
              (("1" (case "Closest?(b)(x,RtoF(x))")
                (("1" (expand "Closest?")
                  (("1" (inst -1 "float_pair(1, exp)")
                    (("1"
                      (case "FtoR(float_pair(1, exp))=precision^exp")
                      (("1" (replace -1 :hide? t) (("1" (grind) nil)))
                       ("2" (expand "FtoR" 1)
                        (("2" (expand "float_pair")
                          (("2" (assert) nil)))))))
                     ("2" (expand "Fbounded?")
                      (("2" (expand "float_pair")
                        (("2" (hide-all-but 1)
                          (("2" (expand "abs")
                            (("2" (assert)
                              (("2"
                                (use "precision_less_vNum")
                                (("2" (assert) nil)))))))))))))))))
                 ("2" (typepred "RtoF")
                  (("2" (typepred "round")
                    (("2" (inst? -1)
                      (("2" (inst? -2) (("2" (assert) nil)))))))))))))
             ("2" (expand "FtoR" 1)
              (("2" (lemma "both_sides_expt_gt1_lt")
                (("2" (inst? -1 :where 1)
                  (("1" (inst? -1 :where -2)
                    (("1" (replace -1 :hide? t :dir rl)
                      (("1" (lemma "lt_times_lt_pos1")
                        (("1"
                          (inst -1 "precision^exp" "1"
                           "precision ^ (Fexp(RtoF(x)))"
                           "Fnum(RtoF(x))")
                          (("1" (split -1)
                            (("1" (assert) nil)
                             ("2" (case "FtoR(RtoF(x)) > 0")
                              (("1"
                                (case "Fnum(RtoF(x)) > 0")
                                (("1" (assert) nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (assert)
                                      (("2" (grind-reals) nil)))))))))
                               ("2"
                                (hide-all-but (1 4))
                                (("2"
                                  (lemma "RleRoundedR0")
                                  (("2"
                                    (inst
                                     -1
                                     "Closest?"
                                     "b"
                                     "RtoF(x)"
                                     "x")
                                    (("2"
                                      (split -1)
                                      (("1" (assert) nil)
                                       ("2" (assert) nil)
                                       ("3"
                                        (typepred "RtoF")
                                        (("3"
                                          (typepred "round")
                                          (("3"
                                            (inst? -1 :where 1)
                                            (("3"
                                              (inst? -2 :where -1)
                                              (("3"
                                                (assert)
                                                nil)))))))))
                                       ("4"
                                        (use "Closest_RoundedMode")
                                        nil)
                                       ("5" (assert) nil)))))))))))
                             ("3" (propax) nil)))))))))))
                   ("2" (assert) nil)))))))))))
         ("2" (assert) nil))))))
    nil)
   nil nil)
  (exp_bound-1 nil 3699177037
   ("" (skeep)
    (("" (case "FtoR(RtoF(x))=0")
      (("1" (typepred "RtoF")
        (("1" (inst -2 "x")
          (("1" (split -2)
            (("1" (typepred "exp") (("1" (assert) nil nil)) nil)
             ("2" (expand "FtoR" -2)
              (("2" (hide-all-but (-2 1)) (("2" (grind-reals) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (case "exp < Fexp(RtoF(x))")
        (("1" (hide 2)
          (("1" (case "radix ^ exp < FtoR(RtoF(x))")
            (("1" (hide -2)
              (("1" (case "Closest?(b)(x,RtoF(x))")
                (("1" (expand "Closest?")
                  (("1" (inst -1 "float_pair(1, exp)")
                    (("1" (case "FtoR(float_pair(1, exp))=radix^exp")
                      (("1" (replace -1 :hide? t)
                        (("1" (grind) nil nil)) nil)
                       ("2" (expand "FtoR" 1)
                        (("2" (expand "float_pair")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "Fbounded?")
                      (("2" (expand "float_pair")
                        (("2" (hide-all-but 1)
                          (("2" (expand "abs")
                            (("2" (assert)
                              (("2"
                                (use "radix_less_vNum")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "RtoF")
                  (("2" (typepred "round")
                    (("2" (inst? -1)
                      (("2" (inst? -2) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "FtoR" 1)
              (("2" (lemma "both_sides_expt_gt1_lt")
                (("2" (inst? -1 :where 1)
                  (("1" (inst? -1 :where -2)
                    (("1" (replace -1 :hide? t :dir rl)
                      (("1" (lemma "lt_times_lt_pos1")
                        (("1"
                          (inst -1 "radix^exp" "1"
                           "radix ^ (Fexp(RtoF(x)))" "Fnum(RtoF(x))")
                          (("1" (split -1)
                            (("1" (assert) nil nil)
                             ("2" (case "FtoR(RtoF(x)) > 0")
                              (("1"
                                (case "Fnum(RtoF(x)) > 0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide-all-but (-1 1))
                                  (("2"
                                    (expand "FtoR")
                                    (("2"
                                      (assert)
                                      (("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but (1 4))
                                (("2"
                                  (lemma "RleRoundedR0")
                                  (("2"
                                    (inst
                                     -1
                                     "Closest?"
                                     "b"
                                     "RtoF(x)"
                                     "x")
                                    (("2"
                                      (split -1)
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil)
                                       ("3"
                                        (typepred "RtoF")
                                        (("3"
                                          (typepred "round")
                                          (("3"
                                            (inst? -1 :where 1)
                                            (("3"
                                              (inst? -2 :where -1)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (use "Closest_RoundedMode")
                                        nil
                                        nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (RleRoundedR0 formula-decl nil float nil)
    (Closest_RoundedMode formula-decl nil float nil)
    (RND type-eq-decl nil float nil)
    (radix_less_vNum formula-decl nil float nil)
    (float_pair const-decl "float" float nil))
   nil))
 (closestrounding_preserves_fplowerbound 0
  (closestrounding_preserves_fplowerbound-1 nil 3699176999
   ("" (skeep)
    (("" (case "FtoR(RtoF(x)) < FtoR(f)")
      (("1" (hide 1)
        (("1" (typepred "RtoF")
          (("1" (typepred "round")
            (("1" (inst -1 "x" "RtoF(x)")
              (("1" (inst -2 "x")
                (("1" (assert)
                  (("1" (expand "Closest?")
                    (("1" (inst -1 "f")
                      (("1" (assert) (("1" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil))
   nil))
 (rep_exp_bound_TCC1 0
  (rep_exp_bound_TCC1-1 nil 3699178118 ("" (subtype-tcc) nil nil)
   ((float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (vNum const-decl "posnat" float nil)
    (FtoR const-decl "real" float nil))
   nil
   (rep_exp_bound subtype "float_props_rounding.exp"
    "{i: integers.int | booleans.OR(float_props_rounding.radix /= 0, reals.>=(i, 0))}")))
 (rep_exp_bound 0
  (rep_exp_bound-1 nil 3699176590
   ("" (skeep)
    (("" (case "abs(FtoR(f)) <=  abs(x) + err")
      (("1" (hide -2)
        (("1" (case "abs(FtoR(f)) = FtoR(Fabs(f))")
          (("1" (replace -1 :hide? t)
            (("1" (case "FtoR(Fabs(f)) <= FtoR(RtoF(abs(x) + err))")
              (("1" (hide -2)
                (("1" (lemma "Lexico")
                  (("1" (inst -1 "b" "Fabs(f)" "RtoF(abs(x) + err)")
                    (("1" (split -1)
                      (("1" (hide -2)
                        (("1" (expand "Fabs" -1)
                          (("1" (lemma "exp_bound")
                            (("1"
                              (inst -1 "b" "round" "RtoF" "exp"
                               "abs(x)  + err")
                              (("1"
                                (split -1)
                                (("1" (assert) nil nil)
                                 ("2" (propax) nil nil))
                                nil)
                               ("2"
                                (typepred "RtoF")
                                (("2"
                                  (expand "unique_zero")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (propax) nil nil)
                       ("3" (hide-all-but 1)
                        (("3" (expand "Fabs")
                          (("3" (expand "FtoR")
                            (("3" (ground) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (typepred "RtoF")
                        (("4" (inst? -2) nil nil)) nil)
                       ("5" (use "FabsCanonic")
                        (("5" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but (-1 1))
                (("2" (lemma "closestrounding_preserves_fplowerbound")
                  (("2"
                    (inst -1 "b" "round" "RtoF" "Fabs(f)"
                     "abs(x) + err")
                    (("1" (assert) nil nil)
                     ("2" (use "FabsBounded")
                      (("2" (assert)
                        (("2" (use "FcanonicBounded")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (use "FabsCorrect") (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (hide-all-but (-1 1))
        (("2" (use "abs_dist") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Fcanonic? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (FtoR const-decl "real" float nil)
    (float type-eq-decl nil float nil)
    (Fabs const-decl "float" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Closest? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Lexico formula-decl nil float nil)
    (FabsCanonic formula-decl nil float nil)
    (FabsBounded formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (FabsCorrect formula-decl nil float nil)
    (abs_dist formula-decl nil abs_lems reals))
   nil))
 (unique_zero_closest_rounding 0
  (unique_zero_closest_rounding-1 nil 3699216677
   ("" (expand "unique_zero")
    (("" (skeep*)
      (("" (typepred "RtoF")
        (("" (inst? -2)
          (("" (hide -1)
            (("" (expand "Fcanonic?")
              (("" (invoke (case "%1") (! -1 1))
                (("1" (hide -2)
                  (("1" (expand "Fnormal?")
                    (("1" (typepred "RtoF(y)")
                      (("1" (expand "Fbounded?")
                        (("1" (flatten)
                          (("1" (replace -4 :hide? t)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "Fsubnormal?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Fsubnormal? const-decl "bool" float nil)
    (Fnormal? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Rounding type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil))
   shostak))
 (unique_zero_RND_aux 0
  (unique_zero_RND_aux-1 nil 3699202825
   ("" (skeep*)
    (("" (typepred "RND_aux(b)(y)")
      (("" (expand "Fcanonic?")
        (("" (invoke (case "%1") (! -1 1))
          (("1" (hide -2)
            (("1" (expand "Fnormal?")
              (("1" (flatten)
                (("1" (expand "Fbounded?")
                  (("1" (flatten)
                    (("1" (replace -4 :hide? t)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "Fsubnormal?") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RND_aux const-decl "(Fcanonic?(b))" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fnormal? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fsubnormal? const-decl "bool" float nil))
   shostak))
 (unique_zero_RND_Min_TCC1 0
  (unique_zero_RND_Min_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t) (("" (use "RND_Min_isMin") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (RND_Min_isMin formula-decl nil float nil))
   nil
   (unique_zero_RND_Min subtype
    "float[float_props_rounding.radix].RND_Min(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].isMin?(float_props_rounding.b))")))
 (unique_zero_RND_Min 0
  (unique_zero_RND_Min-1 nil 3699185066
   ("" (skeep)
    (("" (expand "unique_zero")
      (("" (skeep)
        (("" (expand "RND_Min")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "unique_zero_RND_aux")
                    (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (lemma "unique_zero_RND_aux")
                          (("1" (inst -1 "b" "-y")
                            (("1" (assert)
                              (("1"
                                (expand "Fopp")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (use "FpredFoppFsucc")
                          (("2" (replace -1 :hide? t)
                            (("2" (expand "Fopp" (-1 2))
                              (("2"
                                (lemma "FsuccPos")
                                (("2"
                                  (inst -1 "b" "RND_aux(b)(-y)")
                                  (("2"
                                    (split -1)
                                    (("1"
                                      (expand "FtoR" -1)
                                      (("1" (assert) nil nil))
                                      nil)
                                     ("2"
                                      (lemma "RND_aux_ge")
                                      (("2"
                                        (inst -1 "b" "-y")
                                        (("2"
                                          (lemma "FpredPos")
                                          (("2"
                                            (inst
                                             -1
                                             "b"
                                             "Fsucc(b)(RND_aux(b)(-y))")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (lemma "FpredFsucc")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil)
                                               ("3"
                                                (use "FsuccCanonic")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RND_Min const-decl "(Fcanonic?(b))" float nil)
    (Format type-eq-decl nil float nil)
    (FpredFoppFsucc formula-decl nil float nil)
    (RND_aux const-decl "(Fcanonic?(b))" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (RND_aux_ge formula-decl nil float nil)
    (FpredPos formula-decl nil float nil)
    (FpredFsucc formula-decl nil float nil)
    (FsuccCanonic formula-decl nil float nil)
    (Fsucc const-decl "float" float nil)
    (FtoR const-decl "real" float nil)
    (FsuccPos formula-decl nil float nil)
    (Fopp const-decl "float" float nil))
   shostak))
 (unique_zero_RND_Max_TCC1 0
  (unique_zero_RND_Max_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t) (("" (use "RND_Max_isMax") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (RND_Max_isMax formula-decl nil float nil))
   nil
   (unique_zero_RND_Max subtype
    "float[float_props_rounding.radix].RND_Max(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].isMax?(float_props_rounding.b))")))
 (unique_zero_RND_Max 0
  (unique_zero_RND_Max-1 nil 3699184990
   ("" (skeep)
    (("" (expand "unique_zero")
      (("" (skeep)
        (("" (expand "RND_Max")
          (("" (expand "Fopp")
            (("" (use "unique_zero_RND_Min")
              (("" (expand "unique_zero")
                (("" (inst -1 "-y") (("" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RND_Max const-decl "(Fcanonic?(b))" float nil)
    (Format type-eq-decl nil float nil)
    (Fopp const-decl "float" float nil))
   shostak))
 (unique_zero_RND_EClosest_TCC1 0
  (unique_zero_RND_EClosest_TCC1-1 nil 3765014622
   ("" (skeep* :preds? t)
    (("" (use "RND_EClosest_isEclosest") nil nil)) nil)
   ((Format type-eq-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil))
   nil
   (unique_zero_RND_EClosest subtype
    "float[float_props_rounding.radix].RND_EClosest(float_props_rounding.b)"
    "float[float_props_rounding.radix].RNDF(float_props_rounding.b, float[float_props_rounding.radix].EvenClosest?(float_props_rounding.b))")))
 (unique_zero_RND_EClosest 0
  (unique_zero_RND_EClosest-1 nil 3699179317
   ("" (skeep)
    (("" (expand "RND_EClosest")
      (("" (expand "unique_zero")
        (("" (skeep)
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (use "unique_zero_RND_Min")
                    (("1" (expand "unique_zero")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (assert)
                    (("1" (flatten)
                      (("1" (assert)
                        (("1" (use "unique_zero_RND_Max")
                          (("1" (expand "unique_zero")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (split 2)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (use "unique_zero_RND_Min")
                              (("1"
                                (expand "unique_zero")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (use "unique_zero_RND_Min")
                                    (("1"
                                      (expand "unique_zero")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (use "unique_zero_RND_Max")
                                    (("2"
                                      (expand "unique_zero")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (Format type-eq-decl nil float nil))
   shostak))
 (closest?_ucf__j 0
  (closest?_ucf__j-1 nil 3796048251
   ("" (split 1)
    (("1" (skeep)
      (("1" (expand "closest?_ucf") (("1" (propax) nil nil)) nil)) nil)
     ("2" (expand "closest?_ucf")
      (("2" (use "EvenClosest_rounded_mode")
        (("2"
          (case "EvenClosest?(given_format) = LAMBDA (x1: real, (f1: (Fbounded?(given_format)))): EvenClosest?(given_format)(x1, f1)")
          (("1" (assert) nil nil) ("2" (apply-extensionality) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((EvenClosest_rounded_mode formula-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil))
   nil
   (closest?_ucf__j subtype "float_props_rounding.closest?_ucf"
    "{round: float[float_props_rounding.radix].RestrictedRounding((# Prec := float_props_rounding.precision, dExp := float_props_rounding.dExp #), float[float_props_rounding.radix].EvenClosest?) | float[float_props_rounding.radix].rounded_mode?((# Prec := float_props_rounding.precision, dExp := float_props_rounding.dExp #))(round)}")))
 (rnd_eclosest_is_particuLar_closest 0
  (rnd_eclosest_is_particuLar_closest-1 nil 3799080345
   (""
    (then (skeep) (use "RND_EClosest_isEclosest")
     (expand "currified_closest?_ucf") (expand "closest?_ucf")
     (propax))
    nil nil)
   ((Format type-eq-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil))
   shostak))
 (rnd_ucf_TCC1 0
  (rnd_ucf_TCC1-2 nil 3799081863
   ("" (use "rnd_eclosest_is_particuLar_closest") nil nil) nil nil
   (rnd_ucf subtype
    "float[float_props_rounding.radix].RND_EClosest((# Prec := float_props_rounding.precision, dExp := float_props_rounding.dExp #))(float_props_rounding.x1)"
    "{f: float_props_rounding.unb_canonic_float | float_props_rounding.currified_closest?_ucf(float_props_rounding.x1)(f)}"))
  (rnd_ucf_TCC1-1 nil 3796048251 ("" (subtype-tcc) nil nil) nil nil
   (rnd_ucf subtype
    "float[float_props_rounding.radix].RND_EClosest((# Prec := float_props_rounding.precision, dExp := float_props_rounding.dExp #))(float_props_rounding.x1)"
    "{f: float_props_rounding.unb_canonic_float | float_props_rounding.currified_closest?_ucf(float_props_rounding.x1)(f)}")))
 (rnd_prj_ucf 0
  (rnd_prj_ucf-1 nil 3799080345
   ("" (skeep)
    (("" (expand "rnd_ucf")
      (("" (lemma "ClosestRNDF_FtoR_inverse")
        ((""
          (inst -1 "given_format" "EvenClosest?(given_format)"
           " RND_EClosest(given_format)")
          (("1" (expand "FtoR_inverse")
            (("1" (expand "prj_ucf") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (skeep) (("2" (use "RND_EClosest_isEclosest") nil nil))
            nil)
           ("3" (skeep)
            (("3" (expand "EvenClosest?") (("3" (flatten) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ClosestRNDF_FtoR_inverse formula-decl nil float nil)
    (RND_EClosest_isEclosest formula-decl nil float nil)
    (FtoR_inverse const-decl "bool" float nil)
    (CanonicRoundingFun type-eq-decl nil float nil)
    (RNDF type-eq-decl nil float nil)
    (ClosestRoundingPred type-eq-decl nil float nil)
    (Rounding type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (RND_EClosest const-decl "(Fcanonic?(b))" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil))
   shostak))
 (rnd_opp_ucf 0
  (rnd_opp_ucf-1 nil 3799080346
   ("" (skeep)
    (("" (use "FcanonicUnique")
      (("" (inst -1 "given_format")
        (("" (assert)
          (("" (split -1)
            (("1" (hide 2)
              (("1" (case "currified_closest?_ucf(-x)(rnd_ucf(-x))")
                (("1"
                  (case "currified_closest?_ucf(-x)(Fopp(rnd_ucf(x)))")
                  (("1" (use "EvenClosest_Unique")
                    (("1" (inst -1 "given_format")
                      (("1" (expand "Unique?")
                        (("1" (inst? -1 :where 1)
                          (("1" (inst -1 "-x")
                            (("1" (assert)
                              (("1"
                                (expand "currified_closest?_ucf")
                                (("1"
                                  (expand "closest?_ucf")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "currified_closest?_ucf")
                    (("2" (expand "closest?_ucf")
                      (("2" (hide 2)
                        (("2" (use "EvenClosestFopp")
                          (("2" (assert)
                            (("2" (typepred "rnd_ucf(x)")
                              (("2"
                                (expand "currified_closest?_ucf")
                                (("2"
                                  (expand "closest?_ucf")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (use "FcanonicOpp")
                    (("3" (assert)
                      (("3" (use "FcanonicBounded")
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "rnd_ucf(-x)")
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "FcanonicOpp")
              (("2" (inst -1 "given_format" "rnd_ucf(x)")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FcanonicOpp formula-decl nil float nil)
    (FcanonicBounded formula-decl nil float nil)
    (EvenClosestFopp formula-decl nil float nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (Unique? const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fopp const-decl "float" float nil)
    (FcanonicUnique formula-decl nil float nil))
   shostak))
 (rnd_ucf_monotonic 0
  (rnd_ucf_monotonic-1 nil 3799080346
   ("" (skeep)
    (("" (typepred "rnd_ucf(x1)")
      (("" (expand "currified_closest?_ucf")
        (("" (expand "closest?_ucf")
          (("" (use "EvenClosest_monotone")
            (("" (expand "monotone?")
              (("" (inst -1 "x1" "x2" "rnd_ucf(x1)" "rnd_ucf(x2)")
                (("" (split -1)
                  (("1" (expand "prj_ucf") (("1" (propax) nil nil))
                    nil)
                   ("2" (assert) nil nil) ("3" (propax) nil nil)
                   ("4" (typepred "rnd_ucf(x2)")
                    (("4" (expand "currified_closest?_ucf")
                      (("4" (expand "closest?_ucf")
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((EvenClosest_monotone formula-decl nil float nil)
    (monotone? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil))
   shostak))
 (rnc_ucf_increasing 0
  (rnc_ucf_increasing-1 nil 3796048257
   (""
    (then (skeep) (expand "<=" 1) (use "FleCorrect")
     (replace -1 :hide? t) (use "rnd_ucf_monotonic") (assert)
     (expand "prj_ucf") (propax))
    nil nil)
   ((FleCorrect formula-decl nil float nil)
    (Fbounded? const-decl "bool" float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Format type-eq-decl nil float nil)
    (float type-eq-decl nil float nil))
   shostak))
 (rnd_ucf_is_canonic_rounding_closest_ucf_ 0
  (rnd_ucf_is_canonic_rounding_closest_ucf_-1 nil 3884256468
   ("" (lemma "rnd_eclosest_is_particuLar_closest")
    (("" (expand "currified_closest?_ucf")
      (("" (expand "rnd_ucf") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((currified_closest?_ucf const-decl "bool" float_props_rounding nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}"
     float_props_rounding nil)
    (rnd_eclosest_is_particuLar_closest formula-decl nil
     float_props_rounding nil))
   shostak))
 (rnd_ucf_is_canonic_rounding_closest_ucf 0
  (rnd_ucf_is_canonic_rounding_closest_ucf-1 nil 3884220057
   ("" (use "rnd_ucf_is_canonic_rounding_closest_ucf_") nil nil)
   ((rnd_ucf_is_canonic_rounding_closest_ucf_ formula-decl nil
     float_props_rounding nil))
   nil
   (rnd_ucf_is_canonic_rounding_closest_ucf subtype
    "float_props_rounding.rnd_ucf"
    "float[float_props_rounding.radix].CanonicRoundingFun((# Prec := float_props_rounding.precision, dExp := float_props_rounding.dExp #), float_props_rounding.closest?_ucf)")))
 (prj_rnd_ucf_ints 0
  (prj_rnd_ucf_ints-1 nil 3884244119
   ("" (skeep)
    (("" (use "Closest_int_exact_rep")
      (("" (typepred "rnd_ucf(z)")
        (("" (expand "currified_closest?_ucf")
          (("" (expand "closest?_ucf")
            ((""
              (inst -3
               "EvenClosest?((# Prec := precision, dExp := dExp #))"
               "rnd_ucf")
              (("1" (expand "exactly_representable")
                (("1" (expand "prj_ucf") (("1" (propax) nil nil)) nil))
                nil)
               ("2" (split 1)
                (("1" (skeep 1)
                  (("1" (typepred "rnd_ucf(x)")
                    (("1" (expand "currified_closest?_ucf")
                      (("1" (expand "closest?_ucf")
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep 1)
                  (("2" (typepred "rnd_ucf(r)")
                    (("2" (expand "currified_closest?_ucf")
                      (("2" (expand "closest?_ucf")
                        (("2" (expand "EvenClosest?")
                          (("2" (flatten) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Closest_int_exact_rep formula-decl nil float nil)
    (vNum const-decl "posnat" float nil)
    (Format type-eq-decl nil float nil)
    (EvenClosest? const-decl "bool" float nil)
    (Closest? const-decl "bool" float nil)
    (RNDF type-eq-decl nil float nil)
    (Rounding type-eq-decl nil float nil)
    (exactly_representable const-decl "bool" float nil)
    (float type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (Fbounded? const-decl "bool" float nil))
   shostak))
 (prj_rnd_ucf_zero 0
  (prj_rnd_ucf_zero-1 nil 3884244443
   ("" (use "prj_rnd_ucf_ints")
    (("" (rewrite "abs_0") (("" (assert) nil nil)) nil)) nil)
   ((abs_0 formula-decl nil abs_lems reals)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (radix formal-const-decl "above(1)" float_props_rounding nil)
    (Format type-eq-decl nil float nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (vNum const-decl "posnat" float nil)
    (precision formal-const-decl "above(1)" float_props_rounding nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     float_props_rounding nil)
    (prj_rnd_ucf_ints formula-decl nil float_props_rounding nil))
   shostak)))

