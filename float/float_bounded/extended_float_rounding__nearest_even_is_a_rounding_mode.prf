(extended_float_rounding__nearest_even_is_a_rounding_mode
 (neven_th_TCC1 0
  (neven_th_TCC1-1 nil 3799515313 ("" (subtype-tcc) nil nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (neven_th subtype
    "extended_float_rounding__nearest_even_is_a_rounding_mode.radix_"
    "integers.above(1)")))
 (neven_th_TCC2 0
  (neven_th_TCC2-1 nil 3799515313
   ("" (typepred "precision_") (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil))
   nil
   (neven_th subtype
    "extended_float_rounding__nearest_even_is_a_rounding_mode.precision_"
    "integers.above(1)")))
 (neven_th_TCC3 0
  (neven_th_TCC3-1 nil 3799515313
   ("" (typepred "precision_")
    (("" (typepred "dExp_") (("" (assert) (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil))
   nil
   (neven_th subtype
    "extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_"
    "{d: integers.posnat | reals.>(d, (number_fields.-)(number_fields.*(2, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_), 3))}")))
 (IMP_extended_float_rounding_bound_on_exp_of_rounded_erreal_TCC1 0
  (IMP_extended_float_rounding_round_zero_TCC1-1 nil 3799515313
   ("" (use "bound_on_exp_of_rounded_erreal") nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bound_on_exp_of_rounded_erreal formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "bound_on_exp_of_rounded_erreal: AXIOM FORALL (x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].xef_real): reals.<=(Fexp(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x)), extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].max_exp)")))
 (IMP_extended_float_rounding_round_er_eq_unb_TCC1 0
  (IMP_extended_float_rounding_round_er_eq_unb_TCC1-1 nil 3799594542
   ("" (use "round_er_eq_unb") nil)
   (nil nil
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (er_upper_bound formula-decl nil ieee754_domain nil)
    (er_lb_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (zero_is_er formula-decl nil ieee754_domain nil)
    (< const-decl "bool" reals nil) nil
    (er_max_neg_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_max_neg_prop formula-decl nil ieee754_domain nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (er_ub_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (minus_real_is_real application-judgement "real" reals nil) nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (er_lower_bound formula-decl nil ieee754_domain nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_er_eq_unb: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real | (booleans.NOT)(x = 0)): extended_float_rounding.round(x) = extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x))"))
  (IMP_extended_float_rounding_round_inverse_of_projection_on_nzfinite_TCC1-1
   nil 3799515313 ("" (use "round_er_eq_unb") nil nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (round_inverse_of_projection_on_nzfinite formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_er_eq_unb: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real | (booleans.NOT)(x = 0)): extended_float_rounding.round(x) = extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x))")))
 (IMP_extended_float_rounding_rtoed_er_is_finite_TCC1 0
  (IMP_extended_float_rounding_proj_round_is_monotone_on_er_TCC1-2 nil
   3799519776 ("" (use "rtoed_er_is_finite") nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rtoed_er_is_finite formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "rtoed_er_is_finite: AXIOM FORALL (x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].xef_real): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(extended_float_rounding.round(x))"))
  (IMP_extended_float_rounding_proj_round_is_monotone_on_er_TCC1-1 nil
   3799515313 ("" (mapped-axiom-tcc) nil nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "rtoed_er_is_finite: AXIOM FORALL (x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].xef_real): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(extended_float_rounding.round(x))")))
 (IMP_extended_float_rounding_proj_round_er_eq_unb_TCC1 0
  (IMP_extended_float_rounding_proj_round_er_eq_unb_TCC1-1 nil
   3799594721 ("" (use "proj_round_er_eq_unb") nil)
   ((er_lower_bound formula-decl nil ieee754_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (emax const-decl "above(1)" extended_float nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_ub_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    nil nil
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (xef_real nonempty-type-eq-decl nil extended_float nil)
    (exactly_representable_as_pair_of_integers? const-decl "bool"
     extended_float nil)
    (dtor_rtod_on_er formula-decl nil
     extended_float_rounding__nearest_even nil)
    (er_max_neg_prop formula-decl nil ieee754_domain nil)
    (er_max_neg_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    nil (< const-decl "bool" reals nil)
    (prj_ef const-decl "real" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil (minus_real_is_real application-judgement "real" reals nil)
    (er_lb_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_upper_bound formula-decl nil ieee754_domain nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_er_eq_unb: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x)) = float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ucf(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x))"))
  (IMP_extended_float_rounding_ieee754_semantics_add_inv_def_interpretation_obligation_1_TCC1-2
   nil 3799519698 ("" (use "proj_round_er_eq_unb") nil nil)
   ((prj_ef const-decl "real" extended_float nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FoppCorrect formula-decl nil float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (float type-eq-decl nil float nil)
    (efloat type-decl nil extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (given_format const-decl "Format" float_props_rounding nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding nil)
    (<= const-decl "bool" reals nil)
    (max_exp const-decl "posint" extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
     extended_float nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (flip_sign const-decl "efloat" extended_float nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_er_eq_unb: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x)) = float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ucf(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x))"))
  (IMP_extended_float_rounding_ieee754_semantics_add_inv_def_interpretation_obligation_1_TCC1-1
   nil 3799515313 ("" (mapped-axiom-tcc) nil nil)
   ((radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Fopp const-decl "float" float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (flip_sign const-decl "efloat" extended_float nil)
    (FtoR const-decl "real" float nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (prj_ef const-decl "real" extended_float nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_er_eq_unb: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x)) = float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ucf(float_props_rounding[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].rnd_ucf(x))")))
 (IMP_extended_float_rounding_proj_round_on_er_TCC1 0
  (IMP_extended_float_rounding_proj_round_on_er_TCC1-1 nil 3799594803
   ("" (use "proj_round_on_er") nil)
   ((er_upper_bound formula-decl nil ieee754_domain nil)
    (er_lb_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (minus_real_is_real application-judgement "real" reals nil) nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float nil)
    (< const-decl "bool" reals nil) nil
    (er_max_neg_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_max_neg_prop formula-decl nil ieee754_domain nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (dtor_rtod_on_er formula-decl nil
     extended_float_rounding__nearest_even nil)
    (exactly_representable_as_pair_of_integers? const-decl "bool"
     extended_float nil)
    (xef_real nonempty-type-eq-decl nil extended_float nil)
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    nil nil
    (er_ub_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (er_lower_bound formula-decl nil ieee754_domain nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_on_er: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): x = extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x))"))
  (IMP_extended_float_rounding_ieee754_semantics_nfinite?_def_interpretation_obligation_1_TCC1-1
   nil 3799515313 ("" (use "proj_round_on_er") nil nil)
   ((neg_times_lt formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (FtoR const-decl "real" float nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (prj_ef const-decl "real" extended_float nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nznfinite? const-decl "bool" extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_on_er: AXIOM FORALL (x: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): x = extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x))")))
 (IMP_extended_float_rounding_round_is_injective_on_er_TCC1 0
  (IMP_extended_float_rounding_round_is_injective_on_er_TCC1-1 nil
   3799595224 ("" (use "round_is_injective_on_er") nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_is_injective_on_er: AXIOM FORALL (x, y: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): booleans.IMPLIES(extended_float_rounding.round(x) = extended_float_rounding.round(y), x = y)"))
  (IMP_extended_float_rounding_ieee754_semantics_pfinite?_def_interpretation_obligation_1_TCC1-1
   nil 3799515313 ("" (use "round_is_injective_on_er") nil nil)
   ((pos_times_gt formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (FtoR const-decl "real" float nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (prj_ef const-decl "real" extended_float nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (nzpfinite? const-decl "bool" extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_is_injective_on_er: AXIOM FORALL (x, y: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): booleans.IMPLIES(extended_float_rounding.round(x) = extended_float_rounding.round(y), x = y)")))
 (IMP_extended_float_rounding_ieee754_semantics_round_proj_interpretation_obligation_1_TCC1
  0
  (IMP_extended_float_rounding_ieee754_semantics_nzfinite?_def_interpretation_obligation_1_TCC1-1
   nil 3799515313
   ("" (use "ieee754_semantics_round_proj_interpretation_obligation_1")
    nil)
   ((nonzero_times3 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (FtoR const-decl "real" float nil)
    (/= const-decl "boolean" notequal nil)
    (is_finite? const-decl "bool" extended_float nil)
    (zero_inclusive formula-decl nil extended_float nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (prj_ef const-decl "real" extended_float nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_round_proj_interpretation_obligation_1: AXIOM FORALL (f: {x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat | extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?(x)}): f = extended_float_rounding.round(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f));")))
 (IMP_extended_float_rounding_ieee754_semantics_nzfinite?_def_interpretation_obligation_1_TCC1
  0
  (IMP_extended_float_rounding_ieee754_semantics_round_proj_interpretation_obligation_1_TCC1-1
   nil 3799515313
   (""
    (use "ieee754_semantics_nzfinite?_def_interpretation_obligation_1")
    nil)
   ((posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (efloat type-decl nil extended_float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (round_inverse_of_projection_on_nzfinite formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_nzfinite?_def_interpretation_obligation_1: AXIOM FORALL (f: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?(f) = (booleans.AND(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(f), extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f) /= 0))")))
 (IMP_extended_float_rounding_ieee754_semantics_pfinite?_def_interpretation_obligation_1_TCC1
  0
  (IMP_extended_float_rounding_round_is_injective_on_er_TCC1-2 nil
   3799518697
   (""
    (use "ieee754_semantics_pfinite?_def_interpretation_obligation_1")
    nil)
   ((er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (round_zero formula-decl nil extended_float_rounding__nearest_even
     nil)
    (poszero const-decl "efloat" extended_float nil)
    (er_lower_bound formula-decl nil ieee754_domain nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (neginf const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (zero_exclusive formula-decl nil extended_float nil)
    (posinf const-decl "efloat" extended_float nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (< const-decl "bool" reals nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_upper_bound formula-decl nil ieee754_domain nil)
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (float type-eq-decl nil float nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Format type-eq-decl nil float nil)
    (Fcanonic? const-decl "bool" float nil)
    (given_format const-decl "Format" float_props_rounding nil)
    (unb_canonic_float type-eq-decl nil float_props_rounding nil)
    (Fbounded? const-decl "bool" float nil)
    (currified_closest?_ucf const-decl "bool" float_props_rounding nil)
    (rnd_ucf const-decl
     "{f: unb_canonic_float | currified_closest?_ucf(x1)(f)}"
     float_props_rounding nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (closest?_ucf const-decl "bool" float_props_rounding nil)
    (Unique? const-decl "bool" float nil)
    (EvenClosest? const-decl "bool" float nil)
    (IMP_extended_float_rounding_proj_round_on_er_TCC1 mapped-axiom-tcc
     nil extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMP_extended_float_rounding_proj_round_er_eq_unb_TCC1
     mapped-axiom-tcc nil
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (prj_ucf const-decl "real" float_props_rounding nil)
    (EvenClosest_Unique formula-decl nil float nil)
    (<= const-decl "bool" reals nil)
    (max_exp const-decl "posint" extended_float nil)
    (/= const-decl "boolean" notequal nil)
    (nzfinite adt-constructor-decl
     "[{v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0} ->
   (nzfinite?)]" extended_float nil)
    (val adt-accessor-decl "[(nzfinite?) ->
   {v: unb_canonic_float | Fexp(v) <= max_exp AND Fnum(v) /= 0}]"
     extended_float nil)
    (nzfinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (IMP_extended_float_rounding_round_er_eq_unb_TCC1 mapped-axiom-tcc
     nil extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (FALSE const-decl "bool" booleans nil)
    (zero adt-constructor-decl "[bool -> (zero?)]" extended_float nil)
    (positive? shared-adt-accessor-decl
     "[{x: efloat | infinite?(x) OR zero?(x)} -> bool]" extended_float
     nil)
    (zero? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (infinite? adt-recognizer-decl "[efloat -> boolean]" extended_float
     nil)
    (efloat type-decl nil extended_float nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_pfinite?_def_interpretation_obligation_1: AXIOM FORALL (f: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzpfinite?(f) = (booleans.AND(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(f), reals.>(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f), 0)));"))
  (IMP_extended_float_rounding_round_is_injective_on_er_TCC1-1 nil
   3799515313 ("" (mapped-axiom-tcc) nil nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_pfinite?_def_interpretation_obligation_1: AXIOM FORALL (f: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzpfinite?(f) = (booleans.AND(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(f), reals.>(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f), 0)));")))
 (IMP_extended_float_rounding_ieee754_semantics_nfinite?_def_interpretation_obligation_1_TCC1
  0
  (IMP_extended_float_rounding_proj_round_on_er_TCC1-2 nil 3799516770
   (""
    (use "ieee754_semantics_nfinite?_def_interpretation_obligation_1")
    nil)
   ((er_lower_bound formula-decl nil ieee754_domain nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (above nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (emax const-decl "above(1)" extended_float nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (er_ub_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (xef_real nonempty-type-eq-decl nil extended_float nil)
    (exactly_representable_as_pair_of_integers? const-decl "bool"
     extended_float nil)
    (dtor_rtod_on_er formula-decl nil
     extended_float_rounding__nearest_even nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_max_neg_prop formula-decl nil ieee754_domain nil)
    (er_max_neg_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (< const-decl "bool" reals nil)
    (prj_ef const-decl "real" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (negzero const-decl "efloat" extended_float nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (er_lb_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_upper_bound formula-decl nil ieee754_domain nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_nfinite?_def_interpretation_obligation_1: AXIOM FORALL (f: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nznfinite?(f) = (booleans.AND(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(f), reals.<(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f), 0)));"))
  (IMP_extended_float_rounding_proj_round_on_er_TCC1-1 nil 3799515313
   ("" (mapped-axiom-tcc) nil nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_nfinite?_def_interpretation_obligation_1: AXIOM FORALL (f: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nznfinite?(f) = (booleans.AND(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].is_finite?(f), reals.<(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f), 0)));")))
 (IMP_extended_float_rounding_ieee754_semantics_add_inv_def_interpretation_obligation_1_TCC1
  0
  (IMP_extended_float_rounding_proj_round_er_eq_unb_TCC1-2 nil
   3799516715
   (""
    (use "ieee754_semantics_add_inv_def_interpretation_obligation_1")
    nil)
   ((er_upper_bound formula-decl nil ieee754_domain nil)
    (er_lb_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (negzero const-decl "efloat" extended_float nil)
    (poszero const-decl "efloat" extended_float nil)
    (prj_ef const-decl "real" extended_float nil)
    (< const-decl "bool" reals nil)
    (er_max_neg_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_max_neg_prop formula-decl nil ieee754_domain nil)
    (dtor_rtod_on_er formula-decl nil
     extended_float_rounding__nearest_even nil)
    (exactly_representable_as_pair_of_integers? const-decl "bool"
     extended_float nil)
    (xef_real nonempty-type-eq-decl nil extended_float nil)
    (er_min_pos_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (er_min_pos_prop formula-decl nil ieee754_domain nil)
    (rnd_ef const-decl "efloat" extended_float_rounding__nearest_even
     nil)
    (er_ub_correspondent formula-decl nil
     extended_float_exactly_representable_reals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (er_real nonempty-type-eq-decl nil ieee754_domain nil)
    (exactly_representable? const-decl "bool" ieee754_domain nil)
    (emax const-decl "above(1)" extended_float nil)
    (dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (er_lower_bound formula-decl nil ieee754_domain nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_add_inv_def_interpretation_obligation_1: AXIOM FORALL (f: {x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat | extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?(x)}): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].flip_sign(f)) = (number_fields.-)(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f));"))
  (IMP_extended_float_rounding_proj_round_er_eq_unb_TCC1-1 nil
   3799515313 ("" (mapped-axiom-tcc) nil nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "ieee754_semantics_add_inv_def_interpretation_obligation_1: AXIOM FORALL (f: {x: extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].efloat | extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?(x)}): extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].flip_sign(f)) = (number_fields.-)(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f));")))
 (IMP_extended_float_rounding_proj_round_is_monotone_on_er_TCC1 0
  (IMP_extended_float_rounding_rtoed_er_is_finite_TCC1-1 nil 3799515313
   ("" (use "proj_round_is_monotone_on_er") nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rtoed_er_is_finite formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "proj_round_is_monotone_on_er: AXIOM FORALL (x, y: ieee754_domain[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].emax].er_real): booleans.IMPLIES(reals.<=(x, y), reals.<=(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(x)), extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(extended_float_rounding.round(y))));")))
 (IMP_extended_float_rounding_round_inverse_of_projection_on_nzfinite_TCC1
  0
  (IMP_extended_float_rounding_round_er_eq_unb_TCC1-2 nil 3799516253
   ("" (use "round_inverse_of_projection_on_nzfinite") nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (round_inverse_of_projection_on_nzfinite formula-decl nil
     extended_float_rounding__nearest_even nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_inverse_of_projection_on_nzfinite: AXIOM FORALL (f: (extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?)): extended_float_rounding.round(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f)) = f"))
  (IMP_extended_float_rounding_round_er_eq_unb_TCC1-1 nil 3799515313
   ("" (mapped-axiom-tcc) nil nil) nil nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_inverse_of_projection_on_nzfinite: AXIOM FORALL (f: (extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].nzfinite?)): extended_float_rounding.round(extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].prj_ef(f)) = f")))
 (IMP_extended_float_rounding_round_zero_TCC1 0
  (IMP_extended_float_rounding_bound_on_exp_of_rounded_erreal_TCC1-1
   nil 3799515313 ("" (use "round_zero") nil)
   ((dExp_ formal-const-decl "{d: posnat |
   radix_ = 2 IMPLIES
    (precision_ = 53 IMPLIES d = 1074) AND
     (precision_ = 24 IMPLIES d = 149)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (precision_ formal-const-decl
     "{i: posint | radix_ = 2 IMPLIES (i = 53 OR i = 24)}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (radix_ formal-const-decl "{i: posint | i = 2}"
     extended_float_rounding__nearest_even_is_a_rounding_mode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (round_zero formula-decl nil extended_float_rounding__nearest_even
     nil))
   nil
   (IMP_extended_float_rounding mapped-axiom
    "extended_float_rounding[extended_float_rounding__nearest_even_is_a_rounding_mode.radix_, extended_float_rounding__nearest_even_is_a_rounding_mode.precision_, extended_float_rounding__nearest_even_is_a_rounding_mode.dExp_]{{ round := neven_th.rnd_ef }}.extended_float_rounding"
    "round_zero: AXIOM extended_float_rounding.round(0) = extended_float[extended_float_rounding.radix_, extended_float_rounding.precision_, extended_float_rounding.dExp_].poszero"))))

