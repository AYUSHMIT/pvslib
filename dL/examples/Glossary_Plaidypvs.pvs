Glossary_Plaidypvs : THEORY

%-------------------------------------------------------------------------% 
%-------------------------------------------------------------------------%
%| Glossary_Plaidypvs: This is a nice glossary of Plaidypvs prover       |%
%|   commands. Each prover command has a minimal example of use with it. |%
%|                                                                       |%
%| This is a good reference for checking what an ODen command does       |%
%-------------------------------------------------------------------------%
% Created                                                          Oct 2022
%                                                                  JTS, LMW
% Last Updated                                                     Jan 2023
%                                                                       JTS
%-------------------------------------------------------------------------%
%-------------------------------------------------------------------------%

%-----     %
  BEGIN
%     -----%

%%--------------------------------------------
%% To get the suite of commands, import
%  dynamic logic. for you it will be like this
%  IMPORTING dl@top
%%--------------------------------------------

IMPORTING dL@top

%Define the variables for this workbook

x,y,z, 
w,q    : VAR dLVar
c      : VAR real

%%--------------------------------------------
%% dl-axiom -  Dicharge sequent with same boolean
%              expression in antecedent and
%              consequnt
%%--------------------------------------------

dl_axiom_example : LEMMA
  (: val(q) >= val(x), val(x) = cnst(100) :) |-
  (: val(w) = val(x), val(y) = cnst(0), val(q) >= val(x) :)

%%--------------------------------------------
%% dl-andL - flatten conjunction in antecedent
%
%  Tip: (dl-flatten) has more automation
%%--------------------------------------------

dl_andL_example : LEMMA
  (: DLAND(val(q) >= val(x), val(x) = cnst(100)) :) |-
  (: val(q) >= val(x) :)

%%--------------------------------------------
%% dl-andR -  split conjunction in antecedent
%
%  Tip: (dl-ground) has more automation
%%--------------------------------------------

dl_andR_example : LEMMA
  DLIMPLIES(val(q) >= val(x),
    DLAND(val(q) >= val(x), cnst(10) >= cnst(0)))

%%--------------------------------------------
%% dl-anyb - simplify ANY hybrid program
%            (allruns)
%%--------------------------------------------

dl_anyb_example : LEMMA
  ALLRUNS(ANY(x, val(x) >= cnst(10)),
          val(x) >= cnst(0))

%%--------------------------------------------
%% dl-anyd - simplify ANY hybrid program
%            (someruns)
%%--------------------------------------------

dl_anyd_example : LEMMA
  SOMERUNS(ANY(x, val(x) >= cnst(-10)),
           val(x) >= cnst(0))

%%--------------------------------------------
%% dl-assert - Applies hybrid program rewrites
%              grind sequent
%	       Uses SMT solver
%%--------------------------------------------

dl_assert_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  LET
  ax1 = ASSIGN((:(x,val(x)+cnst(1)), (y,val(x)):)),
  ax2 = ASSIGN((:(x,val(x)+cnst(2)), (y,val(x)):)),
  ax3 = ASSIGN((:(x,val(x)+cnst(2)), (y,val(x)):))
  IN
  ALLRUNS(SEQ(UNION(ax1,ax2),ax3),
          DLOR(val(x) - val(y) > cnst(0), val(y)-val(x) > cnst(0)))

%%--------------------------------------------
%% dl-assignb - Applies substitution (allruns)
%%--------------------------------------------

dl_assignb_example : LEMMA
  pairwise_distinct_vars?((:x,y,z:)) IMPLIES
  ALLRUNS(ASSIGN( (: (x,cnst(10)),
  		     (y,val(x)+10),
		     (z,val(z)+val(x)-cnst(10)) :)),
          val(x)=cnst(10))

%%--------------------------------------------
%% dl-assignb - Applies substitution (someruns)
%%--------------------------------------------

dl_assignd_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  SOMERUNS(ASSIGN( (: (x,cnst(10)),
  		      (y,val(x)+10) :)),
           val(x)=cnst(10))

%%--------------------------------------------
%% dl-boxd - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_boxd_example : LEMMA
  NOT SOMERUNS(ASSIGN((:(x,val(x)*val(x)):)),
               val(x) < cnst(0))

%%--------------------------------------------
%% dl-choiceb - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_choiceb_example : LEMMA
  ALLRUNS(UNION(ASSIGN((: (x,cnst(10)) :)),
                ASSIGN((: (x,cnst(11)) :))),
          val(x) >= cnst(0))

 
%%--------------------------------------------
%% dl-choiced - Rewrites between ALLRUNS and SOMERUNS
%%--------------------------------------------

dl_choiced_example : LEMMA
  SOMERUNS(UNION(ASSIGN((: (x, cnst(5)):)),
                 ASSIGN((: (x, cnst(10)):))),
           val(x) >= cnst(0))

%%--------------------------------------------
%% dl-composeb - reduces seq hybrid program
%                (allruns)
%%--------------------------------------------

dl_composeb_example : LEMMA
  ALLRUNS(SEQ(TEST(val(x)>=cnst(0)),
              ASSIGN((: (x,cnst(-5)):))),
	  val(x) < cnst(0))

%%--------------------------------------------
%% dl-composeb - reduces seq hybrid program
%                (allruns)
%%--------------------------------------------

dl_composed_example : LEMMA
  val(x) >= cnst(2) IMPLIES
  SOMERUNS(SEQ(TEST(val(x) >= cnst(0)),
               ASSIGN((: (x,val(x)+1):))),
	   val(x) >= cnst(2))

%%--------------------------------------------
%% dl-cut - split sequent according to cut
%%--------------------------------------------

dl_case_example : LEMMA 
  ALLRUNS(IFTE(cnst(c) >= cnst(0),
            ASSIGN((:(x,cnst(c)):)),
	    ASSIGN((:(x,cnst(-c)):))),
          val(x) >= cnst(0))

%%--------------------------------------------
%% dl-diffcase - adds cut to diff? HP
%%--------------------------------------------

dl_diffcase_example: LEMMA
  ALLRUNS(DIFF((: (x,cnst(2)) :),val(x) > cnst(0)), val(x)^2 > cnst(5)) AND 
  ALLRUNS(DIFF((: (x,cnst(2)) :),val(x) > cnst(0) AND val(x)^2 > cnst(5)), DLTRUE) 
  IMPLIES ALLRUNS(DIFF((: (x,cnst(2)) :),val(x) > cnst(0)),
                  DLTRUE)

%%--------------------------------------------
%% dl-diffghost - introduces ghost variable to diff? HP
%%--------------------------------------------

dl_diffghost_example: LEMMA
  LET
  dyn : HP = DIFF( (: (x,val(x)) :))
  IN
  val(x) > 0 IMPLIES
  ALLRUNS(dyn, val(x) > 0)

%%--------------------------------------------
%% dl-diffinit - introduces domain in dl-sequent to diff? HP
%%--------------------------------------------

dl_diffinit_example: LEMMA
  ((: val(x)>cnst(0) :) |- ALLRUNS(DIFF((: (x,cnst(2)) :),val(x)>cnst(0)),DLTRUE))
  IMPLIES 
    ALLRUNS(DIFF((: (x,cnst(2)) :),val(x)>cnst(0)),DLTRUE)

%%--------------------------------------------
%% dl-diffinv - differnital invariant 
%%--------------------------------------------

dl_diffinv_example : LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x)^2+val(y)^2=cnst(1)
  IMPLIES ALLRUNS(DIFF((: (x,-val(y)), (y,val(x)) :)), val(x)^2+val(y)^2=cnst(1))

%%--------------------------------------------
%% dl-falseL - discharge sequent with FALSE in antecendent 
%%--------------------------------------------

dl_falseL_example: LEMMA
  (: DLFALSE :) |- (: val(x) > cnst(5) :)

%%--------------------------------------------
%% dl-flatten - Disjunctive simplification
%%--------------------------------------------

dl_flatten_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  (val(x)^2 >= cnst(25))

%%--------------------------------------------
%% dl-g - Godel's theorem 
%%--------------------------------------------

 dl_g_example: LEMMA
  ALLRUNS(DIFF((: (x,val(x)+val(y)^50),
                  (y,val(y)*val(x)*val(z)),
                  (z,val(x)):)),val(x)*val(x)>=cnst(0))

%%--------------------------------------------
%% dl-ghost - introduces discrete ghost variable
%%--------------------------------------------

 dl_ghost_example: LEMMA
   pairwise_distinct_vars?((:x,y:)) IMPLIES
   val(x)*val(y) >= cnst(2)
   IMPLIES ALLRUNS(DIFF((: (x,val(x)),(y,-val(y)) :)),val(x)*val(y) >=cnst(2))

%%--------------------------------------------
%% dl-grind - grinds a dl-sequent
%%--------------------------------------------

 dl_grind_example: LEMMA
  (val(x)=cnst(5) OR val(x)=cnst(10)) AND val(y) = cnst(0) AND val(z) = cnst(sqrt(15))
 IMPLIES
 val(x)^2 + val(y)^2 >= val(z)

%%--------------------------------------------
%% dl-ground - grounds a dl-sequent
%%--------------------------------------------

 dl_ground_example: LEMMA
  (val(x)*val(y)=cnst(10) OR (val(x)=cnst(10) AND val(y) = cnst(0)))
 IMPLIES
 DLOR(cnst(2)*val(x)*val(y)=cnst(20), val(x)>=val(y))

%%--------------------------------------------
%% dl-hide - hide formulas in dl-sequent
%%--------------------------------------------

dl_hide_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  ((val(x)^2 >= cnst(25)) OR val(y) /= 0 OR val(x) = 0)

%%--------------------------------------------
%% dl-hiderest - hide formulas in dl-sequent
%%--------------------------------------------

dl_hiderest_example : LEMMA
  ((cnst(-5) >= val(x) AND val(y) >= cnst(0))
   AND
   (val(x) >= cnst(5) OR cnst(-10) >= val(x)))
  IMPLIES
  ((val(x)^2 >= cnst(25)) OR val(y) /= 0 OR val(x) = 0)

%%--------------------------------------------
%% dl-iffL - IFF rule
%%--------------------------------------------

 dl_iff_example: LEMMA
 DLIFF(val(x)=0,val(x)^2=0)

%%--------------------------------------------
%% dl-inst - Instantiates
%%--------------------------------------------

 dl_inst_example: LEMMA
  DLEXISTS(LAMBDA(r:real): val(x)=cnst(r)
    IMPLIES
      ALLRUNS(TEST(val(x)>=0),val(x)=cnst(-5)))

%%--------------------------------------------
%% dl-impliesL - implies rule
%%--------------------------------------------

dl_impliesL_example: LEMMA
  ((null |- cons(val(x)>cnst(5),(: val(x)<cnst(0) :))) AND (cons(val(y)<cnst(-7),null) |- (: val(x)<cnst(0) :)))
  IMPLIES
    (cons(val(x)>cnst(5) IMPLIES val(y)<cnst(-7),null) |-(: val(x)<cnst(0) :))

%%--------------------------------------------
%% dl-impliesR - implies rule
%%--------------------------------------------

dl_impliesR_example: LEMMA
    (cons(val(x)>cnst(5),(: val(z)=cnst(0) :)) |- cons(val(y)<cnst(-7), (: val(x)<cnst(0) :))) 
    IMPLIES
    ((: val(z)=cnst(0) :) |- (cons((val(x)>cnst(5) IMPLIES val(y)<cnst(-7)), (: val(x)<cnst(0) :))))

%%--------------------------------------------
%% dl-iterated - reduces star? HP
%%--------------------------------------------

 dl_iterated_example: LEMMA
  val(x) >=cnst(5) IMPLIES
  SOMERUNS(STAR(ASSIGN(((:(x,val(x)-1):)))),val(x)>=5) 

%%--------------------------------------------
%% dl-K - weakens HP
%%--------------------------------------------

 dl_K_example: LEMMA
  pairwise_distinct_vars?((:x,y:))
  IMPLIES DLIMPLIES(ALLRUNS(ASSIGN((:(x,val(x)+2),(y,val(x)+1):)),val(x)>=3),
          ALLRUNS(ASSIGN((:(x,val(x)+2),(y,val(x)+1):)),val(y)>=2))

%%--------------------------------------------
%% dl-loop - discrete loop invariant rule
%%--------------------------------------------

 dl_loop_example: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
(val(x) >=cnst(1) AND val(y) >=cnst(2))
IMPLIES ALLRUNS(STAR(ASSIGN((: (x,val(x)+2*val(y)),(y,val(y)+val(x)):))),val(x)+val(y)>=cnst(1))

%%--------------------------------------------
%% dl-Mb - weakens HP
%%--------------------------------------------

dl_Mb_example: LEMMA
 DLIMPLIES(ALLRUNS(DIFF((:(x,val(x)*val(y)*val(z)):)),val(x)/=cnst(2)),
           ALLRUNS(DIFF((:(x,val(x)*val(y)*val(z)):)),-val(x)/=cnst(-2)))

%%--------------------------------------------
%% dl-monob - weakens HP
%%--------------------------------------------

 dl_monob_example: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x)=cnst(c) AND val(y) = cnst(0)
  IMPLIES
  ALLRUNS(ASSIGN((:(x,val(y)),(y,val(x)):)),val(x)^2+val(y)^2=cnst(c)^2)

%%--------------------------------------------
%% dl-move - move dl-formula 
%%--------------------------------------------

dl_move_example : LEMMA
  (val(z) = 4 AND val(x) >= cnst(10)) IMPLIES
  (val(z) = 10 OR val(x) >= cnst(5))

%%--------------------------------------------
%% dl-notL - not rule
%%--------------------------------------------

dl_notL_example: LEMMA
  (null |- cons(val(x)>cnst(5),(: val(y)<20 :))) IMPLIES
    (cons(NOT val(x)>cnst(5), null) |- (: val(y)<20 :))

%%--------------------------------------------
%% dl-notR - not rule
%%--------------------------------------------

dl_notR_example: LEMMA
   (cons(val(x)>cnst(5),(: val(z)=cnst(0) :)) |- (: val(y)<20 :)) IMPLIES
    ((: val(z)=cnst(0) :) |- cons(NOT val(x)>cnst(5),(: val(y)<20 :)))

%%--------------------------------------------
%% dl-orL - or rule
%%--------------------------------------------

dl_orL_example: LEMMA
  (cons(val(y)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :)) AND 
  (cons(val(x)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :)) 
  IMPLIES
  (cons(val(y)<=5 OR val(x)<=5,null) |- (: val(y)^2+val(x)^2 <= 25 :))

%%--------------------------------------------
%% dl-orR - or rule
%%--------------------------------------------

dl_orR_example: LEMMA
  ((:val(x)<cnst(-10):) |- cons(val(z)=cnst(0),cons(val(y)>cnst(0),(:val(x)>=cnst(10):)))) 
  IMPLIES
      ((:val(x)<cnst(-10):) |- cons(val(z)=cnst(0) OR val(y)>cnst(0),(:val(x)>=cnst(10):)))

%%--------------------------------------------
%% dl-pp - Internal strategy, pretty prints
%  dl-sequent
%%--------------------------------------------

dl_pp_example : LEMMA
 cons(val(z) = 4, cons( val(x) >= cnst(10), null))
 |-
 cons(val(z) = 10, cons( val(x) >= cnst(5), null))

%%--------------------------------------------
%% dl-skolem - skolemizes
%%--------------------------------------------

dl_skolem_example: LEMMA
  DLFORALL(LAMBDA(r:real): DLIMPLIES(val(x)>cnst(r),val(x)>cnst(r)))

%%--------------------------------------------
%% dl-solve - solve diff? HP
%%--------------------------------------------

 dl_solve_example1: LEMMA
  pairwise_distinct_vars?((:x,y:)) IMPLIES
  val(x) <= val(y)
  IMPLIES ALLRUNS(DIFF((: (x,cnst(2)), (y,cnst(3)) :)),val(x)<=val(y))
 
 dl_solve_example2: LEMMA
  pairwise_distinct_vars?((:x,y,z,q:)) IMPLIES
 ALLRUNS(DIFF((: (x,cnst(3)),
                 (y,val(x)),
		 (z,val(q) + cnst(5)) :), val(z)=val(x)),
         val(z) = val(x))

%%--------------------------------------------
%% dl-subs - applies dl substitution rules
%%--------------------------------------------

dl_subs_example : LEMMA
  pairwise_distinct_vars?((:x,y,z,q:)) IMPLIES
 val(y)=cnst(0) IMPLIES
  SUB((: (x,val(y)),(y,cnst(10)):))(val(x)^2+val(y)^2=cnst(100))

%%--------------------------------------------
%% dl-testb - reduces test? HP
%%--------------------------------------------

dl_testb_example: LEMMA
  ALLRUNS(TEST(val(z)=cnst(0)), val(x)^2>cnst(0)) IMPLIES (val(z)=cnst(0) IMPLIES val(x)^2>cnst(0))

%%--------------------------------------------
%% dl-testd - reduces test? HP
%%--------------------------------------------

dl_testd_example: LEMMA
  SOMERUNS(TEST(val(z)=cnst(0)),val(x)^2>cnst(0)) 
  IMPLIES
  (val(z)=cnst(0) AND val(x)^2>cnst(0))

%%--------------------------------------------
%% dl-trueR - discharge sequent with True in consequent
%%--------------------------------------------

dl_trueR_example: LEMMA
  (: val(x) > cnst(0) :) |- cons(DLTRUE, val(y)^2+val(x)^2 <= 25)

%%--------------------------------------------
%% dl-Vb - removes all runs
%%--------------------------------------------

 dl_Vb_example: LEMMA
  pairwise_distinct_vars?((:x,y,z:))
  IMPLIES val(x) = cnst(3)
  	  IMPLIES ALLRUNS(DIFF((:(y,val(y)*val(z)):)),val(x)^2=cnst(9))

%%--------------------------------------------
%% dl-weak - weakens dl-sequent
%%--------------------------------------------

 dl_weak_example: LEMMA
 DLIMPLIES(val(x)+val(y) = cnst(50) AND val(x)=cnst(25),
  3*val(y) - cnst(5) = cnst(70))

END Glossary_Plaidypvs
