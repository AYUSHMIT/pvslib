(RTA_fix_wing_ex_turn
 (lc_odes_TCC1 0
  (lc_odes_TCC1-1 nil 3904972422
   ("" (inst 1 "(: (0,cnst(0)) :)") (("" (grind) nil nil)) nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (cnst const-decl "real" hp_def dL)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil (lc_odes existence "" "ODEs")))
 (Green?_TCC1 0
  (Green?_TCC1-1 nil 3904971782 ("" (subtype-tcc) nil nil)
   ((x const-decl "nat" RTA_fix_wing_ex_turn nil)
    (val const-decl "real" hp_def dL))
   nil
   (Green? subtype "2"
    "{i: integers.int | booleans.OR(hp_def.val(RTA_fix_wing_ex_turn.x)(RTA_fix_wing_ex_turn.env) /= 0, reals.>=(i, 0))}")))
 (Green?_TCC2 0
  (Green?_TCC2-1 nil 3904971782 ("" (subtype-tcc) nil nil)
   ((y const-decl "nat" RTA_fix_wing_ex_turn nil)
    (val const-decl "real" hp_def dL))
   nil
   (Green? subtype "2"
    "{i: integers.int | booleans.OR(hp_def.val(RTA_fix_wing_ex_turn.y)(RTA_fix_wing_ex_turn.env) /= 0, reals.>=(i, 0))}")))
 (Green?_TCC3 0
  (Green?_TCC3-1 nil 3904971782 ("" (subtype-tcc) nil nil) nil nil
   (Green? subtype "2"
    "{i: integers.int | booleans.OR(RTA_fix_wing_ex_turn.G /= 0, reals.>=(i, 0))}")))
 (hc_TCC1 0
  (hc_TCC1-1 nil 3904971782
   ("" (eval-expr 1) (("" (assert) nil nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (x const-decl "nat" RTA_fix_wing_ex_turn nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (val const-decl "real" hp_def dL)
    (y const-decl "nat" RTA_fix_wing_ex_turn nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (hc subtype
    "(: (RTA_fix_wing_ex_turn.x, (real_fun_ops[Environment].-)(hp_def.val(RTA_fix_wing_ex_turn.y))), (RTA_fix_wing_ex_turn.y, hp_def.val(RTA_fix_wing_ex_turn.x)) :)"
    "ODEs")))
 (RTA_turn_TCC1 0
  (RTA_turn_TCC1-1 nil 3904971782 ("" (subtype-tcc) nil nil) nil nil
   (RTA_turn subtype "2"
    "{i: integers.int | booleans.OR(RTA_fix_wing_ex_turn.G /= 0, reals.>=(i, 0))}")))
 (RTA_safe 0
  (RTA_safe-1 nil 3904971872
   ("" (skeep)
    (("" (dl-flatten)
      (("" (expand "RTA_turn" 1)
        (("" (dl-loop "val(x)^2+val(y)^2 <= cnst(G)^2")
          (("1" (typepred "Gr")
            (("1" (expand "Green?" -1) (("1" (grind) nil nil)) nil))
            nil)
           ("2" (expand "Red" 1)
            (("2" (expand "Orange" 1)
              (("2" (assert) (("2" (dl-assert) nil nil)) nil)) nil))
            nil)
           ("3" (dl-choiceb)
            (("3" (dl-ground)
              (("1" (dl-composeb)
                (("1" (dl-testb)
                  (("1" (dl-flatten)
                    (("1" (expand "lc" 1)
                      (("1" (dl-diffweak) (("1" (dl-assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (dl-composeb)
                (("2" (dl-testb)
                  (("2" (dl-flatten)
                    (("2" (expand "hc" 1)
                      (("2" (dl-diffinv)
                        (("1" (dl-assert) nil nil)
                         ("2" (dl-assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((gamma__55 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (Formulas type-eq-decl nil bool_expr dL)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Green? const-decl "bool" RTA_fix_wing_ex_turn nil)
    (HP type-decl nil HP_adt dL)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (RTA_turn const-decl "HP" RTA_fix_wing_ex_turn nil)
    (DLNOT const-decl "bool" bool_expr dL)
    (Red const-decl "BoolExpr" RTA_fix_wing_ex_turn nil)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (delta__56 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (dl_loop formula-decl nil dynamic_logic dL)
    (hc const-decl "HP" RTA_fix_wing_ex_turn nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (y const-decl "nat" RTA_fix_wing_ex_turn nil)
    (x const-decl "nat" RTA_fix_wing_ex_turn nil)
    (val const-decl "real" hp_def dL)
    (^ const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (>= const-decl "BoolExpr" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (lc const-decl "HP" RTA_fix_wing_ex_turn nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt dL)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt dL)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt dL)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "BoolExpr" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (gamma__57 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__58 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (\|- const-decl "bool" dynamic_logic dL)
    (expt def-decl "real" exponentiation nil)
    (iterate_left const-decl "T" for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Orange const-decl "BoolExpr" RTA_fix_wing_ex_turn nil)
    (dl_axiom formula-decl nil dynamic_logic dL)
    (dl_not_not formula-decl nil bool_expr dL)
    (dl_andR formula-decl nil dynamic_logic dL)
    (gamma__61 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__62 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (dl_testb formula-decl nil dynamic_logic dL)
    (gamma__65 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__66 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (lc_odes const-decl "ODEs" RTA_fix_wing_ex_turn nil)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (dl_dW formula-decl nil dynamic_logic dL)
    (gamma__67 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__68 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__64 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (gamma__63 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (gamma__73 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__74 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (pi_bound name-judgement
     "{r: posreal | pi_lb_new <= r AND r <= pi_ub_new}" pi_def trig)
    (delta__84 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (dl_trueL formula-decl nil dynamic_logic dL)
    (gamma__83 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (same_var const-decl "bool" hp_def dL)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (FALSE const-decl "bool" booleans nil)
    (diff_re_val formula-decl nil diff_re_props dL)
    (diff_re_cnst formula-decl nil diff_re_props dL)
    (diff_re_pow formula-decl nil diff_re_props dL)
    (diff_re? const-decl "bool" chain_rule_re dL)
    (diff_re_sum formula-decl nil diff_re_props dL)
    (derivable_M_nqbool? inductive-decl "bool" chain_rule_re dL)
    (dl_dift_const formula-decl nil differentiation dL)
    (dl_derivable_up_cnst formula-decl nil differentiation dL)
    (<= const-decl "bool" reals nil)
    (dl_dift_val formula-decl nil differentiation dL)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (dl_dift_pow formula-decl nil differentiation dL)
    (derivable_up? const-decl "bool" differentiation dL)
    (ddl_dom_upto? const-decl "bool" differentiation dL)
    (dl_derivable_up_val formula-decl nil differentiation dL)
    (dl_derivable_up_pow formula-decl nil differentiation dL)
    (dl_true_DDL formula-decl nil differentiation dL)
    (ddt def-decl "RealExpr" differentiation dL)
    (dl_dift_plus formula-decl nil differentiation dL)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (scal_function formula-decl nil real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (ddl_dom? const-decl "bool" differentiation dL)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (max_var const-decl "nat" hp_def dL)
    (DIFT def-decl "BoolExpr" differentiation dL)
    (SUB_DIFT const-decl "BoolExpr" differentiation dL)
    (normalize_rec def-decl "{nnqbe: NormNQBool |
   FORALL (env: Environment):
     nqb_to_be(nnqbe)(env) = (pos IFF nqb_to_be(nqbe)(env))}" bool_expr
     dL)
    (nnqb__77 skolem-const-decl "{nnqbe: NormNQBool |
   nqb_to_be(nnqbe) =
    nqb_to_be(NQB_rel(nqb_le, val(x) ^ 2 + val(y) ^ 2, cnst(G) ^ 2))}"
     RTA_fix_wing_ex_turn nil)
    (delta__79 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (gamma__78 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (dl_dI_dlTRUE formula-decl nil dynamic_logic dL)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (nqb_rel const-decl "BoolExpr" bool_expr dL)
    (nqb_le adt-constructor-decl "(nqb_le?)" hp_def dL)
    (nqb_le? adt-recognizer-decl "[NQB_REL -> boolean]" hp_def dL)
    (NQB_rel adt-constructor-decl
     "[[NQB_REL, RealExpr, RealExpr] -> (nqb_rel?)]" NQBool_adt dL)
    (nqb_rel? adt-recognizer-decl "[NQBool -> boolean]" NQBool_adt dL)
    (NQB_REL type-decl nil hp_def dL)
    (normalize const-decl
     "{nnqbe: NormNQBool | nqb_to_be(nnqbe) = nqb_to_be(nqbe)}"
     bool_expr dL)
    (nqb_to_be def-decl "BoolExpr" bool_expr dL)
    (NormNQBool type-eq-decl nil bool_expr dL)
    (nqb_normal? inductive-decl "bool" bool_expr dL)
    (NQBool type-decl nil NQBool_adt dL)
    (gamma__75 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__76 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (delta__72 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (gamma__71 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (DLAND const-decl "bool" bool_expr dL)
    (delta__60 skolem-const-decl "(null?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (gamma__59 skolem-const-decl "(cons?[BoolExpr])"
     RTA_fix_wing_ex_turn nil)
    (dl_choiceb formula-decl nil dynamic_logic dL))
   shostak)))

