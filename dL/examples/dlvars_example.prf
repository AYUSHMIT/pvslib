(dl_vars_variables
 (dlvars_swap 0
  (dlvars_swap-1 nil 3912459347
   ("" (then (skeep) (dl-assignb) (dl-grind)) nil)
   ((dl_andR formula-decl nil dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (iterate_left const-decl "T" for_iterate structures)
    (dl_subre_val formula-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_sub_and formula-decl nil substitution dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(v))(env)}"
     substitution dL)
    (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     hp_def dL)
    (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
    (DLAND const-decl "bool" bool_expr dL)
    (Assigns type-eq-decl nil hp_def dL)
    (dl_assignb formula-decl nil dynamic_logic dL)
    (cnst const-decl "real" hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (bijective? const-decl "bool" functions nil)
    (dLVar type-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (val const-decl "real" hp_def dL)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (var_mapexpr_inj 0
  (var_mapexpr_inj-1 nil 3912541226
   ("" (then (skeep*) (dl-mapexpr_inj)) nil)
   ((dLVar type-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (MapExpr type-eq-decl nil hp_def dL)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (distinct_var? def-decl "{b: bool |
   b =
    FORALL (i: below(length(l))):
      NOT dlvar_index(nth(l, i)) = dlvar_index(v)}" hp_def dL)
    (pairwise_distinct_vars? def-decl "{b: bool |
   b =
    FORALL (i, j: below(length(l))):
      i /= j IMPLIES NOT dlvar_index(nth(l, i)) = dlvar_index(nth(l, j))}"
     hp_def dL)
    (mapexpr_inj_distinct_vars formula-decl nil hp_def dL))
   shostak)))
(dl_vars_parameters
 (dlvars_swap 0
  (dlvars_swap-1 nil 3912983136 ("" (then (dl-assignb) (dl-grind)) nil)
   nil shostak))
 (var_mapexpr_inj 0
  (var_mapexpr_inj-1 nil 3912983136
   ("" (then (skeep) (dl-mapexpr_inj :lemma "distinct_vars")) nil) nil
   shostak)))
(dl_vars_constants
 (dlvars_swap 0
  (dlvars_swap-1 nil 3912983136 ("" (then (dl-assignb) (dl-grind)) nil)
   nil shostak))
 (var_mapexpr_inj 0
  (var_mapexpr_inj-1 nil 3912983137
   ("" (then (skeep) (dl-mapexpr_inj) (grind)) nil) nil shostak)))

