(trace_bounded_star_semantics
 (trace_semantic_rel_bounded_star_TCC1 0
  (trace_semantic_rel_bounded_star_TCC1-1 nil 3898080626
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b)"
    "(orders[nat].well_founded?)")))
 (trace_semantic_rel_bounded_star_TCC2 0
  (trace_semantic_rel_bounded_star_TCC2-1 nil 3898080626
   ("" (well-founded-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star well-founded
    "lex2_generic[nat, HP_adt.HP].lt_lex2(LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b), HP_adt.<<)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC3 0
  (trace_semantic_rel_bounded_star_TCC3-1 nil 3898080626
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC4 0
  (trace_semantic_rel_bounded_star_TCC4-1 nil 3898080626
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm2)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC5 0
  (trace_semantic_rel_bounded_star_TCC6-1 nil 3898080626
   ("" (termination-tcc) nil nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (final_env const-decl "Environment" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC6 0
  (trace_semantic_rel_bounded_star_TCC9-1 nil 3898080626
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC7 0
  (trace_semantic_rel_bounded_star_TCC7-1 nil 3898080626
   ("" (termination-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<< adt-def-decl "(strict_well_founded?[HP])" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm2)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC8 0
  (trace_semantic_rel_bounded_star_TCC8-1 nil 3898080626
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (trace_semantic_rel_bounded_star subtype
    "(number_fields.-)(trace_bounded_star_semantics.i, 1)" "nat")))
 (trace_semantic_rel_bounded_star_TCC9 0
  (trace_semantic_rel_bounded_star_TCC12-1 nil 3898083293
   ("" (termination-tcc) nil nil)
   ((HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lt_lex2 const-decl "bool" lex2_generic orders))
   nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star((number_fields.-)(trace_bounded_star_semantics.i, 1))(HP_adt.SEQ(trace_bounded_star_semantics.stm, HP_adt.STAR(trace_bounded_star_semantics.stm)))"
    "nil")))
 (trace_semantic_rel_bounded_star_inc 0
  (trace_semantic_rel_bounded_star_inc-1 nil 3898080909
   ("" (measure-induct+ "i + size(hp)" ("i" "hp"))
    (("" (name-replace "i" "x!1")
      (("" (name-replace "hp" "x!2")
        (("" (skeep 1)
          (("" (skeep 1)
            (("" (expand "trace_semantic_rel_bounded_star" -2)
              (("" (lift-if -2)
                (("" (split -)
                  (("1" (flatten)
                    (("1" (expand "trace_semantic_rel_bounded_star" +)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "tr1" "tr2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (inst -7 "i" "stm1(hp)")
                                      (("1"
                                        (inst -7 "tr1")
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (inst -2 "j")
                                              (("1"
                                                (expand "i")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (expand "size" 1 2)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -7 "i" "stm2(hp)")
                                      (("2"
                                        (inst -7 "tr2")
                                        (("2"
                                          (split -7)
                                          (("1"
                                            (inst -1 "j")
                                            (("1"
                                              (typepred "j")
                                              (("1"
                                                (expand "i")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "i" "stm1(hp)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "i")
                                              (("1"
                                                (typepred "j")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1"
                          (expand "trace_semantic_rel_bounded_star" +)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (inst -3 "i" "stm1(hp)")
                                  (("1"
                                    (inst -3 "trace")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "i")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand size 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -3 "i" "stm2(hp)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (split)
                                      (("1"
                                        (inst -1 "j")
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (expand
                                 "trace_semantic_rel_bounded_star"
                                 +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "trace_semantic_rel_bounded_star"
                                   +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand
                                           "trace_semantic_rel_bounded_star"
                                           +)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand
                                               "trace_semantic_rel_bounded_star"
                                               -2)
                                              (("2"
                                                (split -)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (insteep)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "i-1"
                                                           "stm(hp)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -8
                                                               "tr1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "j-1")
                                                                    (("1"
                                                                      (typepred
                                                                       "j")
                                                                      (("1"
                                                                        (expand
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (inst
                                                           -8
                                                           "i-1"
                                                           "hp")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -8
                                                               "tr2")
                                                              (("2"
                                                                (case
                                                                 "STAR(stm(hp))=hp")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -9
                                                                       "j-1")
                                                                      (("1"
                                                                        (typepred
                                                                         "j")
                                                                        (("1"
                                                                          (expand
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (apply-extensionality)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -4
                                                       "i-1"
                                                       "stm(hp)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "trace")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split -)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "j-1")
                                                                (("1"
                                                                  (typepred
                                                                   "j")
                                                                  (("1"
                                                                    (expand
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (expand "trace_semantic_rel_bounded_star"
                                      4)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trace_semantic_rel_implies_bounded 0
  (trace_semantic_rel_implies_bounded-1 nil 3898081557
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         "LAMBDA(hp:HP)(trace:Trace): EXISTS (i: nat): trace_semantic_rel_bounded_star(i)(hp)(trace)")
        (("" (split -)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2" (skolem 1 ("prg" "tr"))
              (("2" (flatten)
                (("2" (split -)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "trace_semantic_rel_bounded_star")
                        (("1" (assert)
                          (("1" (expand "trace_semantic_rel")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst 1 "0")
                      (("2" (expand "trace_semantic_rel_bounded_star")
                        (("2" (assert)
                          (("2" (expand "trace_semantic_rel")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (inst 1 "0")
                      (("3" (expand "trace_semantic_rel_bounded_star")
                        (("3" (assert)
                          (("3" (expand "trace_semantic_rel")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (inst 1 "0")
                      (("4"
                        (expand "trace_semantic_rel_bounded_star" 1)
                        (("4" (assert)
                          (("4" (expand "trace_semantic_rel")
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (flatten)
                    (("5" (expand "trace_semantic_rel_bounded_star" 1)
                      (("5" (assert)
                        (("5" (split -)
                          (("1" (skeep)
                            (("1" (skolem -2 "i1")
                              (("1"
                                (skolem -4 "i2")
                                (("1"
                                  (inst 1 "max(i1,i2)")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 1 "trace1" "trace2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "trace_semantic_rel_bounded_star_inc")
                                            (("1"
                                              (inst
                                               -1
                                               "stm1(prg)"
                                               "trace1"
                                               "i1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "max(i1,i2)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "trace_semantic_rel_bounded_star_inc")
                                            (("2"
                                              (inst
                                               -1
                                               "stm2(prg)"
                                               "trace2"
                                               "i2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "max(i1,i2)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "i")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (flatten)
                    (("6" (split -)
                      (("1" (flatten)
                        (("1" (skeep -)
                          (("1" (inst 1 "i")
                            (("1"
                              (expand "trace_semantic_rel_bounded_star"
                                      1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep -)
                          (("2" (inst 1 "i")
                            (("2"
                              (expand "trace_semantic_rel_bounded_star"
                                      1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (flatten)
                    (("7" (split -)
                      (("1" (inst 1 "0")
                        (("1"
                          (expand "trace_semantic_rel_bounded_star" 1)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep*)
                          (("2"
                            (expand "trace_semantic_rel_bounded_star"
                                    1)
                            (("2" (assert)
                              (("2"
                                (inst 1 "i+1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (case "STAR(stm(prg)) = prg")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel_induction formula-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (trace_semantic_rel_bounded_star_inc formula-decl nil
     trace_bounded_star_semantics nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (bounded_implies_trace_semantic_rel 0
  (bounded_implies_trace_semantic_rel-1 nil 3898088634
   ("" (measure-induct+ "i+size(hp)" ("i" "hp"))
    (("" (skeep)
      (("" (expand "trace_semantic_rel_bounded_star" -2)
        (("" (lift-if)
          (("" (split)
            (("1" (expand "trace_semantic_rel" 1)
              (("1" (flatten -1)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (skeep)
                        (("1" (inst 1 "tr1" "tr2")
                          (("1" (assert)
                            (("1" (split 1)
                              (("1"
                                (inst -7 "x!1" "stm1(x!2)")
                                (("1"
                                  (inst -7 "tr1")
                                  (("1"
                                    (split -7)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -7 "x!1" "stm2(x!2)")
                                (("2"
                                  (inst -7 "tr2")
                                  (("2"
                                    (split -7)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "finite_trace?")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "x!1" "stm1(x!2)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (hide 1)
                    (("1" (expand "trace_semantic_rel" 1)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (hide 2)
                              (("1"
                                (inst -3 "x!1" "stm1(x!2)")
                                (("1"
                                  (inst -3 "trace")
                                  (("1"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 1)
                              (("2"
                                (inst -3 "x!1" "stm2(x!2)")
                                (("2"
                                  (inst -3 "trace")
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (hide 1 2)
                      (("1" (expand "trace_semantic_rel" 1)
                        (("1" (flatten)
                          (("1" (hide 1 2 3 4 5 6)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (case "STAR(stm(x!2))=x!2")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand
                                           "trace_semantic_rel"
                                           2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel_bounded_star"
                                               -3)
                                              (("1"
                                                (split -)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst
                                                     2
                                                     "tr1"
                                                     "tr2")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp
                                                         -9
                                                         "x!1 - 1"
                                                         "x!2")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -10
                                                             "tr2")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -9
                                                                 "x!1-1"
                                                                 "stm(x!2)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -9
                                                                     "tr1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "size"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "finite_trace?")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -5
                                                               "x!1-1"
                                                               "stm(x!2)")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "trace")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (apply-extensionality)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trace_semantic_rel_bstar_reflexive 0
  (trace_semantic_rel_bstar_reflexive-1 nil 3898092346
   ("" (induct "i")
    (("1" (expand "BSTAR")
      (("1" (expand "trace_semantic_rel")
        (("1" (expand "DLBOOL") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" 1)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (flatten) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar 0
  (trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar-1 nil
   3898094264
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel_bounded_star")
          (("1" (expand "trace_semantic_rel")
            (("1" (expand "DLBOOL") (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "trace_semantic_rel_bounded_star" -2)
          (("2" (split)
            (("1" (rewrite "trace_semantic_rel_bstar_reflexive") nil
              nil)
             ("2" (expand "trace_semantic_rel" 1)
              (("2" (expand "BSTAR" 1)
                (("2" (flatten)
                  (("2" (expand "trace_semantic_rel_bounded_star" -1)
                    (("2" (split -)
                      (("1" (skeep)
                        (("1" (expand "trace_semantic_rel" 1)
                          (("1" (flatten)
                            (("1" (inst 1 "tr1" "tr2")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -6 "hp" "tr2")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (use
                                       "bounded_implies_trace_semantic_rel")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "trace_semantic_rel" 2)
                            (("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (use
                                   "bounded_implies_trace_semantic_rel")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_implies_trace_semantic_rel formula-decl nil
     trace_bounded_star_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (trace_semantic_rel_bstar_reflexive formula-decl nil
     trace_bounded_star_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_star_bounded_star 0
  (trace_semantic_rel_star_bounded_star-1 nil 3890403706
   ("" (skeep)
    (("" (use "trace_semantic_rel_implies_bounded")
      (("" (assert)
        (("" (skeep -1)
          ((""
            (use "trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar")
            (("" (assert) (("" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel_implies_bounded formula-decl nil
     trace_bounded_star_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar
     formula-decl nil trace_bounded_star_semantics nil))
   shostak))
 (trace_semantic_rel_star_bounded_star_con 0
  (trace_semantic_rel_star_bounded_star_con-1 nil 3890405103
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR" -1)
        (("1" (expand "trace_semantic_rel")
          (("1" (flatten)
            (("1" (expand "nth")
              (("1" (assert)
                (("1" (expand "DLBOOL") (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" -2)
          (("2" (expand "trace_semantic_rel" -2)
            (("2" (split -2)
              (("1" (expand "trace_semantic_rel" 1)
                (("1" (flatten)
                  (("1" (expand "trace_semantic_rel" -1)
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (expand "trace_semantic_rel" 2)
                          (("1" (flatten)
                            (("1" (inst 2 "trace1" "trace2")
                              (("1"
                                (assert)
                                (("1"
                                  (inst -6 "hp" "trace2")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (allruns_st_star 0
  (allruns_st_star-1 nil 3902049799
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "ALLRUNS_st")
            (("1" (skeep)
              (("1" (inst -1 "trace")
                (("1" (assert)
                  (("1"
                    (lemma "trace_semantic_rel_star_bounded_star_con")
                    (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "ALLRUNS_st" 1)
          (("2" (skeep)
            (("2" (lemma " trace_semantic_rel_star_bounded_star")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -2 "i")
                      (("2" (assert)
                        (("2" (expand "ALLRUNS_st" -2)
                          (("2" (inst -2 "trace")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (trace_semantic_rel_star_bounded_star_con formula-decl nil
     trace_bounded_star_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (someruns_st_star 0
  (someruns_st_star-1 nil 3902050324
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "SOMERUNS_st")
          (("1" (skeep)
            (("1" (lemma " trace_semantic_rel_star_bounded_star")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst 1 "i")
                      (("1" (assert)
                        (("1" (inst 1 "trace") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "SOMERUNS_st")
            (("2" (skeep)
              (("2" (inst 1 "trace")
                (("2" (assert)
                  (("2"
                    (lemma "trace_semantic_rel_star_bounded_star_con")
                    (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SOMERUNS_st const-decl "bool" ltl_expr nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (trace_semantic_rel_star_bounded_star_con formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (allruns_tr_star 0
  (allruns_tr_star-1 nil 3902050557
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "ALLRUNS_tr")
          (("1" (skeep)
            (("1" (skeep)
              (("1" (inst -1 "trace")
                (("1"
                  (lemma "trace_semantic_rel_star_bounded_star_con")
                  (("1" (assert)
                    (("1" (inst -1 "hp" "trace" "i")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "ALLRUNS_tr")
          (("2" (skeep)
            (("2" (lemma " trace_semantic_rel_star_bounded_star")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -2 "i")
                      (("2" (inst -2 "trace") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (trace_semantic_rel_star_bounded_star_con formula-decl nil
     trace_bounded_star_semantics nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (someruns_tr_star 0
  (someruns_tr_star-1 nil 3902050616
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "SOMERUNS_tr")
          (("1" (skeep)
            (("1" (lemma " trace_semantic_rel_star_bounded_star")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst 1 "i")
                      (("1" (assert)
                        (("1" (inst 1 "trace") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (lemma "trace_semantic_rel_star_bounded_star_con")
            (("2" (inst?)
              (("2" (expand "SOMERUNS_tr")
                (("2" (skeep)
                  (("2" (inst 1 "trace")
                    (("2" (inst -1 "trace") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SOMERUNS_tr const-decl "bool" ltl_expr nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (trace_semantic_rel_star_bounded_star_con formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (trace_semantic_rel_star_seq 0
  (trace_semantic_rel_star_seq-1 nil 3898243189
   ("" (skeep)
    (("" (split 2)
      (("1" (flatten)
        (("1" (expand "trace_semantic_rel" 1) (("1" (flatten) nil nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "trace_semantic_rel" -1) (("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel inductive-decl "bool" trace_semantics nil))
   shostak))
 (normDLGLOBALLY_append 0
  (normDLGLOBALLY_append-1 nil 3903521502
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "normDLGLOBALLY")
          (("1" (expand "finite_trace?")
            (("1" (expand "final_env")
              (("1" (typepred "trace2")
                (("1" (expand "wf_trace?")
                  (("1" (flatten)
                    (("1" (use "last_append[TraceState]")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1"
                            (case "DLGLOBALLY(State_Trace(Q))(append(trace1, trace2))")
                            (("1" (assert) (("1" (grind) nil nil)) nil)
                             ("2" (hide 3)
                              (("2"
                                (case
                                 "DLGLOBALLY(State_Trace(Q))(trace2)")
                                (("1"
                                  (lemma "DLGLOBALLY_append")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "wf_trace?")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("3" (expand "wf_trace?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "normDLGLOBALLY")
          (("2" (expand "finite_trace?")
            (("2" (expand "final_env")
              (("2" (typepred "trace2")
                (("2" (expand "wf_trace?")
                  (("2" (flatten)
                    (("2" (use "last_append[TraceState]")
                      (("1" (replace -1)
                        (("1" (assert)
                          (("1"
                            (case "DLGLOBALLY(State_Trace(Q))(append(trace1,trace2))")
                            (("1" (lemma "DLGLOBALLY_append")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "wf_trace?")
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (expand "wf_trace?")
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (last_append formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DLGLOBALLY_append formula-decl nil ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (append def-decl "list[T]" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil))
   shostak))
 (normDLEVENTUALLY_append 0
  (normDLEVENTUALLY_append-1 nil 3903609249
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "normDLEVENTUALLY")
          (("1" (split 1)
            (("1" (flatten)
              (("1" (split -2)
                (("1" (lemma "DLEVENTUALLY_append")
                  (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (lemma "DLEVENTUALLY_append")
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "final_env")
                              (("2"
                                (use "last_append[TraceState]")
                                (("1"
                                  (replace -1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (typepred "trace2")
                                  (("2"
                                    (expand "wf_trace?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (expand "finite_trace?")
                    (("3" (use "last_append[TraceState]")
                      (("3" (replace -1) (("3" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "finite_trace?")
                (("2" (use "last_append[TraceState]")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (lemma "DLEVENTUALLY_append")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "trace2")
                    (("2" (expand "wf_trace?") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "normDLEVENTUALLY")
          (("2" (expand "final_env")
            (("2" (expand "finite_trace?")
              (("2" (lemma "DLEVENTUALLY_append")
                (("2" (inst?)
                  (("2" (assert)
                    (("2" (use "last_append[TraceState]")
                      (("1" (replace -1) (("1" (grind) nil nil)) nil)
                       ("2" (typepred "trace2")
                        (("2" (expand "wf_trace?")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (DLEVENTUALLY_append formula-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (normDLGE_append 0
  (normDLGE_append-1 nil 3903604395
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (flatten)
            (("" (expand "normDLGE")
              (("" (expand "finite_trace?")
                (("" (expand "final_env")
                  (("" (use "last_append[TraceState]")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "DLGE_nth")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "Q"
                                       "append(trace1, trace2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "Q" "trace2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (use
                                                 "length_append[TraceState]")
                                                (("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (case
                                                       "j<length(trace1)")
                                                      (("1"
                                                        (inst -4 "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -4
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 3
                                                                 "length(trace1)-j+i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_append[TraceState]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "trace1"
                                                                       "trace2"
                                                                       "length(trace1)+i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (split
                                                                                 -5)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "0")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 4
                                                                                                 "t")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "D(nth[TraceState](trace2, i))")
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "closed_interval")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (flatten)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -2
                                                                                             "0")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 5
                                                                                                 "t")
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "hp")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               5
                                                                                               "t")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -3
                                                         "j-length(trace1)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "nth_append[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace1"
                                                               "trace2"
                                                               "_")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (typepred
                                                                         "i")
                                                                        (("1"
                                                                          (inst
                                                                           4
                                                                           "i")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -2
                                                                               "i+j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("1"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "T")
                                                                                                    (("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         5
                                                                                                         "t")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     6
                                                                                                     "t")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "DLGE_nth")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "Q"
                                       "append(trace1, trace2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "Q" "trace2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (use
                                                 "length_append[TraceState]")
                                                (("2"
                                                  (inst
                                                   -2
                                                   "length(trace1)+j")
                                                  (("1"
                                                    (use
                                                     "nth_append[TraceState]")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "i")
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "nth_append[TraceState]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "trace1"
                                                                       "trace2"
                                                                       "_")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "length(trace1) + i + j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -2)
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -7)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -2
                                                                                             "T")
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 2
                                                                                                 "t")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split
                                                                                     -6)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             3
                                                                                             "t")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (append def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (hp const-decl "bool" interval_def ODEs)
    (nth_append formula-decl nil more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil)
    (DLGE_nth formula-decl nil ltl_expr nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil))
   shostak))
 (normDLEG_append 0
  (normDLEG_append-1 nil 3903617115
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (flatten)
            (("" (expand "normDLEG")
              (("" (expand "finite_trace?")
                (("" (expand "final_env")
                  (("" (use "last_append[TraceState]")
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "DLEG_nth")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "Q"
                                       "append(trace1, trace2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "Q" "trace2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (use
                                                 "length_append[TraceState]")
                                                (("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (inst
                                                       2
                                                       "length(trace1)+j")
                                                      (("1"
                                                        (use
                                                         "nth_append[TraceState]")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "nth_append[TraceState]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "trace1"
                                                                     "trace2"
                                                                     "_")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "length(trace1) + i + j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "i")
                                                                            (("1"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               4
                                                                                               "T")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "t")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (flatten)
                                                                                    (("4"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -2
                                                                                               "t")
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "DLEG_nth")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "Q"
                                       "append(trace1, trace2)")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "Q" "trace2")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (case
                                                 "j<length(trace1)")
                                                (("1"
                                                  (inst 1 "0")
                                                  (("1"
                                                    (expand "nth" 1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -2
                                                           "length(trace1)-j+i")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "nth_append[TraceState]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "trace1"
                                                                 "trace2"
                                                                 "length(trace1)+i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (use
                                                                       "length_append[TraceState]")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (split
                                                                                   3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "0")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "D(nth[TraceState](trace2, i))")
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "closed_interval")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (flatten)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (split
                                                                                   3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "0")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (use
                                                               "length_append[TraceState]")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (inst
                                                   2
                                                   "j-length(trace1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "nth_append[TraceState]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "trace1"
                                                         "trace2"
                                                         "_")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "j")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (use
                                                               "length_append[TraceState]")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (typepred
                                                                     "i")
                                                                    (("1"
                                                                      (inst
                                                                       -5
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -3
                                                                           "i+j")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (split
                                                                                 -5)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               4
                                                                                               "T")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (flatten)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (flatten)
                                                                                      (("4"
                                                                                        (split
                                                                                         -1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "j")
                                                      (("2"
                                                        (use
                                                         "length_append[TraceState]")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (append def-decl "list[T]" list_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (trace1 skolem-const-decl "Trace" trace_bounded_star_semantics nil)
    (j skolem-const-decl "below(length(trace2))"
     trace_bounded_star_semantics nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (DLEG_nth formula-decl nil ltl_expr nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below(length(trace2))"
       trace_bounded_star_semantics nil)
    (j skolem-const-decl "below(length(append(trace1, trace2)))"
     trace_bounded_star_semantics nil)
    (hp const-decl "bool" interval_def ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (trace2 skolem-const-decl "Trace" trace_bounded_star_semantics nil)
    (last_append formula-decl nil more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_glob 0
  (trace_semantic_rel_bounded_star_seq_switch_glob-1 nil 3903513921
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 2)
            (("1" (expand "trace_semantic_rel" 1 1)
              (("1" (expand "DLBOOL")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (assert)
                      (("1"
                        (inst 1
                         "append((: STATE(init_env(trace1)) :),trace1)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 1
                                 "(: STATE(init_env(trace1)) :)"
                                 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (replace -6)
                              (("2"
                                (lemma "car_append[TraceState]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (lemma "car_append[TraceState]")
                                    (("1"
                                      (inst
                                       -1
                                       "trace1"
                                       "(: STATE(init_env(trace1)) :)")
                                      (("1"
                                        (expand "init_env" 1 (1 2))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "init_env" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace1")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (replace -7)
                                (("3"
                                  (expand "normDLGLOBALLY")
                                  (("3"
                                    (expand "final_env")
                                    (("3"
                                      (expand "finite_trace?")
                                      (("3"
                                        (typepred "trace1")
                                        (("3"
                                          (typepred "trace2")
                                          (("3"
                                            (expand "wf_trace?")
                                            (("3"
                                              (flatten)
                                              (("3"
                                                (use
                                                 "last_append[TraceState]")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (use
                                                       "last_append[TraceState]")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "last"
                                                           -6)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -6)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env"
                                                                   -12)
                                                                  (("1"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (lemma
                                                                           "DLGLOBALLY_append")
                                                                          (("3"
                                                                            (inst-cp
                                                                             -1
                                                                             "Q"
                                                                             "trace1"
                                                                             "trace2")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "Q"
                                                                                   "(: STATE(init_env(trace1)) :)"
                                                                                   " trace1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "wf_append_finite")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (hide-all-but
                                                                                             (-2
                                                                                              -15
                                                                                              1))
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "DLGLOBALLY_FORALL")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "Q"
                                                                                                 "trace1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               +)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   1
                                                                                                                   3
                                                                                                                   4
                                                                                                                   5)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "init_env")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (split
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "behavior(car(trace1))")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -3
                                                                                                                                         "0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "D(nth[TraceState](trace1, 0))")
                                                                                                                                          (("2"
                                                                                                                                            (skeep)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "closed_interval")
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "inf_behavior(car(trace1))")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -3
                                                                                                                                         "0")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (typepred
                                                                                                                       "trace1")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "wf_trace?")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "length")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     1)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4"
                                (replace -7)
                                (("4"
                                  (expand "normDLGLOBALLY")
                                  (("4"
                                    (expand "final_env")
                                    (("4"
                                      (expand "finite_trace?")
                                      (("4"
                                        (typepred "trace1")
                                        (("4"
                                          (typepred "trace2")
                                          (("4"
                                            (expand "wf_trace?")
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (use
                                                 "last_append[TraceState]")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (hide -1)
                                                    (("1"
                                                      (use
                                                       "last_append[TraceState]")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "last"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "init_env"
                                                                 -11)
                                                                (("1"
                                                                  (split
                                                                   -6)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -14)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "DLGLOBALLY_append")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "Q"
                                                                                     "trace1"
                                                                                     "trace2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "Q"
                                                                                         "(: STATE(init_env(trace1)) :)"
                                                                                         " trace1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "wf_append_finite")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-3
                                                                                                        -15
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "DLGLOBALLY_FORALL")
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "Q"
                                                                                                           "trace1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             1
                                                                                                                             3
                                                                                                                             4
                                                                                                                             5)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "length(trace1)-1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "last")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "last")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "trace1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "wf_trace?")
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -13)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "DLGLOBALLY_append")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "Q"
                                                                                     "trace1"
                                                                                     "trace2")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "Q"
                                                                                         "(: STATE(init_env(trace1)) :)"
                                                                                         " trace1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "wf_append_finite")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide-all-but
                                                                                                       (-3
                                                                                                        -15
                                                                                                        1))
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "DLGLOBALLY_FORALL")
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "Q"
                                                                                                           "trace1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (inst?)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         +)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (hide
                                                                                                                             1
                                                                                                                             3
                                                                                                                             4
                                                                                                                             5)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "length(trace1)-1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "last")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (reveal
                                                                                                                                     -)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "last")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -24
                                                                                                                                           "max_ci(D(nth(trace1, length(trace1) - 1)))")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide-all-but
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide-all-but
                                                                                           1)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "trace1")
                          (("2" (expand "wf_trace?")
                            (("2" (flatten)
                              (("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (typepred "i")
                                    (("3"
                                      (case "i=0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "nth_append[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (typepred "trace")
                                  (("4"
                                    (expand "valid_trace?")
                                    (("4"
                                      (expand "finite_trace?")
                                      (("4"
                                        (typepred "trace1")
                                        (("4"
                                          (expand "wf_trace?")
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (use
                                               "last_append[TraceState]")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (typepred "trace")
                      (("2" (expand "wf_trace?")
                        (("2" (flatten)
                          (("2"
                            (inst 2
                             "append((: STATE(init_env(trace)) :),trace)")
                            (("1" (assert)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env" 1)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "init_env" 1 (1 2))
                                  (("2"
                                    (lemma "car_append[TraceState]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "init_env" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (lemma "normDLGLOBALLY_append")
                                    (("3"
                                      (inst
                                       -1
                                       "P"
                                       "Q"
                                       "(: STATE(init_env(trace)) :)"
                                       "trace")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "norm_implies_DLGLOBALLY")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "DLGLOBALLY_FORALL")
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "Q"
                                                         "trace")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "init_env"
                                                                                   2)
                                                                                  (("1"
                                                                                    (split
                                                                                     2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "D(nth[TraceState](trace, 0))")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "behavior(car(trace))")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "closed_interval")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth")
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "inf_behavior(car(trace))")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -3
                                                                                                 "0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but 1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (lemma "normDLGLOBALLY_append")
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "wf_trace?")
                              (("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2" (grind) nil nil)
                                 ("3"
                                  (skeep)
                                  (("3"
                                    (typepred "i")
                                    (("3"
                                      (case "i=0")
                                      (("1" (grind) nil nil)
                                       ("2"
                                        (lemma
                                         "nth_append[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (expand "valid_trace?")
                                  (("4"
                                    (expand "finite_trace?")
                                    (("4"
                                      (use "last_append[TraceState]")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (expand "trace_semantic_rel" -2)
              (("2" (split)
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -2)
                    (("1" (split)
                      (("1" (expand "trace_semantic_rel" 1 1)
                        (("1" (inst -6 "stm" "trace2" "P" "Q")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -6)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst
                                       1
                                       "append(append(trace1,trace1!1),trace2!1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "append(trace1,trace1!1)"
                                             "trace2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "trace_semantic_rel"
                                                       1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "trace1"
                                                           "trace1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -11)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "trace1!1")
                                                                      (("1"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "car_append[TraceState]")
                                                                            (("1"
                                                                              (expand
                                                                               "init_env")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (typepred
                                                       "trace1!1")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "final_env")
                                                    (("3"
                                                      (typepred
                                                       "trace1!1")
                                                      (("3"
                                                        (expand
                                                         "wf_trace?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("3"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (typepred "trace1")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use
                                                   "car_append[TraceState]")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (use
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -12)
                                                              (("1"
                                                                (use
                                                                 "car_append[TraceState]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (replace -7)
                                                  (("3"
                                                    (replace -12)
                                                    (("3"
                                                      (lemma
                                                       "normDLGLOBALLY_append")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "normDLGLOBALLY_append")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (split
                                                                       -3)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "wf_append_finite")
                                                                        (("2"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (flatten)
                                          (("4"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (replace -7)
                                                  (("4"
                                                    (replace -12)
                                                    (("4"
                                                      (lemma
                                                       "normDLGLOBALLY_append")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (lemma
                                                             "normDLGLOBALLY_append")
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "append_assoc[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "tr1")
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (expand
                                                         "valid_trace?")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace1"
                                                               "append(trace1!1, trace2!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "wf_trace?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "tr1")
                                                  (("2"
                                                    (replace -8)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "append(trace1,tr1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel"
                                             2)
                                            (("1"
                                              (typepred "tr1")
                                              (("1"
                                                (expand "wf_trace?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "trace1"
                                                                   "tr1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (typepred "trace1")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "car_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "car_append[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -7)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (lemma
                                               "normDLGLOBALLY_append")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (lemma
                                                       "normDLGLOBALLY_append")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "tr1")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "wf_append_finite")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -7)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (lemma
                                               "normDLGLOBALLY_append")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "normDLGLOBALLY_append")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "P"
                                                       "Q"
                                                       "trace1"
                                                       "trace2")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (lemma
                                                           "wf_append_finite")
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (flatten)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "tr1")
                                              (("2"
                                                (expand "valid_trace?")
                                                (("2"
                                                  (expand
                                                   "finite_trace?")
                                                  (("2"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "trace_semantic_rel" 1 1)
                        (("2" (inst -6 "stm" "trace" "P" "Q")
                          (("2" (split -6)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -1)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "tr1")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "trace1!1"
                                             "trace2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "tr1")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "trace_semantic_rel" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 1 "trace1" "trace2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst 1 "trace")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel" 1)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (<= const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLGLOBALLY_append formula-decl nil ltl_expr nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (hp const-decl "bool" interval_def ODEs)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (last_append formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (norm_implies_DLGLOBALLY formula-decl nil ltl_expr nil)
    (normDLGLOBALLY_append formula-decl nil
     trace_bounded_star_semantics nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_even 0
  (trace_semantic_rel_bounded_star_seq_switch_even-1 nil 3903610237
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 2)
            (("1" (expand "trace_semantic_rel" 1 1)
              (("1" (expand "DLBOOL")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (assert)
                      (("1"
                        (inst 1
                         "append((: STATE(init_env(trace1)) :),trace1)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 1
                                 "(: STATE(init_env(trace1)) :)"
                                 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (replace -6)
                              (("2"
                                (lemma "car_append[TraceState]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (lemma "car_append[TraceState]")
                                    (("1"
                                      (inst
                                       -1
                                       "trace1"
                                       "(: STATE(init_env(trace1)) :)")
                                      (("1"
                                        (expand "init_env" 1 (1 2))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "init_env" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace1")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (replace -7)
                                (("3"
                                  (lemma "normDLEVENTUALLY_append")
                                  (("3"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("3"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand
                                                         "normDLEVENTUALLY")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 -3)
                                                                (("1"
                                                                  (expand
                                                                   "finite_trace?"
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "last")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "final_env"
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "last")
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (expand
                                                                               "init_env")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "DLEVENTUALLY_EXISTS")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "Q"
                                                                                     "trace2")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "Q"
                                                                                           "trace1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "final_env")
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "length(trace1)-1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "finite_trace?")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "last")
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -7)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "max_ci(D(nth(trace1, length(trace1) - 1)))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "trace1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "wf_trace?")
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "trace1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_trace?")
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4"
                                (replace -7)
                                (("4"
                                  (lemma "normDLEVENTUALLY_append")
                                  (("4"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("4"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (hide 3)
                                                      (("1"
                                                        (expand
                                                         "normDLEVENTUALLY")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "finite_trace?"
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "last")
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "finite_trace?")
                                                                        (("1"
                                                                          (expand
                                                                           "final_env")
                                                                          (("1"
                                                                            (use
                                                                             "last_append[TraceState]")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "last"
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split
                                                                                         -4)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -10)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "init_env"
                                                                                                       -3
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (hide-all-but
                                                                                                         (1
                                                                                                          -3))
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "DLEVENTUALLY_EXISTS")
                                                                                                          (("1"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             "Q"
                                                                                                             "append((: STATE(init_env(trace1)) :), trace1)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -3)
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (skeep)
                                                                                                                        (("1"
                                                                                                                          (case
                                                                                                                           "i=0")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "nth"
                                                                                                                             -)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (use
                                                                                                                                 "car_append[TraceState]")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       1
                                                                                                                                       "0")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "nth")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "init_env")
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "trace1")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "wf_trace?")
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -5)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (case
                                                                                                                                                             "state_diff?(car(trace1))")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 4
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "behavior(car(trace1))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "D(nth[TraceState](trace1, 0))")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (skeep)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "closed_interval")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 6
                                                                                                                                                                 "0")
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "inf_behavior(car(trace1))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "hp")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (typepred
                                                                                                                                         "trace1")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "wf_trace?")
                                                                                                                                          (("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "nth_append[TraceState]")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "i")
                                                                                                                                    (("2"
                                                                                                                                      (split
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               2
                                                                                                                                               "i-1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     -3)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             3
                                                                                                                                                             "t")
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("3"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "init_env"
                                                                                                         -3
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (2
                                                                                                            -3))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "DLEVENTUALLY_EXISTS")
                                                                                                            (("2"
                                                                                                              (inst-cp
                                                                                                               -1
                                                                                                               "Q"
                                                                                                               "append((: STATE(init_env(trace1)) :), trace1)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -3)
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         2)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "i=0")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               -)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (use
                                                                                                                                   "car_append[TraceState]")
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         1
                                                                                                                                         "0")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "init_env")
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "trace1")
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "wf_trace?")
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -5)
                                                                                                                                                        (("1"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (case
                                                                                                                                                               "state_diff?(car(trace1))")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   4
                                                                                                                                                                   "0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "behavior(car(trace1))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "D(nth[TraceState](trace1, 0))")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (skeep)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "closed_interval")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   6
                                                                                                                                                                   "0")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (typepred
                                                                                                                                                                     "inf_behavior(car(trace1))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "hp")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "trace1")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "wf_trace?")
                                                                                                                                            (("2"
                                                                                                                                              (grind)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "nth_append[TraceState]")
                                                                                                                                (("2"
                                                                                                                                  (inst?)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "i")
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 2
                                                                                                                                                 "i-1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (split
                                                                                                                                                       -3)
                                                                                                                                                      (("1"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (inst
                                                                                                                                                               3
                                                                                                                                                               "t")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("3"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (grind)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "trace1")
                                                                              (("2"
                                                                                (expand
                                                                                 "wf_trace?")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "trace1")
                          (("2" (lemma "wf_append_finite")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "valid_trace?")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (use
                                           "last_append[TraceState]")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (typepred "trace")
                      (("2" (expand "wf_trace?")
                        (("2" (flatten)
                          (("2"
                            (inst 2
                             "append((: STATE(init_env(trace)) :),trace)")
                            (("1" (assert)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env" 1)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "init_env" 1 (1 2))
                                  (("2"
                                    (lemma "car_append[TraceState]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "init_env" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (lemma "normDLEVENTUALLY_append")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (expand "normDLEVENTUALLY")
                                    (("4"
                                      (expand "final_env")
                                      (("4"
                                        (expand "finite_trace?")
                                        (("4"
                                          (use
                                           "last_append[TraceState]")
                                          (("4"
                                            (replace -1)
                                            (("4"
                                              (assert)
                                              (("4"
                                                (lemma
                                                 "DLEVENTUALLY_append")
                                                (("4"
                                                  (inst?)
                                                  (("1"
                                                    (lemma
                                                     "wf_append_finite")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide-all-but
                                                                 (3
                                                                  -5))
                                                                (("2"
                                                                  (lemma
                                                                   "DLEVENTUALLY_EXISTS")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "Q"
                                                                     "append((: STATE(init_env(trace)) :), trace)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -3)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (case
                                                                                   "i=0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (use
                                                                                         "car_append[TraceState]")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "init_env")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "trace")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "wf_trace?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (case
                                                                                                                 "state_diff?(car(trace))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     3
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "D(nth[TraceState](trace, 0))")
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "closed_interval")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     5
                                                                                                                     "0")
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "inf_behavior(car(trace))")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (expand
                                                                                                                       "hp")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "nth_append[TraceState]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("2"
                                                                                              (split
                                                                                               -2)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       2
                                                                                                       "i-1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     3
                                                                                                                     "t")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         1)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but 1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "wf_append_finite")
                              (("2"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "valid_trace?")
                                    (("1"
                                      (expand "finite_trace?")
                                      (("1"
                                        (use "last_append[TraceState]")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (expand "trace_semantic_rel" -2)
              (("2" (split)
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -2)
                    (("1" (split)
                      (("1" (expand "trace_semantic_rel" 1 1)
                        (("1" (inst -6 "stm" "trace2" "P" "Q")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -6)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst
                                       1
                                       "append(append(trace1,trace1!1),trace2!1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "append(trace1,trace1!1)"
                                             "trace2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "trace_semantic_rel"
                                                       1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "trace1"
                                                           "trace1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -11)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "trace1!1")
                                                                      (("1"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "car_append[TraceState]")
                                                                            (("1"
                                                                              (expand
                                                                               "init_env")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (typepred
                                                       "trace1!1")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "final_env")
                                                    (("3"
                                                      (typepred
                                                       "trace1!1")
                                                      (("3"
                                                        (expand
                                                         "wf_trace?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("3"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (typepred "trace1")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use
                                                   "car_append[TraceState]")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (use
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -12)
                                                              (("1"
                                                                (use
                                                                 "car_append[TraceState]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (replace -7)
                                                  (("3"
                                                    (replace -12)
                                                    (("3"
                                                      (lemma
                                                       "normDLEVENTUALLY_append")
                                                      (("3"
                                                        (inst-cp
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "P"
                                                             "Q"
                                                             "trace1"
                                                             "trace2")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "wf_append_finite")
                                                                (("3"
                                                                  (inst?)
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (flatten)
                                          (("4"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (replace -7)
                                                  (("4"
                                                    (replace -12)
                                                    (("4"
                                                      (lemma
                                                       "normDLEVENTUALLY_append")
                                                      (("4"
                                                        (inst-cp
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "P"
                                                             "Q"
                                                             "trace1"
                                                             "trace2")
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (lemma
                                                                 "wf_append_finite")
                                                                (("4"
                                                                  (inst?)
                                                                  (("4"
                                                                    (assert)
                                                                    (("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "append_assoc[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "tr1")
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (expand
                                                         "valid_trace?")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace1"
                                                               "append(trace1!1, trace2!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "wf_trace?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "tr1")
                                                  (("2"
                                                    (replace -8)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "append(trace1,tr1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel"
                                             2)
                                            (("1"
                                              (typepred "tr1")
                                              (("1"
                                                (expand "wf_trace?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "trace1"
                                                                   "tr1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (typepred "trace1")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "car_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "car_append[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -7)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (lemma
                                               "normDLEVENTUALLY_append")
                                              (("3"
                                                (inst-cp
                                                 -1
                                                 "P"
                                                 "Q"
                                                 "trace1"
                                                 "tr1")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "P"
                                                     "Q"
                                                     "trace1"
                                                     "trace2")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "wf_append_finite")
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -7)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (lemma
                                               "normDLEVENTUALLY_append")
                                              (("4"
                                                (inst-cp
                                                 -1
                                                 "P"
                                                 "Q"
                                                 "trace1"
                                                 "tr1")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (inst
                                                     -1
                                                     "P"
                                                     "Q"
                                                     "trace1"
                                                     "trace2")
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (lemma
                                                         "wf_append_finite")
                                                        (("4"
                                                          (inst?)
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (flatten)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "tr1")
                                              (("2"
                                                (expand "valid_trace?")
                                                (("2"
                                                  (expand
                                                   "finite_trace?")
                                                  (("2"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "trace_semantic_rel" 1 1)
                        (("2" (inst -6 "stm" "trace" "P" "Q")
                          (("2" (split -6)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -1)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "tr1")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "trace1!1"
                                             "trace2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "tr1")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "trace_semantic_rel" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 1 "trace1" "trace2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst 1 "trace")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel" 1)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil nil nil (append_assoc formula-decl nil list_props nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil) nil
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (last_append formula-decl nil more_list_props structures)
    (normDLEVENTUALLY_append formula-decl nil
     trace_bounded_star_semantics nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (<= const-decl "bool" reals nil) nil
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    nil (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil) nil
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (DLEVENTUALLY_append formula-decl nil ltl_expr nil) nil
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_ge 0
  (trace_semantic_rel_bounded_star_seq_switch_ge-1 nil 3903606154
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 2)
            (("1" (expand "trace_semantic_rel" 1 1)
              (("1" (expand "DLBOOL")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (assert)
                      (("1"
                        (inst 1
                         "append((: STATE(init_env(trace1)) :),trace1)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 1
                                 "(: STATE(init_env(trace1)) :)"
                                 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (replace -6)
                              (("2"
                                (lemma "car_append[TraceState]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (lemma "car_append[TraceState]")
                                    (("1"
                                      (inst
                                       -1
                                       "trace1"
                                       "(: STATE(init_env(trace1)) :)")
                                      (("1"
                                        (expand "init_env" 1 (1 2))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "init_env" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace1")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (replace -7)
                                (("3"
                                  (lemma "normDLGE_append")
                                  (("3"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("3"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -3)
                                                    (("1"
                                                      (expand
                                                       "normDLGE")
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4"
                                (replace -7)
                                (("4"
                                  (lemma "normDLGE_append")
                                  (("4"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("4"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -3)
                                                    (("1"
                                                      (expand
                                                       "normDLGE")
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "trace1")
                          (("2" (lemma "wf_append_finite")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "valid_trace?")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (use
                                           "last_append[TraceState]")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (typepred "trace")
                      (("2" (expand "wf_trace?")
                        (("2" (flatten)
                          (("2"
                            (inst 2
                             "append((: STATE(init_env(trace)) :),trace)")
                            (("1" (assert)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env" 1)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "init_env" 1 (1 2))
                                  (("2"
                                    (lemma "car_append[TraceState]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "init_env" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (lemma "normDLGE_append")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (lemma "normDLGE_append")
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "wf_append_finite")
                              (("2"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "trace")
                                    (("1"
                                      (expand "valid_trace?")
                                      (("1"
                                        (expand "finite_trace?")
                                        (("1"
                                          (expand "wf_trace?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (use
                                               "last_append[TraceState]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (expand "trace_semantic_rel" -2)
              (("2" (split)
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -2)
                    (("1" (split)
                      (("1" (expand "trace_semantic_rel" 1 1)
                        (("1" (inst -6 "stm" "trace2" "P" "Q")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -6)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst
                                       1
                                       "append(append(trace1,trace1!1),trace2!1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "append(trace1,trace1!1)"
                                             "trace2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "trace_semantic_rel"
                                                       1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "trace1"
                                                           "trace1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -11)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "trace1!1")
                                                                      (("1"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "car_append[TraceState]")
                                                                            (("1"
                                                                              (expand
                                                                               "init_env")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (typepred
                                                       "trace1!1")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "final_env")
                                                    (("3"
                                                      (typepred
                                                       "trace1!1")
                                                      (("3"
                                                        (expand
                                                         "wf_trace?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("3"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (typepred "trace1")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use
                                                   "car_append[TraceState]")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (use
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -12)
                                                              (("1"
                                                                (use
                                                                 "car_append[TraceState]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (replace -7)
                                                  (("3"
                                                    (replace -12)
                                                    (("3"
                                                      (lemma
                                                       "normDLGE_append")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "normDLGE_append")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("3"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (flatten)
                                          (("4"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (replace -7)
                                                  (("4"
                                                    (replace -12)
                                                    (("4"
                                                      (lemma
                                                       "normDLGE_append")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (lemma
                                                             "normDLGE_append")
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "append_assoc[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "tr1")
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (expand
                                                         "valid_trace?")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace1"
                                                               "append(trace1!1, trace2!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "wf_trace?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "tr1")
                                                  (("2"
                                                    (replace -8)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "append(trace1,tr1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel"
                                             2)
                                            (("1"
                                              (typepred "tr1")
                                              (("1"
                                                (expand "wf_trace?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "trace1"
                                                                   "tr1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (typepred "trace1")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "car_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "car_append[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -7)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (lemma "normDLGE_append")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "normDLGE_append")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "P"
                                                       "Q"
                                                       "trace1"
                                                       "tr1")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "wf_append_finite")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -7)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (lemma "normDLGE_append")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "normDLGE_append")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "P"
                                                       "Q"
                                                       "trace1"
                                                       "trace2")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (lemma
                                                           "wf_append_finite")
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "tr1")
                                              (("2"
                                                (expand "valid_trace?")
                                                (("2"
                                                  (expand
                                                   "finite_trace?")
                                                  (("2"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "trace_semantic_rel" 1 1)
                        (("2" (inst -6 "stm" "trace" "P" "Q")
                          (("2" (split -6)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -1)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "tr1")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "trace1!1"
                                             "trace2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "tr1")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "trace_semantic_rel" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 1 "trace1" "trace2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst 1 "trace")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel" 1)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (last_append formula-decl nil more_list_props structures)
    (normDLGE_append formula-decl nil trace_bounded_star_semantics nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_eg 0
  (trace_semantic_rel_bounded_star_seq_switch_eg-1 nil 3903607749
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 2)
            (("1" (expand "trace_semantic_rel" 1 1)
              (("1" (expand "DLBOOL")
                (("1" (split)
                  (("1" (skeep)
                    (("1" (assert)
                      (("1"
                        (inst 1
                         "append((: STATE(init_env(trace1)) :),trace1)")
                        (("1" (assert)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (inst
                                 1
                                 "(: STATE(init_env(trace1)) :)"
                                 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (replace -6)
                              (("2"
                                (lemma "car_append[TraceState]")
                                (("2"
                                  (inst?)
                                  (("1"
                                    (lemma "car_append[TraceState]")
                                    (("1"
                                      (inst
                                       -1
                                       "trace1"
                                       "(: STATE(init_env(trace1)) :)")
                                      (("1"
                                        (expand "init_env" 1 (1 2))
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "init_env" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace1")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (replace -7)
                                (("3"
                                  (lemma "normDLEG_append")
                                  (("3"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("3"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -3)
                                                    (("1"
                                                      (expand
                                                       "normDLEG")
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten)
                              (("4"
                                (replace -7)
                                (("4"
                                  (lemma "normDLEG_append")
                                  (("4"
                                    (inst -1 "P" "Q" "_" "_")
                                    (("4"
                                      (inst-cp -1 "trace1" "trace2")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (inst
                                           -1
                                           "(: STATE(init_env(trace1)) :)"
                                           "trace1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "wf_append_finite")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide 2 -3)
                                                    (("1"
                                                      (expand
                                                       "normDLEG")
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but 1)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but 1)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "trace1")
                          (("2" (lemma "wf_append_finite")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "valid_trace?")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (use
                                           "last_append[TraceState]")
                                          (("1"
                                            (replace -1)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide-all-but 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (typepred "trace")
                      (("2" (expand "wf_trace?")
                        (("2" (flatten)
                          (("2"
                            (inst 2
                             "append((: STATE(init_env(trace)) :),trace)")
                            (("1" (assert)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst? 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env" 1)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but 1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "init_env" 1 (1 2))
                                  (("2"
                                    (lemma "car_append[TraceState]")
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "init_env" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (lemma "normDLEG_append")
                                    (("3"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (lemma "normDLEG_append")
                                    (("4"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "wf_append_finite")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (hide-all-but 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but 1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "wf_append_finite")
                              (("2"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "trace")
                                    (("1"
                                      (expand "valid_trace?")
                                      (("1"
                                        (expand "finite_trace?")
                                        (("1"
                                          (expand "wf_trace?")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (use
                                               "last_append[TraceState]")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide-all-but 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (expand "trace_semantic_rel" -2)
              (("2" (split)
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -2)
                    (("1" (split)
                      (("1" (expand "trace_semantic_rel" 1 1)
                        (("1" (inst -6 "stm" "trace2" "P" "Q")
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -6)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst
                                       1
                                       "append(append(trace1,trace1!1),trace2!1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "append(trace1,trace1!1)"
                                             "trace2!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "trace_semantic_rel"
                                                       1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "trace1"
                                                           "trace1!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -11)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (typepred
                                                                       "trace1!1")
                                                                      (("1"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (use
                                                                             "car_append[TraceState]")
                                                                            (("1"
                                                                              (expand
                                                                               "init_env")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (typepred
                                                       "trace1!1")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (use
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "final_env")
                                                    (("3"
                                                      (typepred
                                                       "trace1!1")
                                                      (("3"
                                                        (expand
                                                         "wf_trace?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("3"
                                                              (inst?)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (typepred "trace1")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (use
                                                   "car_append[TraceState]")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (use
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -12)
                                                              (("1"
                                                                (use
                                                                 "car_append[TraceState]")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (replace -7)
                                                  (("3"
                                                    (replace -12)
                                                    (("3"
                                                      (lemma
                                                       "normDLEG_append")
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (lemma
                                                             "normDLEG_append")
                                                            (("3"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("3"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (flatten)
                                          (("4"
                                            (lemma
                                             "append_assoc[TraceState]")
                                            (("4"
                                              (inst?)
                                              (("4"
                                                (replace -1)
                                                (("4"
                                                  (replace -7)
                                                  (("4"
                                                    (replace -12)
                                                    (("4"
                                                      (lemma
                                                       "normDLEG_append")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "P"
                                                         "Q"
                                                         "trace1"
                                                         "append(trace1!1, trace2!1)")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (lemma
                                                             "normDLEG_append")
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "P"
                                                               "Q"
                                                               "trace1"
                                                               "trace2")
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "append_assoc[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (replace -1)
                                            (("2"
                                              (lemma
                                               "wf_append_finite")
                                              (("2"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "tr1")
                                                    (("1"
                                                      (replace -9)
                                                      (("1"
                                                        (expand
                                                         "valid_trace?")
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace1"
                                                               "append(trace1!1, trace2!1)")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "wf_trace?")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "tr1")
                                                  (("2"
                                                    (replace -8)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "append(trace1,tr1)")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel"
                                             2)
                                            (("1"
                                              (typepred "tr1")
                                              (("1"
                                                (expand "wf_trace?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split 3)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   1
                                                                   "trace1"
                                                                   "tr1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -7)
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (typepred "trace1")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (use
                                                     "car_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (hide -1)
                                                        (("1"
                                                          (use
                                                           "car_append[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (replace -7)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (lemma "normDLEG_append")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "normDLEG_append")
                                                    (("3"
                                                      (inst
                                                       -1
                                                       "P"
                                                       "Q"
                                                       "trace1"
                                                       "tr1")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "wf_append_finite")
                                                          (("3"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (replace -7)
                                          (("4"
                                            (flatten)
                                            (("4"
                                              (lemma "normDLEG_append")
                                              (("4"
                                                (inst?)
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (lemma
                                                     "normDLEG_append")
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "P"
                                                       "Q"
                                                       "trace1"
                                                       "trace2")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (lemma
                                                           "wf_append_finite")
                                                          (("4"
                                                            (inst?)
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "tr1")
                                              (("2"
                                                (expand "valid_trace?")
                                                (("2"
                                                  (expand
                                                   "finite_trace?")
                                                  (("2"
                                                    (use
                                                     "last_append[TraceState]")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (replace -7)
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "trace_semantic_rel" 1 1)
                        (("2" (inst -6 "stm" "trace" "P" "Q")
                          (("2" (split -6)
                            (("1" (skeep)
                              (("1"
                                (expand "trace_semantic_rel" -1)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "tr1")
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst
                                             1
                                             "trace1!1"
                                             "trace2!1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "tr1")
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3" (propax) nil nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "trace_semantic_rel" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (inst 1 "trace1" "trace2")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst 1 "trace")
                    (("2" (assert)
                      (("2" (flatten)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (assert)
                            (("2" (split 2)
                              (("1" (propax) nil nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel" 1)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (last_append formula-decl nil more_list_props structures)
    (normDLEG_append formula-decl nil trace_bounded_star_semantics nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch 0
  (trace_semantic_rel_bounded_star_seq_switch-1 nil 3898175042
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 2)
            (("1" (expand "trace_semantic_rel" 1 1)
              (("1" (expand "DLBOOL")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (assert)
                        (("1"
                          (inst 1 "(: STATE(init_env(trace1)) :)"
                           "trace1")
                          (("1" (assert)
                            (("1" (expand "finite_trace?")
                              (("1"
                                (expand "final_env" 1)
                                (("1"
                                  (expand "last" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth" 1)
                                      (("1" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "trace")
                        (("2" (expand "wf_trace?")
                          (("2" (flatten)
                            (("2"
                              (inst 2 "(: STATE(init_env(trace)) :)"
                               "trace")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "finite_trace?")
                                  (("1"
                                    (expand "final_env")
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" 2)
                                          (("1" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (flatten)
              (("2" (expand "trace_semantic_rel" -2)
                (("2" (split)
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel" -2)
                      (("1" (split)
                        (("1" (expand "trace_semantic_rel" 1 1)
                          (("1" (inst -6 "stm" "trace2")
                            (("1" (assert)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "trace_semantic_rel" -5)
                                  (("1"
                                    (split -5)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst
                                         1
                                         "append(trace1,trace1!1)"
                                         "trace2_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -9)
                                            (("1"
                                              (replace -5)
                                              (("1"
                                                (lemma
                                                 "append_assoc[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "trace_semantic_rel"
                                                           1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "trace1"
                                                               "trace1!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (typepred
                                                                     "trace1!1")
                                                                    (("1"
                                                                      (expand
                                                                       "wf_trace?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lemma
                                                                           "car_append[TraceState]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "finite_trace?")
                                                        (("2"
                                                          (typepred
                                                           "trace1!1")
                                                          (("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "last_append[TraceState]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "final_env")
                                                        (("3"
                                                          (typepred
                                                           "trace1!1")
                                                          (("3"
                                                            (expand
                                                             "wf_trace?")
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (lemma
                                                                 "last_append[TraceState]")
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "wf_append_finite")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (expand "trace_semantic_rel" 2)
                                        (("2"
                                          (hide 1)
                                          (("2"
                                            (replace -6)
                                            (("2"
                                              (typepred "trace2")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "last_append[TraceState]")
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (split 2)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "trace_semantic_rel"
                                                                 1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "trace1"
                                                                     "trace2")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "trace_semantic_rel" 1 1)
                          (("2" (inst -6 "stm" "trace")
                            (("2" (split -6)
                              (("1"
                                (expand "trace_semantic_rel" -1)
                                (("1"
                                  (expand "trace_semantic_rel" 2)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "trace1!1" "trace2!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "trace_semantic_rel" 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (inst 1 "trace1" "trace2")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "trace_semantic_rel" 2 1)
                      (("2" (expand "trace_semantic_rel" 2 1)
                        (("2" (assert)
                          (("2" (split 2)
                            (("1" (propax) nil nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_assoc formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (last_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car_rdc formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (rdc_append formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (rdc_cdr formula-decl nil even_more_list_props nil)
    (last_cdr formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel_bstar_reflexive formula-decl nil
     trace_bounded_star_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (append_null_left formula-decl nil more_list_props structures)
    (append_null formula-decl nil list_props nil)
    (rac const-decl "T" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (TraceState_STATE_extensionality formula-decl nil TraceState_adt
     nil)
    (rdc_rac formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_rdc formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (length_singleton formula-decl nil more_list_props structures)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (rdc const-decl "list[T]" more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_con 0
  (trace_semantic_rel_bounded_star_seq_switch_con-1 nil 3899549176
   ("" (induct i)
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (expand "trace_semantic_rel" -1 1)
            (("1" (expand "trace_semantic_rel" 1 2)
              (("1" (expand "DLBOOL")
                (("1" (flatten)
                  (("1" (split)
                    (("1" (skeep)
                      (("1" (assert) (("1" (postpone) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "trace_semantic_rel" -2)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (expand "last")
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (skeep)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (flatten)
              (("2" (expand "trace_semantic_rel" -2)
                (("2" (split)
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel" -1)
                      (("1" (split)
                        (("1" (expand "trace_semantic_rel" -1)
                          (("1" (split -1)
                            (("1" (skeep)
                              (("1"
                                (inst
                                 1
                                 "trace1_1"
                                 "append(trace2!1,trace2)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -5)
                                    (("1"
                                      (replace -9)
                                      (("1"
                                        (lemma
                                         "append_assoc[TraceState]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand
                                                 "trace_semantic_rel"
                                                 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "wf_append_finite")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (replace -5)
                                        (("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "trace_semantic_rel" 1 2)
                          (("2" (inst -6 "stm" "trace")
                            (("2" (assert)
                              (("2"
                                (split -6)
                                (("1"
                                  (expand "trace_semantic_rel" -1)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "trace1!1" "trace2!1")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "trace_semantic_rel" 1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst 1 "trace1" "trace2")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "trace_semantic_rel" -2)
                        (("2" (split -2)
                          (("1" (expand "trace_semantic_rel" -1)
                            (("1" (expand "trace_semantic_rel" 1 2)
                              (("1"
                                (split -1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "trace1" "trace2")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst -3 "stm" "trace")
                              (("2"
                                (assert)
                                (("2"
                                  (split -3)
                                  (("1"
                                    (expand "trace_semantic_rel" -1)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "trace1" "trace2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               1
                                               1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "trace_semantic_rel" 1 1)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_cdr formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (rdc_cdr formula-decl nil even_more_list_props nil)
    (append_assoc formula-decl nil list_props nil)
    (last_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (car_rdc formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (trace_semantic_rel_bstar_reflexive formula-decl nil
     trace_bounded_star_semantics nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (rdc_append formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension ODEs)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (below type-eq-decl nil nat_types nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (rac const-decl "T" more_list_props structures)
    (rdc_rac formula-decl nil more_list_props structures)
    (TraceState_STATE_eta formula-decl nil TraceState_adt nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (append_null_left formula-decl nil more_list_props structures)
    (length_rdc formula-decl nil more_list_props structures)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_star_seq_switch_eq 0
  (trace_semantic_rel_bounded_star_seq_switch_eq-1 nil 3899561703
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (lemma "trace_semantic_rel_bounded_star_seq_switch_con")
          (("" (inst?)
            (("" (lemma "trace_semantic_rel_bounded_star_seq_switch")
              (("" (inst?)
                (("" (split 1)
                  (("1" (propax) nil nil) ("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (trace_semantic_rel_bounded_star_seq_switch_con formula-decl nil
     trace_bounded_star_semantics nil)
    (trace_semantic_rel_bounded_star_seq_switch formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (trace_semantic_rel_star_seq_switch_eq 0
  (trace_semantic_rel_star_seq_switch_eq-1 nil 3899561841
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1"
              (case "EXISTS(i:nat): trace_semantic_rel(SEQ(stm, BSTAR(stm,i)))(x!1)")
              (("1" (skeep)
                (("1"
                  (lemma
                   "trace_semantic_rel_bounded_star_seq_switch_eq")
                  (("1" (inst?)
                    (("1" (replace -1)
                      (("1" (hide -1 -3)
                        (("1" (expand "trace_semantic_rel")
                          (("1" (flatten)
                            (("1"
                              (lemma
                               "trace_semantic_rel_star_bounded_star_con")
                              (("1"
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "trace1" "trace2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "trace_semantic_rel")
                  (("2" (split -1)
                    (("1" (skeep)
                      (("1"
                        (lemma "trace_semantic_rel_star_bounded_star")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 1 "trace1" "trace2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 1 "0")
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2"
              (case "EXISTS(i:nat): trace_semantic_rel(SEQ(BSTAR(stm,i),stm))(x!1)")
              (("1" (skeep)
                (("1"
                  (lemma
                   "trace_semantic_rel_bounded_star_seq_switch_eq")
                  (("1" (inst?)
                    (("1" (replace -1 -2 rl)
                      (("1" (hide -1 -3)
                        (("1" (expand "trace_semantic_rel")
                          (("1" (flatten)
                            (("1"
                              (lemma
                               "trace_semantic_rel_star_bounded_star_con")
                              (("1"
                                (split -2)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst 1 "trace1" "trace2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (expand "trace_semantic_rel")
                  (("2" (split -1)
                    (("1" (skeep)
                      (("1"
                        (lemma "trace_semantic_rel_star_bounded_star")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "i")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 1 "trace1" "trace2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma "trace_semantic_rel_star_bounded_star")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "i")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel_bounded_star_seq_switch_eq formula-decl nil
     trace_bounded_star_semantics nil)
    (trace_semantic_rel_star_bounded_star_con formula-decl nil
     trace_bounded_star_semantics nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil))
   shostak))
 (trace_semantic_rel_bounded_star_iter_TCC1 0
  (trace_semantic_rel_bounded_star_iter_TCC2-1 nil 3899900278
   ("" (skeep)
    (("" (skeep)
      (("" (replace -4) (("" (use "wf_append_finite") nil nil)) nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (wf_append_finite formula-decl nil trace_semantics nil))
   nil
   (trace_semantic_rel_bounded_star_iter subtype
    "trace_bounded_star_semantics.trace" "Trace")))
 (trace_semantic_rel_bounded_star_iter 0
  (trace_semantic_rel_bounded_star_iter-1 nil 3899900289
   ("" (induct "i")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "BSTAR" 1)
        (("2" (expand "trace_semantic_rel" 1)
          (("2" (lemma "trace_semantic_rel_bounded_star_seq_switch_eq")
            (("2" (inst?)
              (("2" (replace -1)
                (("2" (hide -1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (expand "trace_semantic_rel" 1)
                        (("1" (flatten)
                          (("1" (inst 1 "trace1" "trace2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (split)
                        (("1" (flatten)
                          (("1" (expand "trace_semantic_rel" 1)
                            (("1" (flatten)
                              (("1"
                                (inst 1 "trace1" "trace2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (expand "trace_semantic_rel" 2)
                            (("2" (flatten)
                              (("2"
                                (inst 2 "trace1" "trace2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (expand "BSTAR" 1)
          (("3" (expand "trace_semantic_rel" 1)
            (("3" (postpone) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (postpone) nil nil) ("5" (postpone) nil nil)
     ("6" (postpone) nil nil))
    nil)
   nil shostak))
 (trace_semantic_rel_star_iter_TCC1 0
  (trace_semantic_rel_star_iter_TCC2-1 nil 3899900734
   ("" (skeep)
    (("" (skeep)
      (("" (replace -4)
        (("" (lemma "wf_append_finite") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((wf_append_finite formula-decl nil trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil))
   nil
   (trace_semantic_rel_star_iter subtype
    "trace_bounded_star_semantics.trace" "Trace")))
 (trace_semantic_rel_star_iter 0
  (trace_semantic_rel_star_iter-1 nil 3899900776
   ("" (skeep)
    (("" (expand "trace_semantic_rel" 1)
      (("" (lift-if)
        (("" (lemma "trace_semantic_rel_star_seq_switch_eq")
          (("" (inst?)
            (("" (replace -1)
              (("" (hide -1)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (hide 1)
                      (("1" (expand "trace_semantic_rel" 1)
                        (("1" (flatten)
                          (("1" (inst 1 "trace1" "trace2")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (hide 1)
                          (("1" (expand "trace_semantic_rel" 1)
                            (("1" (flatten)
                              (("1"
                                (inst 1 "trace1" "trace2")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide 2)
                          (("2" (expand "trace_semantic_rel" 2)
                            (("2" (flatten)
                              (("2"
                                (inst 2 "trace1" "trace2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (trace_semantic_rel_star_seq_switch_eq formula-decl nil
     trace_bounded_star_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil))
   shostak))
 (trace_semantic_rel_bounded_star_iter_con_TCC1 0
  (trace_semantic_rel_bounded_star_iter_con_TCC1-1 nil 3899903133
   ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel_bounded_star_iter_con subtype
    "(number_fields.-)(trace_bounded_star_semantics.i, 1)" "nat")))
 (trace_semantic_rel_bounded_star_iter_con 0
  (trace_semantic_rel_bounded_star_iter_con-1 nil 3899903147
   ("" (induct "i")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (assert)
          (("3" (expand "BSTAR" -3)
            (("3" (expand "trace_semantic_rel" -3)
              (("3" (assert)
                (("3" (case "j=0")
                  (("1" (assert)
                    (("1" (replace -1)
                      (("1" (assert)
                        (("1"
                          (lemma
                           "trace_semantic_rel_bounded_star_seq_switch_eq")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (expand "trace_semantic_rel" -4)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 2 "trace1" "trace2")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2"
                      (lemma
                       "trace_semantic_rel_bounded_star_seq_switch_eq")
                      (("2" (inst?)
                        (("2" (replace -1)
                          (("2" (expand "trace_semantic_rel" -4)
                            (("2" (skeep)
                              (("2"
                                (inst 3 "trace1" "trace2")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil)
     ("5" (skeep) (("5" (assert) (("5" (grind) nil nil)) nil)) nil)
     ("6" (grind) nil nil) ("7" (grind) nil nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (trace_semantic_rel_bounded_star_seq_switch_eq formula-decl nil
     trace_bounded_star_semantics nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append def-decl "list[T]" list_props nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)))

