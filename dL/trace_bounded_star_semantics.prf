(trace_bounded_star_semantics
 (trace_semantic_rel_bounded_star_TCC1 0
  (trace_semantic_rel_bounded_star_TCC1-1 nil 3898080626
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b)"
    "(orders[nat].well_founded?)")))
 (trace_semantic_rel_bounded_star_TCC2 0
  (trace_semantic_rel_bounded_star_TCC2-1 nil 3898080626
   ("" (well-founded-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star well-founded
    "lex2_generic[nat, HP_adt.HP].lt_lex2(LAMBDA (a, b: naturalnumbers.nat): reals.<(a, b), HP_adt.<<)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC3 0
  (trace_semantic_rel_bounded_star_TCC3-1 nil 3898080626
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC4 0
  (trace_semantic_rel_bounded_star_TCC4-1 nil 3898080626
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm2)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC5 0
  (trace_semantic_rel_bounded_star_TCC5-1 nil 3898080626
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "trace_bounded_star_semantics.tr1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (trace_semantic_rel_bounded_star_TCC6 0
  (trace_semantic_rel_bounded_star_TCC6-1 nil 3898080626
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC7 0
  (trace_semantic_rel_bounded_star_TCC9-1 nil 3898080626
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm1)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC8 0
  (trace_semantic_rel_bounded_star_TCC7-1 nil 3898080626
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star(trace_bounded_star_semantics.i)(trace_bounded_star_semantics.stm2)"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC9 0
  (trace_semantic_rel_bounded_star_TCC8-1 nil 3898080626
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "(number_fields.-)(trace_bounded_star_semantics.i, 1)" "nat")))
 (trace_semantic_rel_bounded_star_TCC10 0
  (trace_semantic_rel_bounded_star_TCC12-1 nil 3898083293
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star((number_fields.-)(trace_bounded_star_semantics.i, 1))(HP_adt.STAR(trace_bounded_star_semantics.stm))"
    "nil")))
 (trace_semantic_rel_bounded_star_TCC11 0
  (trace_semantic_rel_bounded_star_TCC10-1 nil 3898080626
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "trace_bounded_star_semantics.tr1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (trace_semantic_rel_bounded_star_TCC12 0
  (trace_semantic_rel_bounded_star_TCC12-1 nil 3898091614
   ("" (subtype-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star subtype
    "(number_fields.-)(trace_bounded_star_semantics.i, 1)" "nat")))
 (trace_semantic_rel_bounded_star_TCC13 0
  (trace_semantic_rel_bounded_star_TCC10-1 nil 3898083293
   ("" (termination-tcc) nil nil) nil nil
   (trace_semantic_rel_bounded_star termination
    "trace_bounded_star_semantics.trace_semantic_rel_bounded_star((number_fields.-)(trace_bounded_star_semantics.i, 1))(trace_bounded_star_semantics.stm)"
    "nil")))
 (trace_semantic_rel_bounded_star_inc 0
  (trace_semantic_rel_bounded_star_inc-1 nil 3898080909
   ("" (measure-induct+ "i + size(hp)" ("i" "hp"))
    (("" (name-replace "i" "x!1")
      (("" (name-replace "hp" "x!2")
        (("" (skeep 1)
          (("" (skeep 1)
            (("" (expand "trace_semantic_rel_bounded_star" -2)
              (("" (lift-if -2)
                (("" (split -)
                  (("1" (flatten)
                    (("1" (expand "trace_semantic_rel_bounded_star" +)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (skeep -1)
                              (("1"
                                (inst 1 "tr1" "tr2")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (inst -7 "i" "stm1(hp)")
                                      (("1"
                                        (inst -7 "tr1")
                                        (("1"
                                          (split -7)
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (inst -2 "j")
                                              (("1"
                                                (expand "i")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3"
                                            (expand "size" 1 2)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -7 "i" "stm2(hp)")
                                      (("2"
                                        (inst -7 "tr2")
                                        (("2"
                                          (split -7)
                                          (("1"
                                            (inst -1 "j")
                                            (("1"
                                              (typepred "j")
                                              (("1"
                                                (expand "i")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (flatten)
                                      (("3" (assert) nil nil))
                                      nil)
                                     ("4"
                                      (flatten)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "i" "stm1(hp)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "i")
                                              (("1"
                                                (typepred "j")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1"
                          (expand "trace_semantic_rel_bounded_star" +)
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (split)
                                (("1"
                                  (inst -3 "i" "stm1(hp)")
                                  (("1"
                                    (inst -3 "trace")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (inst -1 "j")
                                          (("1"
                                            (typepred "j")
                                            (("1"
                                              (expand "i")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand size 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -3 "i" "stm2(hp)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (split)
                                      (("1"
                                        (inst -1 "j")
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (split -)
                          (("1" (flatten)
                            (("1" (split -2)
                              (("1"
                                (expand
                                 "trace_semantic_rel_bounded_star"
                                 +)
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand
                                   "trace_semantic_rel_bounded_star"
                                   +)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split 4)
                                        (("1"
                                          (typepred "j")
                                          (("1"
                                            (expand "i")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (insteep)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -8
                                                     "i-1"
                                                     "STAR(stm(hp))")
                                                    (("1"
                                                      (inst -8 "tr2")
                                                      (("1"
                                                        (split -8)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "j-1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "i")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          (("3"
                                                            (case
                                                             "STAR(stm(hp)) = hp")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (apply-extensionality)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -4
                                                   "i-1"
                                                   "stm(hp)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst -4 "trace")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -4)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "j-1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "j")
                                                                (("1"
                                                                  (expand
                                                                   "i")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2"
                              (expand "trace_semantic_rel_bounded_star"
                                      4)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "nat" trace_bounded_star_semantics nil)
    (j skolem-const-decl "upfrom(x!1)" trace_bounded_star_semantics
     nil)
    (i skolem-const-decl "nat" trace_bounded_star_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trace_semantic_rel_implies_bounded 0
  (trace_semantic_rel_implies_bounded-1 nil 3898081557
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         "LAMBDA(hp:HP)(trace:Trace): EXISTS (i: nat): trace_semantic_rel_bounded_star(i)(hp)(trace)")
        (("" (split -)
          (("1" (inst?) (("1" (assert) nil nil)) nil)
           ("2" (hide-all-but 1)
            (("2" (skolem 1 ("prg" "tr"))
              (("2" (flatten)
                (("2" (split -)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "trace_semantic_rel_bounded_star")
                        (("1" (assert)
                          (("1" (expand "trace_semantic_rel")
                            (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (inst 1 "0")
                      (("2" (expand "trace_semantic_rel_bounded_star")
                        (("2" (assert)
                          (("2" (expand "trace_semantic_rel")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (inst 1 "0")
                      (("3" (expand "trace_semantic_rel_bounded_star")
                        (("3" (assert)
                          (("3" (expand "trace_semantic_rel")
                            (("3" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (inst 1 "0")
                      (("4"
                        (expand "trace_semantic_rel_bounded_star" 1)
                        (("4" (assert)
                          (("4" (expand "trace_semantic_rel")
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (flatten)
                    (("5" (expand "trace_semantic_rel_bounded_star" 1)
                      (("5" (assert)
                        (("5" (split -)
                          (("1" (skeep)
                            (("1" (skolem -2 "i1")
                              (("1"
                                (skolem -4 "i2")
                                (("1"
                                  (inst 1 "max(i1,i2)")
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst 1 "trace1" "trace2")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (lemma
                                             "trace_semantic_rel_bounded_star_inc")
                                            (("1"
                                              (inst
                                               -1
                                               "stm1(prg)"
                                               "trace1"
                                               "i1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "max(i1,i2)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "trace_semantic_rel_bounded_star_inc")
                                            (("2"
                                              (inst
                                               -1
                                               "stm2(prg)"
                                               "trace2"
                                               "i2")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "max(i1,i2)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (flatten)
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2"
                                (inst 1 "i")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (flatten)
                    (("6" (split -)
                      (("1" (flatten)
                        (("1" (skeep -)
                          (("1" (inst 1 "i")
                            (("1"
                              (expand "trace_semantic_rel_bounded_star"
                                      1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep -)
                          (("2" (inst 1 "i")
                            (("2"
                              (expand "trace_semantic_rel_bounded_star"
                                      1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (flatten)
                    (("7" (split -)
                      (("1" (inst 1 "0")
                        (("1"
                          (expand "trace_semantic_rel_bounded_star" 1)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (skeep*)
                        (("2"
                          (expand "trace_semantic_rel_bounded_star" 1)
                          (("2" (assert)
                            (("2" (inst 1 "i!1+1")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (case "STAR(stm(prg)) = prg")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (inst 2 "trace1" "trace2")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (apply-extensionality)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (skeep)
                          (("3"
                            (expand "trace_semantic_rel_bounded_star"
                                    1)
                            (("3" (assert)
                              (("3"
                                (inst 1 "i+1")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "finite_trace?")
                                      (("3"
                                        (flatten)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel_induction formula-decl nil trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (trace_semantic_rel_bounded_star_inc formula-decl nil
     trace_bounded_star_semantics nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (bounded_implies_trace_semantic_rel 0
  (bounded_implies_trace_semantic_rel-1 nil 3898088634
   ("" (measure-induct+ "i+size(hp)" ("i" "hp"))
    (("" (skeep)
      (("" (expand "trace_semantic_rel_bounded_star" -2)
        (("" (lift-if)
          (("" (split)
            (("1" (expand "trace_semantic_rel" 1)
              (("1" (flatten -1)
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (split -2)
                      (("1" (skeep)
                        (("1" (inst 1 "tr1" "tr2")
                          (("1" (assert)
                            (("1" (split 1)
                              (("1"
                                (inst -7 "x!1" "stm1(x!2)")
                                (("1"
                                  (inst -7 "tr1")
                                  (("1"
                                    (split -7)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -7 "x!1" "stm2(x!2)")
                                (("2"
                                  (inst -7 "tr2")
                                  (("2"
                                    (split -7)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3" (assert) nil nil))
                                nil)
                               ("4"
                                (flatten)
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "finite_trace?")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (inst -3 "x!1" "stm1(x!2)")
                                  (("2"
                                    (inst -3 "trace")
                                    (("2"
                                      (split -3)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2" (propax) nil nil)
                                       ("3"
                                        (expand "size" 1 2)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (flatten)
                  (("1" (hide 1)
                    (("1" (expand "trace_semantic_rel" 1)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (split)
                            (("1" (hide 2)
                              (("1"
                                (inst -3 "x!1" "stm1(x!2)")
                                (("1"
                                  (inst -3 "trace")
                                  (("1"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 1)
                              (("2"
                                (inst -3 "x!1" "stm2(x!2)")
                                (("2"
                                  (inst -3 "trace")
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil)
                                     ("3"
                                      (expand "size" 1 2)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (hide 1 2)
                      (("1" (expand "trace_semantic_rel" 1)
                        (("1" (flatten)
                          (("1" (hide 1 2 3 4 5 6)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split -2)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split -2)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "tr1" "tr2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "x!2=STAR(stm(x!2))")
                                              (("1"
                                                (inst
                                                 -9
                                                 "x!1 - 1"
                                                 "x!2")
                                                (("1"
                                                  (inst -9 "tr2")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (apply-extensionality)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "finite_trace?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -4
                                               "x!1-1"
                                               "stm(x!2)")
                                              (("1"
                                                (inst -4 "trace")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (HP_STAR_extensionality formula-decl nil HP_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "nat" trace_bounded_star_semantics nil)
    (last const-decl "T" more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel_bounded_star def-decl "bool"
     trace_bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (size def-decl "posnat" hp_expr nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (HP type-decl nil HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (trace_semantic_rel_bstar_reflexive 0
  (trace_semantic_rel_bstar_reflexive-1 nil 3898092346
   ("" (induct "i")
    (("1" (expand "BSTAR")
      (("1" (expand "trace_semantic_rel")
        (("1" (expand "DLBOOL")
          (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" 1)
          (("2" (expand "trace_semantic_rel" 1)
            (("2" (flatten) (("2" (inst?) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (nth def-decl "T" list_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar 0
  (trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar-1 nil
   3898094264
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel_bounded_star")
          (("1" (expand "trace_semantic_rel")
            (("1" (expand "DLBOOL")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "trace_semantic_rel_bounded_star" -2)
          (("2" (postpone) nil nil)) nil))
        nil))
      nil))
    nil)
   nil shostak))
 (trace_semantic_rel_star_bounded_star 0
  (trace_semantic_rel_star_bounded_star-1 nil 3890403706
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         "LAMBDA(hp:HP)(trace:Trace): EXISTS (i: nat): trace_semantic_rel(BSTAR(hp, i))(trace)")
        (("" (split -)
          (("1" (postpone) nil nil)
           ("2" (hide-all-but 1)
            (("2" (skolem 1 ("prg" "t"))
              (("2" (flatten)
                (("2" (split -)
                  (("1" (flatten)
                    (("1" (expand "BSTAR")
                      (("1" (inst 1 "1")
                        (("1" (assert)
                          (("1" (expand "trace_semantic_rel" 1)
                            (("1" (expand "BSTAR")
                              (("1"
                                (expand "trace_semantic_rel" 1)
                                (("1"
                                  (expand "trace_semantic_rel")
                                  (("1"
                                    (expand "DLBOOL")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst
                                             1
                                             "t"
                                             "(: (last(t)) :)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "append_null[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (propax)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (expand
                                                               "finite_trace?")
                                                              (("4"
                                                                (expand
                                                                 "last")
                                                                (("4"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (expand
                                                               "final_env")
                                                              (("5"
                                                                (expand
                                                                 "init_env")
                                                                (("5"
                                                                  (expand
                                                                   "last")
                                                                  (("5"
                                                                    (replace
                                                                     -3)
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "last")
                                              (("2"
                                                (replace -2)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (flatten)
                            (("1" (inst 1 "0")
                              (("1"
                                (expand "BSTAR")
                                (("1"
                                  (expand "trace_semantic_rel")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "DLBOOL")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (skeep)
                              (("2"
                                (replace -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "BSTAR")
                                    (("2"
                                      (inst 1 "1")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand
                                           "trace_semantic_rel"
                                           1)
                                          (("2"
                                            (expand "BSTAR")
                                            (("2"
                                              (expand
                                               "trace_semantic_rel")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (inst 1 "1")
                            (("3" (flatten)
                              (("3"
                                (skeep)
                                (("3"
                                  (replace -2)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "BSTAR")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand
                                           "trace_semantic_rel"
                                           1)
                                          (("3"
                                            (expand "BSTAR")
                                            (("3"
                                              (expand
                                               "trace_semantic_rel")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand "last")
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "trace_semantic_rel"
                                                       2)
                                                      (("3"
                                                        (inst 2 "fs")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (replace
                                                             -2)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst 2 "1")
                          (("2" (assert)
                            (("2" (expand "BSTAR")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "BSTAR")
                                  (("2"
                                    (expand "trace_semantic_rel")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "trace_semantic_rel")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand "last")
                                              (("2"
                                                (expand
                                                 "trace_semantic_rel"
                                                 3)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (inst 1 "1")
                      (("3" (expand "BSTAR")
                        (("3" (expand "trace_semantic_rel")
                          (("3" (expand "BSTAR")
                            (("3" (expand "trace_semantic_rel")
                              (("3"
                                (expand "DLBOOL")
                                (("3"
                                  (flatten)
                                  (("3"
                                    (expand "trace_semantic_rel")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (inst 1 "t" "(: (last(t)) :)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "append_null[TraceState]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       1
                                                       5)
                                                      (("1"
                                                        (expand
                                                         "finite_trace?")
                                                        (("1"
                                                          (expand
                                                           "last")
                                                          (("1"
                                                            (expand
                                                             "final_env")
                                                            (("1"
                                                              (expand
                                                               "init_env")
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (split)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil)
                                         ("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (flatten)
                    (("4" (split -2)
                      (("1" (flatten)
                        (("1" (inst 1 "0")
                          (("1" (expand "BSTAR")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "DLBOOL")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst 2 "1")
                          (("2" (expand "BSTAR")
                            (("2" (expand "trace_semantic_rel")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "BSTAR")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "last")
                                          (("2"
                                            (expand
                                             "trace_semantic_rel"
                                             3)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (flatten) (("5" (postpone) nil nil)) nil)
                   ("6" (flatten)
                    (("6" (split)
                      (("1" (flatten)
                        (("1" (skeep)
                          (("1" (inst 1 "i+1")
                            (("1" (expand "BSTAR" 1)
                              (("1"
                                (expand "trace_semantic_rel" 1)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (postpone) nil nil))
                      nil))
                    nil)
                   ("7" (flatten)
                    (("7" (split)
                      (("1" (flatten)
                        (("1" (inst 1 "0")
                          (("1" (expand "BSTAR")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "DLBOOL")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "nth")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep) (("2" (postpone) nil nil)) nil)
                       ("3" (flatten)
                        (("3" (skeep)
                          (("3" (inst 1 "i+1")
                            (("3" (expand "BSTAR" 1)
                              (("3"
                                (expand "trace_semantic_rel" 1)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "trace_semantic_rel" 1)
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (split)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (trace_semantic_rel_star_bounded_star_con 0
  (trace_semantic_rel_star_bounded_star_con-1 nil 3890405103
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "BSTAR")
        (("1" (expand "trace_semantic_rel")
          (("1" (assert)
            (("1" (expand "DLBOOL")
              (("1" (expand "nth")
                (("1" (flatten)
                  (("1" (assert) (("1" (postpone) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" -2)
          (("2" (expand "trace_semantic_rel" -2)
            (("2" (split)
              (("1" (expand "trace_semantic_rel" -1)
                (("1" (split)
                  (("1" (skeep)
                    (("1" (inst -6 "hp" "trace2")
                      (("1" (assert)
                        (("1" (expand "trace_semantic_rel" 1)
                          (("1" (flatten) (("1" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil)
               ("2" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

