(trace_semantics
 (wf_trace?_TCC1 0
  (wf_trace?_TCC1-1 nil 3888662962 ("" (assert) nil nil) nil nil
   (wf_trace? subtype "trace_semantics.i"
    "below[length[TraceState](trace)]")))
 (wf_append_TCC1 0
  (wf_append_TCC1-1 nil 3889864059
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (wf_append subtype "trace_semantics.trace1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (wf_append 0
  (wf_append-1 nil 3889824595
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (flatten)
            (("" (case "cdr(trace2) = null")
              (("1" (replace -1)
                (("1" (rewrite "append_null_right")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst -5 "i")
                        (("1" (typepred "i")
                          (("1" (replace -2)
                            (("1" (rewrite "append_null_right") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (grind) nil nil)
                 ("2" (lemma "nth_append[TraceState]")
                  (("2" (skeep)
                    (("2" (inst -1 "trace1" "cdr(trace2)" "i")
                      (("2" (split)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (replace -2)
                                (("1"
                                  (inst -6 "i")
                                  (("1"
                                    (case
                                     "i=length[TraceState](trace1) - 1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide 1 -1 -2)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (case
                                             "nth(trace1, length(trace1) - 1) = car(trace2)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (inst -4 "0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (typepred "trace1")
                                              (("3"
                                                (expand "wf_trace?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst -3 " i - length(trace1) +1")
                                  (("1"
                                    (expand "nth" -3)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (hide-all-but (1 -1))
                                        (("2"
                                          (rewrite "length_append")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "i")
                          (("2" (rewrite "length_append")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures))
   shostak))
 (finite_trace?_TCC1 0
  (finite_trace?_TCC1-1 nil 3791212029
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (finite_trace? subtype "trace_semantics.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (wf_append_finite 0
  (wf_append_finite-1 nil 3896947009
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (expand "finite_trace?")
            (("" (expand "last")
              (("" (flatten)
                (("" (split 3)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)
                   ("3" (skeep)
                    (("3" (lemma "nth_append[TraceState]")
                      (("3" (inst?)
                        (("3" (assert)
                          (("3" (lemma "length_append[TraceState]")
                            (("3" (inst?)
                              (("3"
                                (assert)
                                (("3"
                                  (lift-if)
                                  (("3"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (case "i = length(trace1)-1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (inst -7 "i")
                                            (("1" (assert) nil nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (replace -3)
                                            (("2"
                                              (inst
                                               -5
                                               "i - length(trace1)")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (nth_append formula-decl nil more_list_props structures))
   shostak))
 (init_env_TCC1 0
  (init_env_TCC1-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil))
   nil
   (init_env subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (final_env_TCC1 0
  (final_env_TCC1-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures))
   nil
   (final_env subtype
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state_diff?)")))
 (final_env_TCC2 0
  (final_env_TCC2-1 nil 3892812644 ("" (subtype-tcc) nil nil) nil nil
   (final_env subtype
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace))"
    "(interval_def.closed_interval?)")))
 (lastState_TCC1 0
  (lastState_TCC1-1 nil 3888662962
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "finite_trace?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil))
   nil
   (lastState subtype
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state?)")))
 (trace_semantic_rel_TCC1 0
  (trace_semantic_rel_TCC1-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC2 0
  (trace_semantic_rel_TCC2-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC3 0
  (trace_semantic_rel_TCC3-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC4 0
  (trace_semantic_rel_TCC5-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC5 0
  (trace_semantic_rel_TCC5-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC6 0
  (trace_semantic_rel_TCC8-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC7 0
  (trace_semantic_rel_TCC7-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (trace_semantic_rel_TCC8 0
  (trace_semantic_rel_TCC8-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC9 0
  (trace_semantic_rel_TCC12-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (HP type-decl nil HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC10 0
  (trace_semantic_rel_TCC6-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC11 0
  (trace_semantic_rel_TCC4-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC12 0
  (trace_semantic_rel_TCC13-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC13 0
  (trace_semantic_rel_TCC9-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC14 0
  (trace_semantic_rel_TCC10-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC15 0
  (trace_semantic_rel_TCC20-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC16 0
  (trace_semantic_rel_TCC16-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC17 0
  (trace_semantic_rel_TCC17-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC18 0
  (trace_semantic_rel_TCC21-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC19 0
  (trace_semantic_rel_TCC11-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.envi"
    "(TraceState_adt.state?)")))
 (trace_semantic_rel_TCC20 0
  (trace_semantic_rel_TCC17-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC21 0
  (trace_semantic_rel_TCC18-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC22 0
  (trace_semantic_rel_TCC23-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC23 0
  (trace_semantic_rel_TCC24-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (star_seq_semantic_equiv 0
  (star_seq_semantic_equiv-1 nil 3899213508
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "trace_semantic_rel")
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (split)
                (("1" (skeep) (("1" (postpone) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "trace_semantic_rel" -2)
                    (("2" (split -2)
                      (("1" (flatten)
                        (("1" (expand "last") (("1" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (expand "trace_semantic_rel" -1)
                        (("2" (assert)
                          (("2" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (postpone) nil nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (split 2)
                      (("1" (propax) nil nil)
                       ("2" (expand "trace_semantic_rel" 1)
                        (("2" (flatten)
                          (("2" (expand "trace_semantic_rel" 2)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (exists_trace_env 0
  (exists_trace_env-1 nil 3890857959
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (expand "trace_semantic_rel")
        (("1"
          (inst 1
           "(: STATE(env), STATE(assign_sub(ASSIGN1_var)(env)) :)")
          (("1" (assert)
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil)
               ("4" (skeep)
                (("4" (expand "assign_sub")
                  (("4" (use "assign_env_alt")
                    (("4" (flatten)
                      (("4" (typepred "i")
                        (("4" (inst -2 "i")
                          (("4" (assert)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (expand "nth" 1 1)
                                (("4"
                                  (replace -2)
                                  (("4"
                                    (expand "nth" 1 3)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (skeep)
                (("5" (typepred "varj")
                  (("5" (expand "nth")
                    (("5" (expand "nth")
                      (("5" (expand "assign_sub")
                        (("5" (use "assign_env_alt")
                          (("5" (flatten)
                            (("5" (hide -1)
                              (("5" (inst -1 "varj") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (grind) nil nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "trace_semantic_rel")
        (("2" (case "DIFF2_var(env)")
          (("1" (inst 1 "(: STATE(env) :)")
            (("1" (split)
              (("1" (flatten)
                (("1" (hide 2)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (hide 2)
                        (("2" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (inst 2 "(: STATE(env), ERROR :)")
            (("1" (split)
              (("1" (flatten)
                (("1" (hide 1) (("1" (grind) nil nil)) nil)) nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (expand "trace_semantic_rel")
        (("3" (case "TEST1_var(env)")
          (("1" (inst 1 "(: STATE(env) :)")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (inst 2 "(: STATE(env), ERROR :)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (inst -1 "env")
        (("4" (skeep)
          (("4" (typepred "trace")
            (("4" (case "finite_trace?(trace)")
              (("1" (expand "trace_semantic_rel" 2)
                (("1" (name "envi" "final_env(trace)")
                  (("1" (inst -6 "envi")
                    (("1" (skeep) (("1" (postpone) nil nil)) nil)) nil)
                   ("2" (propax) nil nil))
                  nil))
                nil)
               ("2" (expand "trace_semantic_rel" 3)
                (("2" (expand "finite_trace?")
                  (("2" (inst 3 "trace")
                    (("2" (assert)
                      (("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand "trace_semantic_rel" 1)
        (("5" (inst -1 "env")
          (("5" (skeep)
            (("5" (inst 1 "trace") (("5" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep*) (("6" (postpone) nil nil)) nil)
     ("7" (skeep*)
      (("7" (expand "trace_semantic_rel" 1) (("7" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak))
 (trace_semantics_sound_assign_TCC1 0
  (trace_semantics_sound_assign_TCC1-1 nil 3888757381
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten)
          (("" (inst -2 "0")
            (("1" (expand "nth") (("1" (propax) nil nil)) nil)
             ("2" (case "length[TraceState](trace) = 1")
              (("1" (expand "finite_trace?")
                (("1" (case "car(trace) = last(trace)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (expand "last")
                    (("2" (replace -1)
                      (("2" (expand "nth") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (trace_semantics_sound_assign subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "(TraceState_adt.state?)")))
 (trace_semantics_sound_assign 0
  (trace_semantics_sound_assign-1 nil 3888928517
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (flatten)
          (("" (replace -2 :hide? true)
            (("" (replace -2 :hide? true)
              (("" (expand "trace_semantic_rel")
                (("" (flatten)
                  (("" (expand "semantic_rel")
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst -4 "i")
                          (("1" (expand "nth" -4 4)
                            (("1" (expand "last")
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -5 "i") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (bijective? const-decl "bool" functions nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_sound_diff 0
  (trace_semantics_sound_diff-1 nil 3888929079
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "trace_semantic_rel")
        (("" (flatten)
          (("" (split)
            (("1" (expand "semantic_rel_diff")
              (("1" (flatten)
                (("1" (split)
                  (("1" (expand "init_env")
                    (("1" (expand "final_env")
                      (("1" (expand "last")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep*)
                      (("2" (inst 2 "D(nth(trace, 0))")
                        (("2" (expand "final_env")
                          (("2" (expand "init_env")
                            (("2" (expand "last")
                              (("2"
                                (replace -2)
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       2
                                       "max_ci(D(nth(trace, 0)))")
                                      (("1"
                                        (inst 2 "fs")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (typepred "env")
                                                      (("1"
                                                        (expand
                                                         "init_env")
                                                        (("1"
                                                          (inst -4 "t")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "env_at_t(odes, fs, s0(car(trace)))(t)")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "env")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "fs")
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "db_max")
                                        (("2"
                                          (typepred
                                           "D(nth[TraceState](trace, 0))")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (expand
                                                     "closed_interval")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "ci_ci")
                                        (("3"
                                          (typepred
                                           "D(nth[TraceState](trace, 0))")
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (typepred "trace")
                      (("3" (expand "finite_trace?")
                        (("3" (expand "last") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (typepred "trace")
                (("2" (expand "finite_trace?")
                  (("2" (assert)
                    (("2" (expand "last") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (env_at_t? const-decl "bool" hp_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_sound_any 0
  (trace_semantics_sound_any-1 nil 3888932158
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "semantic_rel")
                (("" (expand "trace_semantic_rel")
                  (("" (flatten)
                    (("" (assert)
                      (("" (split)
                        (("1" (skeep)
                          (("1" (inst 1 "r") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (insteep) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (bijective? const-decl "bool" functions nil)
    (HP type-decl nil HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ANY adt-constructor-decl "[[nat, [real -> BoolExpr]] -> (any?)]"
     HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (trace_semantics_sound_test 0
  (trace_semantics_sound_test-1 nil 3888936840
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "trace_semantic_rel")
                (("" (expand "semantic_rel")
                  (("" (assert)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (expand "nth")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (typepred "trace")
                          (("2" (expand "finite_trace?")
                            (("2" (expand "wf_trace?")
                              (("2"
                                (flatten)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (typepred "trace")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (bijective? const-decl "bool" functions nil)
    (HP type-decl nil HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (trace_semantics_sound_seq 0
  (trace_semantics_sound_seq-1 nil 3888938572
   ("" (skeep)
    (("" (skeep)
      (("" (skoletin)
        (("" (skoletin)
          (("" (replace -1 :hide? t)
            (("" (replace -1 :hide? t)
              (("" (flatten)
                (("" (expand "semantic_rel" 1)
                  (("" (expand "trace_semantic_rel" -1)
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst -7 "trace1")
                          (("1" (beta)
                            (("1" (inst -8 "trace2")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "state(last(trace1))")
                                  (("1"
                                    (use "car_append[TraceState]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -8)
                                        (("1"
                                          (replace -7)
                                          (("1"
                                            (use
                                             "last_append[TraceState]")
                                            (("1"
                                              (use
                                               "last_cdr[TraceState]")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "trace2")
                                                (("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "cdr(trace2)=null")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (use
                                                               "append_null_right[TraceState]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (replace
                                                                     -11)
                                                                    (("1"
                                                                      (case
                                                                       "car(trace2) = last(trace2)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "last(trace2) = last(trace)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -3)
                                                (("2"
                                                  (case
                                                   "last(trace2)=car(trace2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "cdr(trace2)=null")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (use
                                                           "append_null_right[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "trace2")
                                                    (("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "trace2")
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (use "last_append[TraceState]")
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (use
                                               "last_cdr[TraceState]")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "cdr(trace2)=null")
                                                      (("1"
                                                        (case
                                                         "last(trace2)=car(trace2)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace1")
                            (("2" (expand "finite_trace?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but -1)
                          (("2" (typepred "trace")
                            (("2" (expand "finite_trace?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_cdr formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (HP type-decl nil HP_adt nil)
    (bijective? const-decl "bool" functions nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (trace_semantics_sound_union 0
  (trace_semantics_sound_union-1 nil 3888956698
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (expand "semantic_rel" 1)
          (("" (flatten)
            (("" (expand "trace_semantic_rel" -3)
              (("" (split)
                (("1" (inst -2 "trace") (("1" (assert) nil nil)) nil)
                 ("2" (inst -3 "trace") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (trace_semantics_sound_star 0
  (trace_semantics_sound_star-1 nil 3889002092
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         ("LAMBDA(hp:HP)(trace:Trace): state?(last(trace)) IMPLIES EXISTS (i: nat): semantic_rel_bounded_star(i)(hp )(state(car(trace)))(state(last(trace)))"))
        (("1" (split)
          (("1" (inst -1 "STAR(hp)" "trace")
            (("1" (assert)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "trace")
                    (("2" (expand "finite_trace?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split)
              (("1" (flatten)
                (("1" (inst 1 "0")
                  (("1" (expand "semantic_rel_bounded_star" 1)
                    (("1" (assert)
                      (("1" (expand "semantic_rel" 1)
                        (("1" (expand "last")
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (expand "nth")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst -6 "i")
                                    (("2"
                                      (expand "nth" -6 2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (inst 1 "0")
                    (("1" (expand "semantic_rel_bounded_star" 1)
                      (("1" (assert)
                        (("1" (expand "semantic_rel" 1)
                          (("1" (flatten)
                            (("1" (expand "semantic_rel_diff")
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (inst 1 "D")
                                      (("1"
                                        (inst 1 "r")
                                        (("1"
                                          (inst 1 "fs")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (case
                                                   "car(cdr(trace_1))= last(trace_1)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -5))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -4 "t" "env")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "fs")
                                            (("2"
                                              (expand "nth")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but (-6 -1 -3))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (inst 1 "0")
                  (("3" (expand "semantic_rel_bounded_star" 1)
                    (("3" (assert)
                      (("3" (expand "semantic_rel" 1)
                        (("3" (split)
                          (("1" (hide-all-but (1 -2 -5))
                            (("1" (skeep)
                              (("1"
                                (insteep)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -6 "i")
                              (("2"
                                (expand "nth")
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (expand "nth")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (split)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star" 1)
                        (("1" (assert)
                          (("1" (expand "semantic_rel" 1)
                            (("1" (expand "nth")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but (-1 -2 -5))
                      (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (flatten)
                    (("3" (hide-all-but (-1 -3 -5))
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (flatten)
                (("5" (split)
                  (("1" (skeep*)
                    (("1" (assert)
                      (("1" (skolem -3 "i1")
                        (("1" (split)
                          (("1" (skolem -1 "i2")
                            (("1" (inst 1 "i1+i2")
                              (("1"
                                (expand "semantic_rel_bounded_star" 1)
                                (("1"
                                  (inst 1 "state(last(trace1))")
                                  (("1"
                                    (split)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (rewrite
                                         "car_append[TraceState]")
                                        (("1"
                                          (lemma
                                           "semantic_rel_bounded_star_inc")
                                          (("1"
                                            (inst
                                             -1
                                             "stm1(hp_1 )"
                                             "state(car(trace1))"
                                             "state(last(trace1))"
                                             "i1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "i1+i2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2)
                                      (("2"
                                        (replace -8)
                                        (("2"
                                          (lemma
                                           "semantic_rel_bounded_star_inc")
                                          (("2"
                                            (inst
                                             -1
                                             "stm2(hp_1 )"
                                             "state(car(trace2))"
                                             "state(last(trace2))"
                                             "i2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "i1+i2")
                                                (("2"
                                                  (case
                                                   "last(trace2) = last(append(trace1, cdr(trace2)))")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "cdr(trace2)=null")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right")
                                                        (("1"
                                                          (replace -10)
                                                          (("1"
                                                            (case
                                                             "last(trace2) = car(trace2)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -1))
                                                              (("2"
                                                                (typepred
                                                                 "trace2")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "last_append")
                                                      (("2"
                                                        (rewrite
                                                         "last_cdr")
                                                        (("2"
                                                          (typepred
                                                           "trace2")
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1 2))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "last(trace2)=car(trace2)")
                            (("1" (assert) nil nil)
                             ("2" (case "cdr(trace2) = null")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (typepred "trace2")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (rewrite "last_append[TraceState]")
                                  (("2"
                                    (use "last_cdr[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "trace2")
                                      (("2"
                                        (expand "wf_trace?")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (flatten)
                (("6" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 1 "i")
                          (("1" (expand "semantic_rel_bounded_star" 1)
                            (("1" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "i")
                          (("2" (expand "semantic_rel_bounded_star" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (flatten)
                (("7" (split)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star" 1)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (assert)
                      (("2" (skolem -3 "i1")
                        (("2" (case "cdr(trace2)=null")
                          (("1" (replace -1)
                            (("1" (rewrite "append_null_right")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (case "car(trace2)=last(trace2)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -7 "i2")
                                          (("1"
                                            (inst 1 "i2 + 1")
                                            (("1"
                                              (expand
                                               "semantic_rel_bounded_star"
                                               1)
                                              (("1"
                                                (inst
                                                 1
                                                 "state(last(trace1))")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "bounded_implies_semantic_rel")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -10)
                                                    (("2"
                                                      (use
                                                       "HP_STAR_eta")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (typepred "trace2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "trace2")
                                      (("3"
                                        (expand "wf_trace?")
                                        (("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -5 "i2")
                                    (("1"
                                      (inst 2 "i2+1")
                                      (("1"
                                        (expand
                                         "semantic_rel_bounded_star"
                                         2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (inst
                                               2
                                               "state(last(trace1))")
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (use
                                                   "bounded_implies_semantic_rel")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "car_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -8 :dir rl)
                                                  (("2"
                                                    (use "HP_STAR_eta")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "trace2")
                                  (("2"
                                    (expand "wf_trace?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "trace!1")
            (("2" (expand "wf_trace?")
              (("2" (flatten)
                (("2" (case "car(trace!1) = last(trace!1)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (inst -2 "0")
                    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                     ("2" (hide-all-but (-1 1 2))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "trace!1")
            (("3" (expand "wf_trace?") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "trace!1")
            (("4" (expand "wf_trace?") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assigns adt-accessor-decl "[(assign?) -> Assigns]" HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (anyvar adt-accessor-decl "[(any?) -> nat]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (semantic_rel_bounded_star_inc formula-decl nil
     bounded_star_semantics nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (HP_STAR_eta formula-decl nil HP_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (trace_semantics_sound 0
  (trace_semantics_sound-1 nil 3791033719
   ("" (induct "hp")
    (("1" (grind) nil nil)
     ("2" (use "trace_semantics_sound_assign")
      (("2" (beta) (("2" (grind) nil nil)) nil)) nil)
     ("3" (use "trace_semantics_sound_diff") (("3" (grind) nil nil))
      nil)
     ("4" (use "trace_semantics_sound_test") (("4" (grind) nil nil))
      nil)
     ("5" (use "trace_semantics_sound_seq") (("5" (grind) nil nil))
      nil)
     ("6" (use "trace_semantics_sound_union") (("6" (grind) nil nil))
      nil)
     ("7" (use "trace_semantics_sound_star")
      (("7" (skeep*)
        (("7" (inst -1 "STAR1_var")
          (("7" (split)
            (("1" (inst -2 "trace")
              (("1" (inst -1 "trace")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (use "bounded_implies_semantic_rel")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (use "trace_semantics_sound_any")
      (("8" (skeep*)
        (("8" (inst -1 "trace" "ANY1_var" "ANY2_var")
          (("8" (beta) (("8" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("9" (skeep)
      (("9" (typepred "trace")
        (("9" (expand "finite_trace?") (("9" (propax) nil nil)) nil))
        nil))
      nil)
     ("10" (skeep)
      (("10" (typepred "trace")
        (("10" (expand "wf_trace?")
          (("10" (flatten) (("10" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (typepred "trace")
        (("11" (expand "wf_trace?")
          (("11" (flatten)
            (("11" (inst -2 "0")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (HP_induction formula-decl nil HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (trace_semantics_complete_assign 0
  (trace_semantics_complete_assign-1 nil 3888957866
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil)
         ("2" (assert) (("2" (grind) nil nil)) nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (flatten)
              (("3" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (skeep) (("4" (grind) nil nil)) nil)
                 ("5" (skeep) (("5" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (last const-decl "T" more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_diff 0
  (trace_semantics_complete_diff-1 nil 3889102892
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil)
         ("2" (expand "last")
          (("2" (expand "length")
            (("2" (expand "length")
              (("2" (expand "nth")
                (("2" (expand "length")
                  (("2" (expand "nth") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (flatten)
              (("3" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (skeep)
                      (("3" (inst 1 "D") (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_any 0
  (trace_semantics_complete_any-1 nil 3889351265
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil) ("2" (grind) nil nil)
         ("3" (expand "semantic_rel")
          (("3" (flatten)
            (("3" (expand "trace_semantic_rel")
              (("3" (expand "length")
                (("3" (expand "length")
                  (("3" (expand "length")
                    (("3" (split)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (skeep)
                        (("3" (inst 1 "r")
                          (("3" (split)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "nth")
                              (("2"
                                (expand "nth")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (skeep)
                          (("4" (inst -3 "i") (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   shostak))
 (trace_semantics_complete_test 0
  (trace_semantics_complete_test-1 nil 3889519796
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (flatten)
        (("" (inst 1 "(:STATE(envi):)")
          (("1" (assert)
            (("1" (expand "last")
              (("1" (expand "length")
                (("1" (expand "length")
                  (("1" (expand "nth")
                    (("1" (expand "trace_semantic_rel")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide 2 3)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures))
   shostak))
 (trace_semantics_complete_seq 0
  (trace_semantics_complete_seq-1 nil 3791545264
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (skeep -3)
        (("" (inst -1 "envi" "env")
          (("" (inst -2 "env" "envo")
            (("" (assert)
              (("" (skolem -1 "trace1")
                (("" (skolem -2 "trace2")
                  (("" (inst 1 "append(trace1, cdr(trace2))")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (replace -1)
                          (("1" (lemma "car_append[TraceState]")
                            (("1" (inst -1 "cdr(trace2)" "trace1")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "cdr(trace2)=null")
                          (("1" (replace -1)
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (inst -1 "trace1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -7)
                                    (("1"
                                      (case "last(trace2)=car(trace2)")
                                      (("1"
                                        (replace -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "last")
                                        (("2"
                                          (case "length(trace2)=1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "trace2")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -5)
                            (("2" (use "last_append[TraceState]")
                              (("1"
                                (replace -1)
                                (("1"
                                  (use "last_cdr[TraceState]")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "trace2")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "trace_semantic_rel" 1)
                          (("3" (flatten)
                            (("3" (inst 1 "trace1" "trace2")
                              (("3"
                                (assert)
                                (("3"
                                  (typepred "trace1")
                                  (("3"
                                    (typepred "trace2")
                                    (("3"
                                      (expand "finite_trace?")
                                      (("3"
                                        (typepred "trace2")
                                        (("3"
                                          (expand "wf_trace?")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst -2 "0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "trace1")
                      (("2" (typepred "trace2")
                        (("2" (expand "wf_trace?")
                          (("2" (flatten)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "i")
                                  (("2"
                                    (case "i < length(trace1)")
                                    (("1"
                                      (inst -7 "i")
                                      (("1"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "last")
                                        (("2"
                                          (rewrite
                                           "nth_append[TraceState]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "i = length[TraceState](trace1) - 1")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (replace -10)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       -3
                                       "i - length(trace1) + 1")
                                      (("1"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "i = length[TraceState](trace1) + length[TraceState](trace2) -2")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (hide-all-but
                                                   (-4 3 -3))
                                                  (("1"
                                                    (rewrite
                                                     "nth_append[TraceState]")
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "length_append[TraceState]")
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2"
                                                (expand "length" 2 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (use
                                     "append_null_right[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use "last_cdr[TraceState]")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (nth_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last const-decl "T" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil))
   nil))
 (trace_semantics_complete_union 0
  (trace_semantics_complete_union-1 nil 3889103604
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (split)
        (("1" (inst -2 "envi" "envo")
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst 1 "trace")
                (("1" (assert)
                  (("1" (expand "trace_semantic_rel" 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -3 "envi" "envo")
          (("2" (assert)
            (("2" (skeep)
              (("2" (inst 1 "trace")
                (("2" (assert)
                  (("2" (expand "trace_semantic_rel" 1)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   shostak))
 (trace_semantics_complete_star 0
  (trace_semantics_complete_star-1 nil 3889783976
   ("" (skeep)
    (("" (induct "i")
      (("1" (skeep)
        (("1" (expand "semantic_rel_bounded_star")
          (("1" (inst 1 "(:STATE(envi):)")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (expand "trace_semantic_rel" +)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (expand "semantic_rel_bounded_star" -2)
          (("2" (split -2)
            (("1" (inst 1 "(:STATE(envi):)")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (expand "trace_semantic_rel" 1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst -3 "env" "envo")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -6 "envi" "env")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "append(trace!1,cdr(trace))")
                            (("1" (split)
                              (("1" (rewrite "car_append") nil nil)
                               ("2"
                                (case "cdr(trace)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null_right")
                                    (("1"
                                      (case "env = envo")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (replace -5)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (typepred "trace")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "last_append")
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "last_cdr")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "trace_semantic_rel" 1)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst 2 "trace!1" "trace")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "trace")
                                        (("3"
                                          (hide 1 3)
                                          (("3"
                                            (typepred "trace!1")
                                            (("3"
                                              (expand "finite_trace?")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide-all-but
                                                   (-3 -4 1))
                                                  (("3"
                                                    (expand
                                                     "wf_trace?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst -2 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "length(trace)>1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "car(trace)=last(trace)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (use "wf_append")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (use
                                       "TraceState_STATE_extensionality")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "trace!1")
                                (("2"
                                  (typepred "trace")
                                  (("2"
                                    (hide-all-but (-1 -2 -3 -4 1))
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (case "cdr(trace)=null")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (rewrite
                                             "append_null_right")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "last_append")
                                          (("2"
                                            (rewrite "last_cdr")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep*)
        (("3" (typepred "trace")
          (("3" (expand "finite_trace?") (("3" (propax) nil nil)) nil))
          nil))
        nil)
       ("4" (skeep*)
        (("4" (typepred "trace")
          (("4" (expand "wf_trace?")
            (("4" (flatten) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (skeep*)
        (("5" (typepred "trace")
          (("5" (expand "wf_trace?")
            (("5" (flatten)
              (("5" (inst -2 "0")
                (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (last const-decl "T" more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (TraceState_STATE_extensionality formula-decl nil TraceState_adt
     nil)
    (car_append formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (trace_semantics_complete 0
  (trace_semantics_complete-4 "" 3791650339
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (use "trace_semantics_complete_assign")
        (("1" (grind) nil nil)) nil))
      nil)
     ("2" (use "trace_semantics_complete_diff") (("2" (grind) nil nil))
      nil)
     ("3" (use "trace_semantics_complete_test") (("3" (grind) nil nil))
      nil)
     ("4" (use "trace_semantics_complete_seq") nil nil)
     ("5" (use "trace_semantics_complete_union") nil nil)
     ("6" (use "trace_semantics_complete_star")
      (("6" (skeep*)
        (("6" (inst -1 "STAR1_var")
          (("6" (split)
            (("1" (hide -2)
              (("1" (use "semantic_rel_implies_bounded")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 "envi" "envo" "i")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (use "trace_semantics_complete_any")
      (("7" (skeep*)
        (("7" (inst -1 "envi" "envo" "ANY1_var" "ANY2_var")
          (("7" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (skeep*)
      (("8" (typepred "trace")
        (("8" (expand "finite_trace?") (("8" (propax) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep*)
      (("9" (typepred "trace")
        (("9" (expand "wf_trace?")
          (("9" (flatten) (("9" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("10" (skeep*)
      (("10" (typepred "trace")
        (("10" (expand "wf_trace?")
          (("10" (flatten)
            (("10" (inst -2 "0")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_implies_bounded formula-decl nil
     bounded_star_semantics nil)
    (ODEs type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (HP_induction formula-decl nil HP_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak)
  (trace_semantics_complete-3 "" 3791309500
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil) ("4" (grind) nil)
                     ("5" (grind) nil)))))))))))))
         ("2" (expand "wf_trace?") (("2" (grind) nil)))))))
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (propax) nil)))))))))
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil)))))))
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil)))))))))))
                                 ("2"
                                  (grind)
                                  nil)))))))))))))))))))))))))
         ("2" (grind) nil)))))
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (flatten) (("5" (grind) nil)))
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))))))))
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil) ("2" (grind) nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil)))))))
                                 ("2" (assert) nil)))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("4" (rewrite "car_append[TraceState]") nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil)))))))))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil)
                                   ("2" (propax) nil)
                                   ("3" (propax) nil)
                                   ("4" (propax) nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil)))))))))))))))
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil)))
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil)))))))
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil)))
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil)))))))
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))))))))))))))
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))))))))))
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (grind) nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))
           ("2" (skip) nil)))))))
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (grind) nil) ("5" (grind) nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil) ("2" (grind) nil)))))
                     ("5" (skeep 1)
                      (("5" (inst -3 "i")
                        (("5" (grind) nil)))))))))))))
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (trace_semantics_complete-2 "" 3791309348
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (case "envi=envo")
        (("1" (inst 1 "(: STATE(envi) :)")
          (("1" (hide -2)
            (("1" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) (("3" (grind) nil nil)) nil)
               ("4" (assert) nil nil) ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (use "star_gen_seq_io")
          (("1" (assert)
            (("1" (skeep -1)
              (("1" (use "trace_semantics_complete_gen_seq")
                (("1" (split -1)
                  (("1" (inst -1 "envi" "envo" "i")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep 3)
                          (("1" (assert)
                            (("1" (use "star_gen_seq_trace")
                              (("1"
                                (assert)
                                (("1" (inst 1 "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures))
   shostak)
  (trace_semantics_complete-1 nil 3791034133
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (skeep)
            (("2" (inst -3 "envi" "envo")
              (("2" (expand "semantic_rel" -2)
                (("2" (split -2)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "trace")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (expand "trace_semantic_rel" 1)
                              (("6"
                                (flatten)
                                (("6" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

