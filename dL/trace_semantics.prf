(trace_semantics
 (wf_trace?_TCC1 0
  (wf_trace?_TCC1-1 nil 3888662962 ("" (assert) nil nil) nil nil
   (wf_trace? subtype "trace_semantics.i"
    "below[length[TraceState](trace)]")))
 (wf_append_TCC1 0
  (wf_append_TCC1-1 nil 3889864059
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (wf_append subtype "trace_semantics.trace1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (wf_append 0
  (wf_append-1 nil 3889824595
   ("" (skeep)
    (("" (typepred "trace1")
      (("" (typepred "trace2")
        (("" (expand "wf_trace?")
          (("" (flatten)
            (("" (case "cdr(trace2) = null")
              (("1" (replace -1)
                (("1" (rewrite "append_null_right")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (inst -5 "i")
                        (("1" (typepred "i")
                          (("1" (replace -2)
                            (("1" (rewrite "append_null_right") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (grind) nil nil)
                 ("2" (lemma "nth_append[TraceState]")
                  (("2" (skeep)
                    (("2" (inst -1 "trace1" "cdr(trace2)" "i")
                      (("2" (split)
                        (("1" (lift-if)
                          (("1" (split)
                            (("1" (flatten)
                              (("1"
                                (replace -2)
                                (("1"
                                  (inst -6 "i")
                                  (("1"
                                    (case
                                     "i=length[TraceState](trace1) - 1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide 1 -1 -2)
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (case
                                             "nth(trace1, length(trace1) - 1) = car(trace2)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (inst -4 "0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3"
                                              (typepred "trace1")
                                              (("3"
                                                (expand "wf_trace?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (replace -1)
                                (("2"
                                  (inst -3 " i - length(trace1) +1")
                                  (("1"
                                    (expand "nth" -3)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (hide-all-but (1 -1))
                                        (("2"
                                          (rewrite "length_append")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "i")
                          (("2" (rewrite "length_append")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (append_null_right formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (last const-decl "T" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (finite_trace?_TCC1 0
  (finite_trace?_TCC1-1 nil 3791212029
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (finite_trace? subtype "trace_semantics.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (init_env_TCC1 0
  (init_env_TCC1-1 nil 3896265592 ("" (subtype-tcc) nil nil) nil nil
   (init_env subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (final_env_TCC1 0
  (final_env_TCC1-1 nil 3892812644 ("" (subtype-tcc) nil nil) nil nil
   (final_env subtype
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state_diff?)")))
 (final_env_TCC2 0
  (final_env_TCC2-1 nil 3892812644 ("" (subtype-tcc) nil nil) nil nil
   (final_env subtype
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace))"
    "(interval_def.closed_interval?)")))
 (final_env_TCC3 0
  (final_env_TCC3-1 nil 3896272102 ("" (subtype-tcc) nil nil) nil nil
   (final_env subtype
    "more_ci_props.max_ci(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)))"
    "(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)))")))
 (lastState_TCC1 0
  (lastState_TCC1-1 nil 3888662962
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "finite_trace?") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (lastState subtype
    "more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace)"
    "(TraceState_adt.state?)")))
 (trace_semantic_rel_TCC1 0
  (trace_semantic_rel_TCC1-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC2 0
  (trace_semantic_rel_TCC2-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC3 0
  (trace_semantic_rel_TCC3-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC4 0
  (trace_semantic_rel_TCC5-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC5 0
  (trace_semantic_rel_TCC5-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC6 0
  (trace_semantic_rel_TCC8-1 nil 3790681048 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC7 0
  (trace_semantic_rel_TCC7-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (trace_semantic_rel_TCC8 0
  (trace_semantic_rel_TCC8-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.env"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC9 0
  (trace_semantic_rel_TCC12-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (HP type-decl nil HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC10 0
  (trace_semantic_rel_TCC6-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC11 0
  (trace_semantic_rel_TCC4-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC12 0
  (trace_semantic_rel_TCC13-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC13 0
  (trace_semantic_rel_TCC9-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC14 0
  (trace_semantic_rel_TCC10-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC15 0
  (trace_semantic_rel_TCC20-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC16 0
  (trace_semantic_rel_TCC16-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (hp const-decl "bool" interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC17 0
  (trace_semantic_rel_TCC17-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC18 0
  (trace_semantic_rel_TCC18-1 nil 3790683845 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC19 0
  (trace_semantic_rel_TCC17-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC20 0
  (trace_semantic_rel_TCC21-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC21 0
  (trace_semantic_rel_TCC11-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.envi"
    "(TraceState_adt.state?)")))
 (trace_semantic_rel_TCC22 0
  (trace_semantic_rel_TCC21-1 nil 3889790696 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC23 0
  (trace_semantic_rel_TCC18-1 nil 3888662962 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC24 0
  (trace_semantic_rel_TCC22-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1))"
    "(interval_def.closed_interval?)")))
 (trace_semantic_rel_TCC25 0
  (trace_semantic_rel_TCC25-1 nil 3896272102 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype
    "more_ci_props.max_ci(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1)))"
    "(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1)))")))
 (trace_semantic_rel_TCC26 0
  (trace_semantic_rel_TCC23-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC27 0
  (trace_semantic_rel_TCC26-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace2)"
    "{x: TraceState_adt.TraceState | booleans.OR(TraceState_adt.inf_diff?(x), TraceState_adt.state_diff?(x))}")))
 (trace_semantic_rel_TCC28 0
  (trace_semantic_rel_TCC24-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC29 0
  (trace_semantic_rel_TCC28-1 nil 3896265592 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC30 0
  (trace_semantic_rel_TCC25-1 nil 3892812644 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype
    "TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1))"
    "(interval_def.closed_interval?)")))
 (trace_semantic_rel_TCC31 0
  (trace_semantic_rel_TCC31-1 nil 3896272102 ("" (subtype-tcc) nil nil)
   nil nil
   (trace_semantic_rel subtype
    "more_ci_props.max_ci(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1)))"
    "(TraceState_adt.D(more_list_props[TraceState_adt.TraceState].last(trace_semantics.trace1)))")))
 (exists_trace_env 0
  (exists_trace_env-1 nil 3890857959
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (expand "trace_semantic_rel")
        (("1"
          (inst 1
           "(: STATE(env), STATE(assign_sub(ASSIGN1_var)(env)) :)")
          (("1" (assert)
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil)
               ("4" (skeep)
                (("4" (expand "assign_sub")
                  (("4" (use "assign_env_alt")
                    (("4" (flatten)
                      (("4" (typepred "i")
                        (("4" (inst -2 "i")
                          (("4" (assert)
                            (("4" (expand "nth" 1 1)
                              (("4"
                                (expand "nth" 1 1)
                                (("4"
                                  (replace -2)
                                  (("4"
                                    (expand "nth" 1 3)
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("5" (skeep)
                (("5" (typepred "varj")
                  (("5" (expand "nth")
                    (("5" (expand "nth")
                      (("5" (expand "assign_sub")
                        (("5" (use "assign_env_alt")
                          (("5" (flatten)
                            (("5" (hide -1)
                              (("5" (inst -1 "varj") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (expand "trace_semantic_rel")
        (("2" (case "DIFF2_var(env)")
          (("1" (inst 1 "(: STATE(env), STATE(env) :)")
            (("1" (split)
              (("1" (flatten)
                (("1" (hide 2)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (hide 2)
                        (("2" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (inst 1 "hp(0)")
                            (("1" (expand "nth")
                              (("1"
                                (expand "nth")
                                (("1"
                                  (expand "semantic_rel_diff")
                                  (("1"
                                    (inst 1 "0")
                                    (("1"
                                      (inst
                                       1
                                       "fs_sol(hp(0),env, DIFF1_var)")
                                      (("1"
                                        (typepred
                                         "fs_sol(hp(0), env, DIFF1_var)")
                                        (("1"
                                          (expand "solution_odes_u?")
                                          (("1"
                                            (expand "solution_odes?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (typepred "env_1")
                                                    (("1"
                                                      (typepred "t")
                                                      (("1"
                                                        (expand
                                                         "hp"
                                                         -1)
                                                        (("1"
                                                          (case "t=0")
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (case
                                                               "env=env_1")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (expand
                                                                   "env_at_t?")
                                                                  (("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (decompose-equality)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (hide-all-but
                                                                           (1
                                                                            -5
                                                                            -3
                                                                            -2))
                                                                          (("2"
                                                                            (case
                                                                             "not_in_map(DIFF1_var)(x!1)")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "x!1")
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "not_in_map")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   :dir
                                                                                   rl)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "i")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -4
                                                                                       "i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (grind) nil nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (inst 2 "(: STATE(env), ERROR :)")
            (("1" (split)
              (("1" (flatten)
                (("1" (hide 2)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (flatten)
                      (("2" (hide 1)
                        (("2" (expand "nth")
                          (("2" (expand "nth") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (postpone) nil nil) ("4" (postpone) nil nil)
     ("5" (postpone) nil nil) ("6" (postpone) nil nil)
     ("7" (postpone) nil nil) ("8" (postpone) nil nil))
    nil)
   nil shostak))
 (trace_semantics_sound_assign_TCC1 0
  (trace_semantics_sound_assign_TCC1-1 nil 3888757381
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten)
          (("" (inst -2 "0")
            (("1" (expand "nth") (("1" (propax) nil nil)) nil)
             ("2" (case "length[TraceState](trace) = 1")
              (("1" (expand "finite_trace?")
                (("1" (case "car(trace) = last(trace)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (expand "last")
                    (("2" (replace -1)
                      (("2" (expand "nth") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   nil
   (trace_semantics_sound_assign subtype
    "list_adt[TraceState_adt.TraceState].car(trace_semantics.trace)"
    "(TraceState_adt.state?)")))
 (trace_semantics_sound_assign 0
  (trace_semantics_sound_assign-1 nil 3888928517
   ("" (skeep)
    (("" (skoletin)
      (("" (skoletin)
        (("" (flatten)
          (("" (replace -2 :hide? true)
            (("" (replace -2 :hide? true)
              (("" (expand "trace_semantic_rel")
                (("" (flatten)
                  (("" (expand "semantic_rel")
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst -4 "i")
                          (("1" (expand "nth" -4 4)
                            (("1" (expand "last")
                              (("1"
                                (replace -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -5 "i") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nth def-decl "T" list_props nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_sound_diff 0
  (trace_semantics_sound_diff-1 nil 3888929079
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (expand "trace_semantic_rel")
        (("" (flatten)
          (("" (split)
            (("1" (expand "semantic_rel_diff")
              (("1" (flatten)
                (("1" (split)
                  (("1" (expand "init_env")
                    (("1" (expand "final_env")
                      (("1" (expand "last")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (skeep*)
                      (("2" (inst 2 "D(nth(trace, 0))")
                        (("2" (expand "final_env")
                          (("2" (expand "init_env")
                            (("2" (expand "last")
                              (("2"
                                (replace -2)
                                (("2"
                                  (replace -4)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst
                                       2
                                       "max_ci(D(nth(trace, 0)))")
                                      (("1"
                                        (inst 2 "fs")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (typepred "env")
                                                      (("1"
                                                        (expand
                                                         "init_env")
                                                        (("1"
                                                          (inst -4 "t")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "env_at_t(odes, fs, s0(car(trace)))(t)")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "env")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "fs")
                                          (("2"
                                            (expand "init_env")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "db_max")
                                        (("2"
                                          (typepred
                                           "D(nth[TraceState](trace, 0))")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (replace -3)
                                                  (("2"
                                                    (expand
                                                     "closed_interval")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "ci_ci")
                                        (("3"
                                          (typepred
                                           "D(nth[TraceState](trace, 0))")
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (inst?)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (typepred "trace")
                      (("3" (expand "finite_trace?")
                        (("3" (expand "last") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (typepred "trace")
                (("2" (expand "finite_trace?")
                  (("2" (assert)
                    (("2" (expand "last") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (init_env const-decl "Environment" trace_semantics nil)
    (trace skolem-const-decl "FiniteTrace" trace_semantics nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (max_ci const-decl "{rr: real | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (odes skolem-const-decl "ODEs" trace_semantics nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (fs skolem-const-decl
     "(solution_odes_u?(D(nth(trace, 0)), odes, s0(nth(trace, 0))))"
     trace_semantics nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (below type-eq-decl nil nat_types nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_sound_any 0
  (trace_semantics_sound_any-1 nil 3888932158
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "semantic_rel")
                (("" (expand "trace_semantic_rel")
                  (("" (flatten)
                    (("" (assert)
                      (("" (split)
                        (("1" (skeep)
                          (("1" (inst 1 "r") (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (insteep) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ANY adt-constructor-decl "[[nat, [real -> BoolExpr]] -> (any?)]"
     HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_sound_test 0
  (trace_semantics_sound_test-1 nil 3888936840
   ("" (skeep*)
    (("" (skoletin)
      (("" (skoletin)
        (("" (replace -1 :hide? T)
          (("" (replace -1 :hide? T)
            (("" (flatten)
              (("" (expand "trace_semantic_rel")
                (("" (expand "semantic_rel")
                  (("" (assert)
                    (("" (split)
                      (("1" (flatten)
                        (("1" (expand "nth")
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (typepred "trace")
                          (("2" (expand "finite_trace?")
                            (("2" (expand "wf_trace?")
                              (("2"
                                (flatten)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (flatten)
                        (("3" (typepred "trace")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (nth def-decl "T" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_sound_seq 0
  (trace_semantics_sound_seq-1 nil 3888938572
   ("" (skeep)
    (("" (skeep)
      (("" (skoletin)
        (("" (skoletin)
          (("" (replace -1 :hide? t)
            (("" (replace -1 :hide? t)
              (("" (flatten)
                (("" (expand "semantic_rel" 1)
                  (("" (expand "trace_semantic_rel" -1)
                    (("" (split)
                      (("1" (skeep)
                        (("1" (inst -7 "trace1")
                          (("1" (beta)
                            (("1" (inst -8 "trace2")
                              (("1"
                                (assert)
                                (("1"
                                  (inst 1 "state(last(trace1))")
                                  (("1"
                                    (use "car_append[TraceState]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -8)
                                        (("1"
                                          (replace -7)
                                          (("1"
                                            (use
                                             "last_append[TraceState]")
                                            (("1"
                                              (use
                                               "last_cdr[TraceState]")
                                              (("1"
                                                (replace -4)
                                                (("1"
                                                  (replace -2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "trace2")
                                                (("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (case
                                                         "cdr(trace2)=null")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (use
                                                               "append_null_right[TraceState]")
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (replace
                                                                     -11)
                                                                    (("1"
                                                                      (case
                                                                       "car(trace2) = last(trace2)")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "last(trace2) = last(trace)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (replace -3)
                                                (("2"
                                                  (case
                                                   "last(trace2)=car(trace2)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (case
                                                       "cdr(trace2)=null")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (use
                                                           "append_null_right[TraceState]")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "trace2")
                                                    (("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "trace2")
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (use "last_append[TraceState]")
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (use
                                               "last_cdr[TraceState]")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "cdr(trace2)=null")
                                                      (("1"
                                                        (case
                                                         "last(trace2)=car(trace2)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "trace1")
                            (("2" (expand "finite_trace?")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but -1)
                          (("2" (typepred "trace")
                            (("2" (expand "finite_trace?")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last_cdr formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil))
   shostak))
 (trace_semantics_sound_union 0
  (trace_semantics_sound_union-1 nil 3888956698
   ("" (skeep*)
    (("" (beta)
      (("" (flatten)
        (("" (expand "semantic_rel" 1)
          (("" (flatten)
            (("" (expand "trace_semantic_rel" -3)
              (("" (split)
                (("1" (inst -2 "trace") (("1" (assert) nil nil)) nil)
                 ("2" (inst -3 "trace") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_sound_star 0
  (trace_semantics_sound_star-1 nil 3889002092
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         ("LAMBDA(hp:HP)(trace:Trace): state?(last(trace)) IMPLIES EXISTS (i: nat): semantic_rel_bounded_star(i)(hp )(state(car(trace)))(state(last(trace)))"))
        (("1" (split)
          (("1" (inst -1 "STAR(hp)" "trace")
            (("1" (assert)
              (("1" (split)
                (("1" (propax) nil nil)
                 ("2" (hide-all-but 1)
                  (("2" (typepred "trace")
                    (("2" (expand "finite_trace?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (split)
              (("1" (flatten)
                (("1" (inst 1 "0")
                  (("1" (expand "semantic_rel_bounded_star" 1)
                    (("1" (assert)
                      (("1" (expand "semantic_rel" 1)
                        (("1" (expand "last")
                          (("1" (replace -2)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (expand "nth")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (inst -6 "i")
                                    (("2"
                                      (expand "nth" -6 2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (inst 1 "0")
                    (("1" (expand "semantic_rel_bounded_star" 1)
                      (("1" (assert)
                        (("1" (expand "semantic_rel" 1)
                          (("1" (flatten)
                            (("1" (expand "semantic_rel_diff")
                              (("1"
                                (split)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (inst 1 "D")
                                      (("1"
                                        (inst 1 "r")
                                        (("1"
                                          (inst 1 "fs")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (case
                                                   "car(cdr(trace_1))= last(trace_1)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 -5))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "nth")
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -4 "t" "env")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "fs")
                                            (("2"
                                              (expand "nth")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but (-6 -1 -3))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("3" (flatten)
                (("3" (inst 1 "0")
                  (("3" (expand "semantic_rel_bounded_star" 1)
                    (("3" (assert)
                      (("3" (expand "semantic_rel" 1)
                        (("3" (split)
                          (("1" (hide-all-but (1 -2 -5))
                            (("1" (skeep)
                              (("1"
                                (insteep)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -6 "i")
                              (("2"
                                (expand "nth")
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -2)
                                      (("2"
                                        (expand "nth")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (flatten)
                (("4" (split)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star" 1)
                        (("1" (assert)
                          (("1" (expand "semantic_rel" 1)
                            (("1" (expand "nth")
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (hide-all-but (-1 -2 -5))
                      (("2" (grind) nil nil)) nil))
                    nil)
                   ("3" (flatten)
                    (("3" (hide-all-but (-1 -3 -5))
                      (("3" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("5" (flatten)
                (("5" (split)
                  (("1" (skeep*)
                    (("1" (assert)
                      (("1" (skolem -3 "i1")
                        (("1" (split)
                          (("1" (skolem -1 "i2")
                            (("1" (inst 1 "i1+i2")
                              (("1"
                                (expand "semantic_rel_bounded_star" 1)
                                (("1"
                                  (inst 1 "state(last(trace1))")
                                  (("1"
                                    (split)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (rewrite
                                         "car_append[TraceState]")
                                        (("1"
                                          (lemma
                                           "semantic_rel_bounded_star_inc")
                                          (("1"
                                            (inst
                                             -1
                                             "stm1(hp_1 )"
                                             "state(car(trace1))"
                                             "state(last(trace1))"
                                             "i1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "i1+i2")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -2)
                                      (("2"
                                        (replace -8)
                                        (("2"
                                          (lemma
                                           "semantic_rel_bounded_star_inc")
                                          (("2"
                                            (inst
                                             -1
                                             "stm2(hp_1 )"
                                             "state(car(trace2))"
                                             "state(last(trace2))"
                                             "i2")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (inst -1 "i1+i2")
                                                (("2"
                                                  (case
                                                   "last(trace2) = last(append(trace1, cdr(trace2)))")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (case
                                                     "cdr(trace2)=null")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right")
                                                        (("1"
                                                          (replace -10)
                                                          (("1"
                                                            (case
                                                             "last(trace2) = car(trace2)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 -1))
                                                              (("2"
                                                                (typepred
                                                                 "trace2")
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (rewrite
                                                       "last_append")
                                                      (("2"
                                                        (rewrite
                                                         "last_cdr")
                                                        (("2"
                                                          (typepred
                                                           "trace2")
                                                          (("2"
                                                            (hide-all-but
                                                             (-1 1 2))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "last(trace2)=car(trace2)")
                            (("1" (assert) nil nil)
                             ("2" (case "cdr(trace2) = null")
                              (("1"
                                (replace -1)
                                (("1"
                                  (hide-all-but (-1 1))
                                  (("1"
                                    (typepred "trace2")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1)
                                (("2"
                                  (rewrite "last_append[TraceState]")
                                  (("2"
                                    (use "last_cdr[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "trace2")
                                      (("2"
                                        (expand "wf_trace?")
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("6" (flatten)
                (("6" (split)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 1 "i")
                          (("1" (expand "semantic_rel_bounded_star" 1)
                            (("1" (flatten) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst 1 "i")
                          (("2" (expand "semantic_rel_bounded_star" 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("7" (flatten)
                (("7" (split)
                  (("1" (flatten)
                    (("1" (inst 1 "0")
                      (("1" (expand "semantic_rel_bounded_star" 1)
                        (("1" (assert) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (assert)
                      (("2" (skolem -3 "i1")
                        (("2" (case "cdr(trace2)=null")
                          (("1" (replace -1)
                            (("1" (rewrite "append_null_right")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (case "car(trace2)=last(trace2)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -7 "i2")
                                          (("1"
                                            (inst 1 "i2 + 1")
                                            (("1"
                                              (expand
                                               "semantic_rel_bounded_star"
                                               1)
                                              (("1"
                                                (inst
                                                 1
                                                 "state(last(trace1))")
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (use
                                                     "bounded_implies_semantic_rel")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -10)
                                                    (("2"
                                                      (use
                                                       "HP_STAR_eta")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (typepred "trace2")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "trace2")
                                      (("3"
                                        (expand "wf_trace?")
                                        (("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skolem -5 "i2")
                                    (("1"
                                      (inst 2 "i2+1")
                                      (("1"
                                        (expand
                                         "semantic_rel_bounded_star"
                                         2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide 2)
                                            (("1"
                                              (inst
                                               2
                                               "state(last(trace1))")
                                              (("1"
                                                (split 2)
                                                (("1"
                                                  (use
                                                   "bounded_implies_semantic_rel")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "car_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -8 :dir rl)
                                                  (("2"
                                                    (use "HP_STAR_eta")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "trace2")
                                  (("2"
                                    (expand "wf_trace?")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten) (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "trace!1")
            (("2" (expand "wf_trace?")
              (("2" (flatten)
                (("2" (case "car(trace!1) = last(trace!1)")
                  (("1" (replace -1) (("1" (propax) nil nil)) nil)
                   ("2" (inst -2 "0")
                    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                     ("2" (hide-all-but (-1 1 2))
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "trace!1")
            (("3" (expand "wf_trace?") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "trace!1")
            (("4" (expand "wf_trace?") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((trace_semantic_rel_induction formula-decl nil trace_semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (length def-decl "nat" list_props nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assigns adt-accessor-decl "[(assign?) -> Assigns]" HP_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (below type-eq-decl nil nat_types nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (<= const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (anyvar adt-accessor-decl "[(any?) -> nat]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (append def-decl "list[T]" list_props nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (semantic_rel_bounded_star_inc formula-decl nil
     bounded_star_semantics nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (HP_STAR_eta formula-decl nil HP_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_sound 0
  (trace_semantics_sound-1 nil 3791033719
   ("" (induct "hp")
    (("1" (grind) nil nil)
     ("2" (use "trace_semantics_sound_assign")
      (("2" (beta) (("2" (grind) nil nil)) nil)) nil)
     ("3" (use "trace_semantics_sound_diff") (("3" (grind) nil nil))
      nil)
     ("4" (use "trace_semantics_sound_test") (("4" (grind) nil nil))
      nil)
     ("5" (use "trace_semantics_sound_seq") (("5" (grind) nil nil))
      nil)
     ("6" (use "trace_semantics_sound_union") (("6" (grind) nil nil))
      nil)
     ("7" (use "trace_semantics_sound_star")
      (("7" (skeep*)
        (("7" (inst -1 "STAR1_var")
          (("7" (split)
            (("1" (inst -2 "trace")
              (("1" (inst -1 "trace")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (use "bounded_implies_semantic_rel")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (use "trace_semantics_sound_any")
      (("8" (skeep*)
        (("8" (inst -1 "trace" "ANY1_var" "ANY2_var")
          (("8" (beta) (("8" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("9" (skeep)
      (("9" (typepred "trace")
        (("9" (expand "finite_trace?") (("9" (propax) nil nil)) nil))
        nil))
      nil)
     ("10" (skeep)
      (("10" (typepred "trace")
        (("10" (expand "wf_trace?")
          (("10" (flatten) (("10" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("11" (skeep)
      (("11" (typepred "trace")
        (("11" (expand "wf_trace?")
          (("11" (flatten)
            (("11" (inst -2 "0")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (trace_semantics_sound_any formula-decl nil trace_semantics nil)
    (trace_semantics_sound_star formula-decl nil trace_semantics nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (trace_semantics_sound_union formula-decl nil trace_semantics nil)
    (trace_semantics_sound_seq formula-decl nil trace_semantics nil)
    (trace_semantics_sound_test formula-decl nil trace_semantics nil)
    (trace_semantics_sound_diff formula-decl nil trace_semantics nil)
    (ODEs type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (trace_semantics_sound_assign formula-decl nil trace_semantics nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (HP_induction formula-decl nil HP_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (last const-decl "T" more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (trace_semantics_complete_assign 0
  (trace_semantics_complete_assign-1 nil 3888957866
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil)
         ("2" (assert) (("2" (grind) nil nil)) nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (flatten)
              (("3" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil)
                 ("4" (skeep) (("4" (grind) nil nil)) nil)
                 ("5" (skeep) (("5" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_diff 0
  (trace_semantics_complete_diff-1 nil 3889102892
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil)
         ("2" (expand "last")
          (("2" (expand "length")
            (("2" (expand "length")
              (("2" (expand "nth")
                (("2" (expand "length")
                  (("2" (expand "nth") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (expand "semantic_rel")
          (("3" (expand "trace_semantic_rel")
            (("3" (flatten)
              (("3" (split)
                (("1" (grind) nil nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (skeep)
                      (("3" (inst 1 "D") (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (trace_semantics_complete_any 0
  (trace_semantics_complete_any-1 nil 3889351265
   ("" (skeep*)
    (("" (inst 1 "(: STATE(envi), STATE(envo) :)")
      (("1" (split)
        (("1" (assert) nil nil) ("2" (grind) nil nil)
         ("3" (expand "semantic_rel")
          (("3" (flatten)
            (("3" (expand "trace_semantic_rel")
              (("3" (expand "length")
                (("3" (expand "length")
                  (("3" (expand "length")
                    (("3" (split)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (skeep)
                        (("3" (inst 1 "r")
                          (("3" (split)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "nth")
                              (("2"
                                (expand "nth")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (skeep)
                          (("4" (inst -3 "i") (("4" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_test 0
  (trace_semantics_complete_test-1 nil 3889519796
   ("" (skeep*)
    (("" (expand "semantic_rel")
      (("" (flatten)
        (("" (inst 1 "(:STATE(envi):)")
          (("1" (assert)
            (("1" (expand "last")
              (("1" (expand "length")
                (("1" (expand "length")
                  (("1" (expand "nth")
                    (("1" (expand "trace_semantic_rel")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (hide 2 3)
                            (("1" (expand "nth")
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (Environment type-eq-decl nil hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_seq 0
  (trace_semantics_complete_seq-1 nil 3791545264
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (skeep -3)
        (("" (inst -1 "envi" "env")
          (("" (inst -2 "env" "envo")
            (("" (assert)
              (("" (skolem -1 "trace1")
                (("" (skolem -2 "trace2")
                  (("" (inst 1 "append(trace1, cdr(trace2))")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (replace -1)
                          (("1" (lemma "car_append[TraceState]")
                            (("1" (inst -1 "cdr(trace2)" "trace1")
                              (("1"
                                (replace -1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "cdr(trace2)=null")
                          (("1" (replace -1)
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (inst -1 "trace1")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -7)
                                    (("1"
                                      (case "last(trace2)=car(trace2)")
                                      (("1"
                                        (replace -1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "last")
                                        (("2"
                                          (case "length(trace2)=1")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (1 -2))
                                            (("2"
                                              (typepred "trace2")
                                              (("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -5)
                            (("2" (use "last_append[TraceState]")
                              (("1"
                                (replace -1)
                                (("1"
                                  (use "last_cdr[TraceState]")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (typepred "trace2")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("3" (expand "trace_semantic_rel" 1)
                          (("3" (flatten)
                            (("3" (inst 1 "trace1" "trace2")
                              (("3"
                                (assert)
                                (("3"
                                  (typepred "trace1")
                                  (("3"
                                    (typepred "trace2")
                                    (("3"
                                      (expand "finite_trace?")
                                      (("3"
                                        (typepred "trace2")
                                        (("3"
                                          (expand "wf_trace?")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (inst -2 "0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "trace1")
                      (("2" (typepred "trace2")
                        (("2" (expand "wf_trace?")
                          (("2" (flatten)
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "i")
                                  (("2"
                                    (case "i < length(trace1)")
                                    (("1"
                                      (inst -7 "i")
                                      (("1"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "last")
                                        (("2"
                                          (rewrite
                                           "nth_append[TraceState]")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "i = length[TraceState](trace1) - 1")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (replace -10)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       -3
                                       "i - length(trace1) + 1")
                                      (("1"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (use
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "i = length[TraceState](trace1) + length[TraceState](trace2) -2")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (hide-all-but
                                                   (-4 3 -3))
                                                  (("1"
                                                    (rewrite
                                                     "nth_append[TraceState]")
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       1
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (rewrite
                                             "length_append[TraceState]")
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2"
                                                (expand "length" 2 2)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (use
                                     "append_null_right[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (use "last_append[TraceState]")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use "last_cdr[TraceState]")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last const-decl "T" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (append def-decl "list[T]" list_props nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (trace_semantics_complete_union 0
  (trace_semantics_complete_union-1 nil 3889103604
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (split)
        (("1" (inst -2 "envi" "envo")
          (("1" (assert)
            (("1" (skeep)
              (("1" (inst 1 "trace")
                (("1" (assert)
                  (("1" (expand "trace_semantic_rel" 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (inst -3 "envi" "envo")
          (("2" (assert)
            (("2" (skeep)
              (("2" (inst 1 "trace")
                (("2" (assert)
                  (("2" (expand "trace_semantic_rel" 1)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete_star 0
  (trace_semantics_complete_star-1 nil 3889783976
   ("" (skeep)
    (("" (induct "i")
      (("1" (skeep)
        (("1" (expand "semantic_rel_bounded_star")
          (("1" (inst 1 "(:STATE(envi):)")
            (("1" (assert)
              (("1" (replace -1)
                (("1" (split)
                  (("1" (grind) nil nil)
                   ("2" (expand "trace_semantic_rel" +)
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (expand "semantic_rel_bounded_star" -2)
          (("2" (split -2)
            (("1" (inst 1 "(:STATE(envi):)")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (split)
                    (("1" (grind) nil nil)
                     ("2" (expand "trace_semantic_rel" 1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
                 ("2" (hide-all-but 1) (("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (inst -3 "env" "envo")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -6 "envi" "env")
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "append(trace!1,cdr(trace))")
                            (("1" (split)
                              (("1" (rewrite "car_append") nil nil)
                               ("2"
                                (case "cdr(trace)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (rewrite "append_null_right")
                                    (("1"
                                      (case "env = envo")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (replace -4)
                                        (("2"
                                          (replace -5)
                                          (("2"
                                            (hide-all-but (1 -1))
                                            (("2"
                                              (typepred "trace")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (rewrite "last_append")
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (rewrite "last_cdr")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "trace_semantic_rel" 1)
                                (("3"
                                  (flatten)
                                  (("3"
                                    (inst 2 "trace!1" "trace")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "trace")
                                        (("3"
                                          (hide 1 3)
                                          (("3"
                                            (typepred "trace!1")
                                            (("3"
                                              (expand "finite_trace?")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (hide-all-but
                                                   (-3 -4 1))
                                                  (("3"
                                                    (expand
                                                     "wf_trace?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (inst -2 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "length(trace)>1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (case
                                                             "car(trace)=last(trace)")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (use "wf_append")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -3)
                                    (("1"
                                      (use
                                       "TraceState_STATE_extensionality")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "trace!1")
                                (("2"
                                  (typepred "trace")
                                  (("2"
                                    (hide-all-but (-1 -2 -3 -4 1))
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (case "cdr(trace)=null")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (rewrite
                                             "append_null_right")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (rewrite "last_append")
                                          (("2"
                                            (rewrite "last_cdr")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (skeep*)
        (("3" (typepred "trace")
          (("3" (expand "finite_trace?") (("3" (propax) nil nil)) nil))
          nil))
        nil)
       ("4" (skeep*)
        (("4" (typepred "trace")
          (("4" (expand "wf_trace?")
            (("4" (flatten) (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("5" (skeep*)
        (("5" (typepred "trace")
          (("5" (expand "wf_trace?")
            (("5" (flatten)
              (("5" (inst -2 "0")
                (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                 ("2" (assert) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (HP type-decl nil HP_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last const-decl "T" more_list_props structures)
    (pred type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (TraceState_STATE_extensionality formula-decl nil TraceState_adt
     nil)
    (wf_append formula-decl nil trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (trace_semantics_complete 0
  (trace_semantics_complete-4 "" 3791650339
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (use "trace_semantics_complete_assign")
        (("1" (grind) nil nil)) nil))
      nil)
     ("2" (use "trace_semantics_complete_diff") (("2" (grind) nil nil))
      nil)
     ("3" (use "trace_semantics_complete_test") (("3" (grind) nil nil))
      nil)
     ("4" (use "trace_semantics_complete_seq") nil nil)
     ("5" (use "trace_semantics_complete_union") nil nil)
     ("6" (use "trace_semantics_complete_star")
      (("6" (skeep*)
        (("6" (inst -1 "STAR1_var")
          (("6" (split)
            (("1" (hide -2)
              (("1" (use "semantic_rel_implies_bounded")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst -2 "envi" "envo" "i")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (use "trace_semantics_complete_any")
      (("7" (skeep*)
        (("7" (inst -1 "envi" "envo" "ANY1_var" "ANY2_var")
          (("7" (assert) nil nil)) nil))
        nil))
      nil)
     ("8" (skeep*)
      (("8" (typepred "trace")
        (("8" (expand "finite_trace?") (("8" (propax) nil nil)) nil))
        nil))
      nil)
     ("9" (skeep*)
      (("9" (typepred "trace")
        (("9" (expand "wf_trace?")
          (("9" (flatten) (("9" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("10" (skeep*)
      (("10" (typepred "trace")
        (("10" (expand "wf_trace?")
          (("10" (flatten)
            (("10" (inst -2 "0")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (trace_semantics_complete_any formula-decl nil trace_semantics nil)
    (trace_semantics_complete_star formula-decl nil trace_semantics
     nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_implies_bounded formula-decl nil
     bounded_star_semantics nil)
    (trace_semantics_complete_union formula-decl nil trace_semantics
     nil)
    (trace_semantics_complete_seq formula-decl nil trace_semantics nil)
    (trace_semantics_complete_test formula-decl nil trace_semantics
     nil)
    (trace_semantics_complete_diff formula-decl nil trace_semantics
     nil)
    (ODEs type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (odd_minus_even_is_odd application-judgement "odd_int" integers
     nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (subrange type-eq-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (trace_semantics_complete_assign formula-decl nil trace_semantics
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (last const-decl "T" more_list_props structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak)
  (trace_semantics_complete-3 "" 3791309500
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil) ("4" (grind) nil)
                     ("5" (grind) nil)))))))))))))
         ("2" (expand "wf_trace?") (("2" (grind) nil)))))))
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (propax) nil)))))))))
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil)))))))
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil)))))))))))
                                 ("2"
                                  (grind)
                                  nil)))))))))))))))))))))))))
         ("2" (grind) nil)))))
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (flatten) (("5" (grind) nil)))
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))))))))
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil) ("2" (grind) nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil)))))))
                                 ("2" (assert) nil)))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("4" (rewrite "car_append[TraceState]") nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil)))))))))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil)
                                   ("2" (propax) nil)
                                   ("3" (propax) nil)
                                   ("4" (propax) nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil)))))))))))))))
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil)))
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil)))))))
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil)))
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil)))))))
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))))))))))))))
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))))))))))
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (grind) nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))
           ("2" (skip) nil)))))))
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (grind) nil) ("5" (grind) nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil) ("2" (grind) nil)))))
                     ("5" (skeep 1)
                      (("5" (inst -3 "i")
                        (("5" (grind) nil)))))))))))))
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (trace_semantics_complete-2 "" 3791309348
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (case "envi=envo")
        (("1" (inst 1 "(: STATE(envi) :)")
          (("1" (hide -2)
            (("1" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) (("3" (grind) nil nil)) nil)
               ("4" (assert) nil nil) ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (use "star_gen_seq_io")
          (("1" (assert)
            (("1" (skeep -1)
              (("1" (use "trace_semantics_complete_gen_seq")
                (("1" (split -1)
                  (("1" (inst -1 "envi" "envo" "i")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep 3)
                          (("1" (assert)
                            (("1" (use "star_gen_seq_trace")
                              (("1"
                                (assert)
                                (("1" (inst 1 "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures))
   shostak)
  (trace_semantics_complete-1 nil 3791034133
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (skeep)
            (("2" (inst -3 "envi" "envo")
              (("2" (expand "semantic_rel" -2)
                (("2" (split -2)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "trace")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (expand "trace_semantic_rel" 1)
                              (("6"
                                (flatten)
                                (("6" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

