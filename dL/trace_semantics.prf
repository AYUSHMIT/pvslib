(trace_semantics
 (finite_trace?_TCC1 0
  (finite_trace?_TCC1-1 nil 3791212029 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (finite_trace? subtype "trace_semantics.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (trace_semantic_rel_TCC1 0
  (trace_semantic_rel_TCC1-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC2 0
  (trace_semantic_rel_TCC2-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC3 0
  (trace_semantic_rel_TCC3-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC4 0
  (trace_semantic_rel_TCC4-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC5 0
  (trace_semantic_rel_TCC5-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC6 0
  (trace_semantic_rel_TCC8-1 nil 3790681048 ("" (grind) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC7 0
  (trace_semantic_rel_TCC6-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC8 0
  (trace_semantic_rel_TCC12-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC9 0
  (trace_semantic_rel_TCC9-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC10 0
  (trace_semantic_rel_TCC10-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC11 0
  (trace_semantic_rel_TCC11-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.envi"
    "(TraceState_adt.state?)")))
 (trace_semantic_rel_TCC12 0
  (trace_semantic_rel_TCC13-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.diff?(x), HP_adt.test?(x))}")))
 (trace_semantic_rel_TCC13 0
  (trace_semantic_rel_TCC16-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC14 0
  (trace_semantic_rel_TCC19-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil))
   nil
   (trace_semantic_rel subtype "trace_semantics.trace1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (trace_semantic_rel_TCC15 0
  (trace_semantic_rel_TCC17-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC16 0
  (trace_semantic_rel_TCC18-1 nil 3790683845 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "trace_semantics.hp"
    "{x: HP_adt.HP | booleans.OR(HP_adt.seq?(x), HP_adt.union?(x))}")))
 (trace_semantic_rel_TCC17 0
  (trace_semantic_rel_TCC14-1 nil 3791049189 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "trace_semantics.trace1"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (trace_semantic_rel_TCC18 0
  (trace_semantic_rel_TCC20-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "0"
    "below[length[TraceState](trace)]")))
 (trace_semantic_rel_TCC19 0
  (trace_semantic_rel_TCC21-1 nil 3790681048 ("" (subtype-tcc) nil nil)
   ((TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (last const-decl "T" more_list_props structures))
   nil
   (trace_semantic_rel subtype "1"
    "below[length[TraceState](trace)]")))
 (trace_semantics_complete_seq 0
  (trace_semantics_complete_seq-1 nil 3791545264
   ("" (skeep*)
    (("" (expand "semantic_rel" -3)
      (("" (skeep -3)
        (("" (inst -1 "envi" "env")
          (("" (inst -2 "env" "envo")
            (("" (assert)
              (("" (skolem -1 "trace1")
                (("" (skolem -2 "trace2")
                  (("" (inst 1 "append(trace1, cdr(trace2))")
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil)
                         ("3" (case "null?(cdr(trace2))")
                          (("1" (lemma "append_null_right[TraceState]")
                            (("1" (case "cdr(trace2)=null")
                              (("1"
                                (replace -1)
                                (("1"
                                  (inst -2 "trace1")
                                  (("1"
                                    (replace -2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (rewrite "last_append[TraceState]")
                            (("2" (rewrite "last_cdr[TraceState]") nil
                              nil))
                            nil))
                          nil)
                         ("4" (rewrite "car_append[TraceState]") nil
                          nil)
                         ("5" (case "cdr(trace2) = null")
                          (("1" (replace -1)
                            (("1"
                              (rewrite "append_null_right[TraceState]")
                              (("1"
                                (replace -5)
                                (("1"
                                  (replace -9)
                                  (("1"
                                    (replace -10)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "last_append[TraceState]")
                            (("2" (rewrite "last_cdr[TraceState]") nil
                              nil))
                            nil))
                          nil)
                         ("6" (expand "trace_semantic_rel" 1)
                          (("6" (inst 1 "trace1" "trace2")
                            (("6" (flatten)
                              (("6"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2" (propax) nil nil)
                                 ("3" (propax) nil nil)
                                 ("4" (propax) nil nil)
                                 ("5"
                                  (replace -4)
                                  (("5" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "trace1")
                      (("2" (typepred "trace2")
                        (("2" (expand "wf_trace?")
                          (("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (skeep)
                              (("2"
                                (case "i < length(trace1)")
                                (("1"
                                  (inst -5 "i")
                                  (("1"
                                    (rewrite "nth_append[TraceState]")
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (expand "last")
                                    (("2"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -2 "i - length(trace1) + 1")
                                  (("1"
                                    (rewrite "nth_append[TraceState]")
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (rewrite
                                       "length_append[TraceState]")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" 1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (last const-decl "T" more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil))
   nil))
 (trace_sem_rel_implies_bounded 0
  (trace_sem_rel_implies_bounded-1 nil 3791894853
   ("" (skeep*)
    (("" (lemma "trace_semantic_rel_induction")
      ((""
        (inst -1
         ("LAMBDA(hp:HP)(trace:Trace): state?(last(trace)) IMPLIES EXISTS (i: nat): semantic_rel_bounded_star(i)(hp)(state(car(trace)))(state(last(trace)))"))
        (("1" (split)
          (("1" (inst -1 "STAR(hp)" "trace") (("1" (assert) nil nil))
            nil)
           ("2" (hide 3)
            (("2" (skeep)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (inst 1 "0")
                    (("1" (expand "semantic_rel_bounded_star" 1)
                      (("1" (assert)
                        (("1" (expand "semantic_rel" 1)
                          (("1" (expand "last")
                            (("1" (replace -2)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -5 "i")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (inst -6 "i")
                                      (("2"
                                        (expand "nth")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (inst 1 "0")
                    (("2" (expand "semantic_rel_bounded_star" 1)
                      (("2" (assert)
                        (("2" (expand "semantic_rel" 1)
                          (("2" (split -3)
                            (("1" (flatten)
                              (("1"
                                (expand "semantic_rel_diff")
                                (("1"
                                  (skeep*)
                                  (("1"
                                    (inst 1 "D")
                                    (("1"
                                      (inst 1 "r")
                                      (("1"
                                        (inst 1 "fs")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (case
                                                 "car(cdr(trace_1))= last(trace_1)")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide-all-but (1 -6))
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "nth")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "t" "env")
                                                (("2"
                                                  (expand "nth")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "fs")
                                          (("2"
                                            (expand "nth")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "last")
                                (("2"
                                  (replace -4)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (flatten)
                  (("3" (inst 1 "0")
                    (("3" (expand "semantic_rel_bounded_star" 1)
                      (("3" (assert)
                        (("3" (split -2)
                          (("1" (flatten)
                            (("1" (expand "semantic_rel" 1)
                              (("1"
                                (split)
                                (("1"
                                  (expand "nth")
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "last")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nth")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (expand "last")
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (flatten)
                  (("4" (skeep*)
                    (("4" (split)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (skolem -3 "i1")
                            (("1" (replace -1 -10)
                              (("1"
                                (case ("cdr(trace2)=null"))
                                (("1"
                                  (split -6)
                                  (("1"
                                    (skolem -1 "i2")
                                    (("1"
                                      (inst 1 "i1+i2")
                                      (("1"
                                        (expand
                                         "semantic_rel_bounded_star"
                                         1)
                                        (("1"
                                          (inst
                                           1
                                           "state(last(trace1))")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -3)
                                              (("1"
                                                (rewrite
                                                 "car_append[TraceState]")
                                                (("1"
                                                  (lemma
                                                   "semantic_rel_bounded_star_inc")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "stm1(hp_1)"
                                                     "state(car(trace1))"
                                                     "state(last(trace1))"
                                                     "i1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "i1+i2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -3)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (lemma
                                                   "semantic_rel_bounded_star_inc")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "stm2(hp_1)"
                                                     "state(car(trace2))"
                                                     "state(last(trace2))"
                                                     "i2")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "i1+i2")
                                                        (("2"
                                                          (replace -10)
                                                          (("2"
                                                            (rewrite
                                                             "append_null_right")
                                                            (("2"
                                                              (replace
                                                               -10)
                                                              (("2"
                                                                (case
                                                                 "last(trace2)=car(trace2)")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-3
                                                                    1))
                                                                  (("2"
                                                                    (typepred
                                                                     "trace2")
                                                                    (("2"
                                                                      (expand
                                                                       "wf_trace?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "last(trace2)=car(trace2)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide-all-but (-1 1))
                                      (("2"
                                        (typepred "trace2")
                                        (("2"
                                          (expand "wf_trace?")
                                          (("2"
                                            (flatten)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (split -5)
                                  (("1"
                                    (skolem -1 "i2")
                                    (("1"
                                      (inst 2 "i1+i2")
                                      (("1"
                                        (expand
                                         "semantic_rel_bounded_star"
                                         2)
                                        (("1"
                                          (inst
                                           2
                                           "state(last(trace1))")
                                          (("1"
                                            (split)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (rewrite
                                                 "car_append[TraceState]")
                                                (("1"
                                                  (lemma
                                                   "semantic_rel_bounded_star_inc")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "stm1(hp_1)"
                                                     "state(car(trace1))"
                                                     "state(last(trace1))"
                                                     "i1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "i1 + i2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -2)
                                              (("2"
                                                (rewrite
                                                 "last_append[TraceState]")
                                                (("2"
                                                  (rewrite
                                                   "last_cdr[TraceState]")
                                                  (("1"
                                                    (lemma
                                                     "semantic_rel_bounded_star_inc")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "stm2(hp_1)"
                                                       "state(car(trace2))"
                                                       "state(last(trace2))"
                                                       "i2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "i1+i2")
                                                          (("1"
                                                            (replace
                                                             -9)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (1 3))
                                                    (("2"
                                                      (typepred
                                                       "trace2")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (rewrite "last_append[TraceState]")
                                    (("2"
                                      (lemma "last_cdr[TraceState]")
                                      (("2"
                                        (inst -1 "trace2")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (typepred "trace2")
                                          (("2"
                                            (hide-all-but (1 2 3 -1))
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (hide-all-but (-1 -5))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (flatten)
                  (("5" (split -2)
                    (("1" (inst -4 "trace_1")
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (skeep -2)
                            (("1" (inst 1 "i")
                              (("1"
                                (expand "semantic_rel_bounded_star" 1)
                                (("1" (flatten) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (skeep)
                          (("2" (inst 1 "i")
                            (("2"
                              (expand "semantic_rel_bounded_star" 1)
                              (("2" (flatten) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (flatten)
                  (("6" (split -2)
                    (("1" (flatten)
                      (("1" (inst 1 "0")
                        (("1"
                          (case "state(car(trace_1)) = state(last(trace_1))")
                          (("1" (replace -1)
                            (("1"
                              (expand "semantic_rel_bounded_star" 1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (expand "last")
                            (("2" (replace -1)
                              (("2"
                                (expand "nth")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep*)
                      (("2" (assert)
                        (("2" (skolem -3 "i1")
                          (("2" (case "cdr(trace2)=null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite "append_null_right")
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (case "car(trace2)=last(trace2)")
                                      (("1"
                                        (replace -1 :dir rl)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skolem -7 "i2")
                                            (("1"
                                              (inst 1 "i2 + 1")
                                              (("1"
                                                (expand
                                                 "semantic_rel_bounded_star"
                                                 1)
                                                (("1"
                                                  (inst
                                                   1
                                                   "state(last(trace1))")
                                                  (("1"
                                                    (split 1)
                                                    (("1"
                                                      (use
                                                       "bounded_implies_semantic_rel")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -10)
                                                      (("2"
                                                        (use
                                                         "HP_STAR_eta")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-1 1))
                                        (("2"
                                          (typepred "trace2")
                                          (("2"
                                            (expand "wf_trace?")
                                            (("2"
                                              (flatten)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "trace2")
                                        (("3"
                                          (expand "wf_trace?")
                                          (("3"
                                            (flatten)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (replace -1)
                              (("2"
                                (rewrite "last_append[TraceState]")
                                (("2"
                                  (rewrite "last_cdr")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (skolem -5 "i2")
                                      (("1"
                                        (inst 2 "i2+1")
                                        (("1"
                                          (expand
                                           "semantic_rel_bounded_star"
                                           2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide 2)
                                              (("1"
                                                (inst
                                                 2
                                                 "state(last(trace1))")
                                                (("1"
                                                  (split 2)
                                                  (("1"
                                                    (use
                                                     "bounded_implies_semantic_rel")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (rewrite
                                                         "car_append")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace
                                                     -8
                                                     :dir
                                                     rl)
                                                    (("2"
                                                      (use
                                                       "HP_STAR_eta")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace2")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep*)
                      (("3" (hide-all-but (-3 -5))
                        (("3" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("7" (flatten)
                  (("7" (inst 1 "0")
                    (("7" (expand "semantic_rel_bounded_star" 1)
                      (("7" (assert)
                        (("7" (expand "semantic_rel" 1)
                          (("7" (split)
                            (("1" (skeep -5)
                              (("1"
                                (inst 1 "r")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "nth")
                                      (("1" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (replace -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep 1)
                              (("2"
                                (inst -6 "i")
                                (("2"
                                  (expand "last")
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nth")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep*)
          (("2" (case "length(trace!1)=1")
            (("1" (expand "last")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (expand "nth") (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "trace!1")
              (("2" (expand "wf_trace?")
                (("2" (flatten)
                  (("2" (inst -2 "0")
                    (("1" (expand "nth") (("1" (propax) nil nil)) nil)
                     ("2" (expand "length") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep*)
          (("3" (typepred "trace!1")
            (("3" (expand "wf_trace?") (("3" (assert) nil nil)) nil))
            nil))
          nil)
         ("4" (skeep*)
          (("4" (typepred "trace!1")
            (("4" (expand "wf_trace?") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (any? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (anyvar adt-accessor-decl "[(any?) -> nat]" HP_adt nil)
    (HP_STAR_eta formula-decl nil HP_adt nil)
    (bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (stm adt-accessor-decl "[(star?) -> HP]" HP_adt nil)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (stm2 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (semantic_rel_bounded_star_inc formula-decl nil
     bounded_star_semantics nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (stm1 shared-adt-accessor-decl
     "[{x: HP | seq?(x) OR union?(x)} -> HP]" HP_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (odes adt-accessor-decl "[(diff?) -> ODEs]" HP_adt nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (dd? const-decl "bool" hp_expr nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (assigns adt-accessor-decl "[(assign?) -> Assigns]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (semantic_rel_bounded_implies_trace_semantic_rel 0
  (semantic_rel_bounded_implies_trace_semantic_rel-2 nil 3791807041
   ("" (skeep)
    (("" (induct "i")
      (("1" (skeep*)
        (("1" (expand "semantic_rel_bounded_star" -1)
          (("1" (inst -2 "envi" "envo")
            (("1" (inst 1 "(: STATE(envi) :)")
              (("1" (split)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (grind) nil nil) ("4" (assert) nil nil)
                 ("5" (assert) (("5" (grind) nil nil)) nil)
                 ("6" (expand "trace_semantic_rel" 1)
                  (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep*)
        (("2" (expand "semantic_rel_bounded_star" -2)
          (("2" (split)
            (("1" (inst 1 "(: STATE(envi):)")
              (("1" (split)
                (("1" (assert) nil nil) ("2" (assert) nil nil)
                 ("3" (grind) nil nil) ("4" (assert) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel" 1)
                  (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (hide-all-but (1)) (("2" (grind) nil nil)) nil))
              nil)
             ("2" (skeep)
              (("2" (inst -4 "envi" "env")
                (("2" (assert)
                  (("2" (skolem -4 "trace_hp")
                    (("2" (inst -3 "env" "envo")
                      (("2" (assert)
                        (("2" (skolem -3 "trace_star")
                          (("2" (flatten)
                            (("2" (case "null?(cdr(trace_star))")
                              (("1"
                                (inst 2 "trace_hp")
                                (("1"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -6)
                                    (("5"
                                      (replace -7)
                                      (("5"
                                        (case
                                         "state(last(trace_star))=state(car(trace_star))")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (-1 1 2 3))
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (expand "trace_semantic_rel" 1)
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (hide 1 3)
                                        (("6"
                                          (inst
                                           1
                                           "trace_hp"
                                           "trace_star")
                                          (("6"
                                            (split)
                                            (("1"
                                              (hide-all-but (-1 1 2))
                                              (("1"
                                                (grind)
                                                (("1"
                                                  (case
                                                   "cdr(trace_star)=null")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (grind)
                                                      (("1"
                                                        (rewrite
                                                         "append_null_right")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (propax) nil nil)
                                             ("5" (propax) nil nil)
                                             ("6"
                                              (replace -6)
                                              (("6" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 3
                                 "append(trace_hp, cdr(trace_star))")
                                (("1"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (rewrite "car_append[TraceState]")
                                    nil
                                    nil)
                                   ("3"
                                    (rewrite "last_append[TraceState]")
                                    (("3"
                                      (rewrite "last_cdr[TraceState]")
                                      nil
                                      nil))
                                    nil)
                                   ("4"
                                    (rewrite "car_append[TraceState]")
                                    nil
                                    nil)
                                   ("5"
                                    (rewrite "last_append[TraceState]")
                                    (("5"
                                      (rewrite "last_cdr[TraceState]")
                                      nil
                                      nil))
                                    nil)
                                   ("6"
                                    (expand "trace_semantic_rel" 1)
                                    (("6"
                                      (flatten)
                                      (("6"
                                        (hide 1 3)
                                        (("6"
                                          (inst
                                           1
                                           "trace_hp"
                                           "trace_star")
                                          (("6"
                                            (split)
                                            (("1" (propax) nil nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil)
                                             ("4" (propax) nil nil)
                                             ("5"
                                              (replace -5)
                                              (("5" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "trace_hp")
                                  (("2"
                                    (typepred "trace_star")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (split)
                                          (("1"
                                            (use
                                             "append_equal_null[TraceState]")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (case
                                               "i<length(trace_hp)")
                                              (("1"
                                                (inst -5 "i")
                                                (("1"
                                                  (rewrite
                                                   "nth_append[TraceState]")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "last")
                                                  (("2"
                                                    (case
                                                     "i= length[TraceState](trace_hp) - 1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (rewrite
                                                         "nth_append[TraceState]")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 -2
                                                 "i - length(trace_hp) + 1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (rewrite
                                                     "nth_append[TraceState]")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (rewrite
                                                         "length_append[TraceState]")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split)
                                                  (("1"
                                                    (hide-all-but
                                                     (1 2))
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (rewrite
                                                       "length_append[TraceState]")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (semantic_rel_bounded_star def-decl "bool" bounded_star_semantics
     nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (append_equal_null formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures))
   nil)
  (semantic_rel_bounded_implies_trace_semantic_rel-1 nil 3791650617
   ("" (postpone) nil nil) nil shostak))
 (trace_semantics_sound 0
  (trace_semantics_sound-1 nil 3791033719
   ("" (induct "hp")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "semantic_rel")
          (("2" (split)
            (("1" (skeep 1)
              (("1" (expand "trace_semantic_rel")
                (("1" (flatten)
                  (("1" (inst -6 "i") (("1" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (expand "trace_semantic_rel")
              (("2" (flatten)
                (("2" (skeep 1)
                  (("2" (inst -7 "i") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep*)
      (("3" (expand "semantic_rel")
        (("3" (expand "trace_semantic_rel")
          (("3" (flatten)
            (("3" (split)
              (("1" (expand "semantic_rel_diff")
                (("1" (flatten)
                  (("1" (skeep*)
                    (("1" (inst 2 "D")
                      (("1" (inst 2 "r")
                        (("1" (inst 2 "fs")
                          (("1" (split)
                            (("1" (expand "nth")
                              (("1"
                                (expand "nth")
                                (("1"
                                  (case "car(cdr(trace))=last(trace)")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (1 -7))
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (typepred "env")
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (inst -5 "t" "env")
                                    (("2"
                                      (expand "nth")
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "fs")
                            (("2" (expand "nth")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "last") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (skeep)
        (("4" (expand "trace_semantic_rel")
          (("4" (split)
            (("1" (flatten)
              (("1" (expand "semantic_rel")
                (("1" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "semantic_rel")
                (("2" (split)
                  (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep*)
      (("5" (expand "trace_semantic_rel" -5)
        (("5" (skeep -5)
          (("5" (inst -1 "trace1")
            (("5" (inst -2 "trace2")
              (("5" (split -5)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "semantic_rel" 2)
                      (("1" (inst 2 "state(last(trace1))")
                        (("1" (split 2)
                          (("1" (hide -8)
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (rewrite "null_append[TraceState]")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "car(trace1) = car(append(trace1, cdr(trace2)))")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "trace1")
                                            (("1"
                                              (expand "wf_trace?")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (1))
                                        (("2"
                                          (use
                                           "car_append[TraceState]")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (typepred "trace1")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -6)
                            (("2" (hide -2 -7)
                              (("2"
                                (split)
                                (("1"
                                  (case "last(trace2)= last(trace)")
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (case "cdr(trace2)=null")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (use
                                         "append_null_right[TraceState]")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (case
                                               "car(trace2) = last(trace2)")
                                              (("1"
                                                (replace -1 :dir rl)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide-all-but (-2 1))
                                                (("2"
                                                  (expand "last")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (typepred
                                                                   "trace2")
                                                                  (("2"
                                                                    (expand
                                                                     "wf_trace?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (use
                                                                             "length_null[TraceState]")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "last(trace)=last(trace2)")
                                      (("1"
                                        (replace -1)
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2"
                                        (hide-all-but (-2 1 2))
                                        (("2"
                                          (use
                                           "last_append[TraceState]")
                                          (("1"
                                            (use
                                             "last_cdr[TraceState]")
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "trace2")
                                                (("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "trace2")
                                  (("2"
                                    (expand "wf_trace?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "trace2")
                                  (("3"
                                    (expand "wf_trace?")
                                    (("3"
                                      (flatten)
                                      (("3"
                                        (assert)
                                        (("3"
                                          (expand "last")
                                          (("3"
                                            (inst
                                             -2
                                             "length(trace2) - 1")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (hide-all-but (-1 1))
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (hide-all-but (-6 -1)) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (expand "semantic_rel" 2)
          (("6" (flatten 2)
            (("6" (inst -1 "trace")
              (("6" (assert)
                (("6" (expand "trace_semantic_rel" -4)
                  (("6" (inst -1 "trace") (("6" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "trace_semantic_rel" -4)
        (("7" (split)
          (("1" (flatten)
            (("1" (case "car(trace)=last(trace)")
              (("1" (expand "semantic_rel" 2) (("1" (assert) nil nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil)
           ("2" (use "trace_sem_rel_implies_bounded")
            (("2" (skeep -2)
              (("2" (inst -8 "trace1")
                (("2" (split)
                  (("1" (inst -1 "trace2")
                    (("1" (split)
                      (("1" (skeep)
                        (("1" (use "bounded_implies_semantic_rel")
                          (("1" (assert)
                            (("1" (split -9)
                              (("1"
                                (expand "semantic_rel" +)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst 3 "state(last(trace1))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -4)
                                          (("1"
                                            (rewrite
                                             "car_append[TraceState]")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (replace -9)
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (case "cdr(trace2)=null")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (rewrite
                                                   "append_null_right")
                                                  (("1"
                                                    (expand
                                                     "semantic_rel"
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (rewrite
                                                 "last_append[TraceState]")
                                                (("2"
                                                  (use
                                                   "last_cdr[TraceState]")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (split)
                                                    (("1"
                                                      (typepred
                                                       "trace2")
                                                      (("1"
                                                        (expand
                                                         "wf_trace?")
                                                        (("1"
                                                          (flatten)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "trace1")
                                (("2"
                                  (expand "wf_trace?")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (replace -3)
                                (("3"
                                  (rewrite "car_append[TraceState]")
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace2")
                        (("2" (expand "wf_trace?")
                          (("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("3" (propax) nil nil)
                       ("4" (replace -1)
                        (("4" (case "cdr(trace2)=null")
                          (("1" (replace -1)
                            (("1" (rewrite "append_null_right")
                              (("1"
                                (case "last(trace2)=car(trace2)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "last")
                                  (("2"
                                    (typepred "trace2")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand "length" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 1)
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (rewrite "last_append[TraceState]")
                            (("2" (rewrite "last_cdr[TraceState]")
                              (("2"
                                (typepred "trace2")
                                (("2"
                                  (expand "wf_trace?")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("5" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (reveal -1)
                    (("2" (hide -8)
                      (("2" (skeep)
                        (("2" (inst -1 "trace!1")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("8" (skeep*)
      (("8" (expand "trace_semantic_rel" -3)
        (("8" (flatten)
          (("8" (expand "semantic_rel" 2)
            (("8" (skeep)
              (("8" (split)
                (("1" (inst 1 "r")
                  (("1" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
                  nil)
                 ("2" (skeep)
                  (("2" (inst -8 "i") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_implies_semantic_rel formula-decl nil
     bounded_star_semantics nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (trace2 skolem-const-decl "Trace" trace_semantics nil)
    (trace_sem_rel_implies_bounded formula-decl nil trace_semantics
     nil)
    (null_append formula-decl nil more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (car_append formula-decl nil more_list_props structures)
    (trace1 skolem-const-decl "Trace" trace_semantics nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (last_append formula-decl nil more_list_props structures)
    (trace2 skolem-const-decl "Trace" trace_semantics nil)
    (last_cdr formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (TRUE const-decl "bool" booleans nil)
    (dd? const-decl "bool" hp_expr nil)
    (fs skolem-const-decl
     "(solution_odes_u?(D, DIFF1_var, state(nth(trace, 0))))"
     trace_semantics nil)
    (below type-eq-decl nil nat_types nil)
    (trace skolem-const-decl "Trace" trace_semantics nil)
    (DIFF1_var skolem-const-decl "ODEs" trace_semantics nil)
    (D skolem-const-decl "(dd?)" trace_semantics nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (env skolem-const-decl
     "(env_at_t?(DIFF1_var, fs, state(car(trace)), t))" trace_semantics
     nil)
    (t skolem-const-decl "{t: (D) | t <= r}" trace_semantics nil)
    (r skolem-const-decl "(D)" trace_semantics nil)
    (<= const-decl "bool" reals nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (length def-decl "nat" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (HP_induction formula-decl nil HP_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (last const-decl "T" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil))
   nil))
 (trace_semantics_complete 0
  (trace_semantics_complete-4 "" 3791650339
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "nth")
                        (("3" (expand "nth") (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 "hp")
      (("6" (flatten)
        (("6" (skeep)
          (("6" (use "semantic_rel_implies_bounded")
            (("6" (assert)
              (("6" (skeep)
                (("6"
                  (lemma
                   "semantic_rel_bounded_implies_trace_semantic_rel")
                  (("6" (inst?)
                    (("6" (split -)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)
                       ("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (semantic_rel_implies_bounded formula-decl nil
     bounded_star_semantics nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null_right formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car_append formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (HP_induction formula-decl nil HP_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (last const-decl "T" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil))
   shostak)
  (trace_semantics_complete-3 "" 3791309500
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil) ("4" (grind) nil)
                     ("5" (grind) nil)))))))))))))
         ("2" (expand "wf_trace?") (("2" (grind) nil)))))))
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
           ("4" (grind) nil) ("5" (grind) nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (propax) nil)))))))))
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil)))))))
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil)))))))))))
                                 ("2"
                                  (grind)
                                  nil)))))))))))))))))))))))))
         ("2" (grind) nil)))))
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (flatten) (("5" (grind) nil)))
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))))))))
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil) ("2" (grind) nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil)))))))
                                 ("2" (assert) nil)))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("4" (rewrite "car_append[TraceState]") nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil)))))))))))
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil)))))
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil)
                                   ("2" (propax) nil)
                                   ("3" (propax) nil)
                                   ("4" (propax) nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil)))))))))))))))
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil)))
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil)))))))
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil)))
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil)))))))
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2"
                                              (assert)
                                              nil)))))))))))))))))))))))))))))))))))))))))
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil) ("2" (propax) nil)
                       ("3" (propax) nil) ("4" (propax) nil)
                       ("5" (propax) nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil)))))))))))))))))))))
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
               ("4" (grind) nil) ("5" (grind) nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil)))))))
             ("2" (grind) nil)))
           ("2" (skip) nil)))))))
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil) ("2" (grind) nil) ("3" (grind) nil)
                 ("4" (grind) nil) ("5" (grind) nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil) ("2" (grind) nil)
                     ("3" (grind) nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil) ("2" (grind) nil)))))
                     ("5" (skeep 1)
                      (("5" (inst -3 "i")
                        (("5" (grind) nil)))))))))))))
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil))))))))))))))))
    nil)
   nil nil)
  (trace_semantics_complete-2 "" 3791309348
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (case "envi=envo")
        (("1" (inst 1 "(: STATE(envi) :)")
          (("1" (hide -2)
            (("1" (split)
              (("1" (assert) nil nil) ("2" (assert) nil nil)
               ("3" (assert) (("3" (grind) nil nil)) nil)
               ("4" (assert) nil nil) ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil)
         ("2" (use "star_gen_seq_io")
          (("1" (assert)
            (("1" (skeep -1)
              (("1" (use "trace_semantics_complete_gen_seq")
                (("1" (split -1)
                  (("1" (inst -1 "envi" "envo" "i")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep 3)
                          (("1" (assert)
                            (("1" (use "star_gen_seq_trace")
                              (("1"
                                (assert)
                                (("1" (inst 1 "i") nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (HP_induction formula-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (nth_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null_right formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures))
   shostak)
  (trace_semantics_complete-1 nil 3791034133
   ("" (induct "hp")
    (("1" (skeep*)
      (("1" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (grind) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (grind)
            (("6" (expand "semantic_rel")
              (("6" (expand "trace_semantic_rel")
                (("6" (flatten)
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil) ("4" (grind) nil nil)
                     ("5" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "wf_trace?") (("2" (grind) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (inst 1 "(: STATE(envi), STATE(envo) :)")
        (("1" (split)
          (("1" (assert) nil nil) ("2" (grind) nil nil)
           ("3" (grind) nil nil) ("4" (grind) nil nil)
           ("5" (grind) nil nil)
           ("6" (expand "semantic_rel")
            (("6" (expand "trace_semantic_rel")
              (("6" (split)
                (("1" (assert)
                  (("1" (expand "length")
                    (("1" (expand "length")
                      (("1" (expand "length") (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split 1)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (hide 2)
                      (("3" (expand "semantic_rel_diff")
                        (("3" (expand "semantic_rel_diff_trace")
                          (("3" (skeep -1)
                            (("3" (skeep -1)
                              (("3"
                                (inst 1 "t" "fs")
                                (("1"
                                  (split)
                                  (("1"
                                    (inst -2 "t" "envo")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (insteep -2)
                                      (("2"
                                        (typepred "env")
                                        (("2"
                                          (expand "nth")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (grind) nil nil))
        nil))
      nil)
     ("3" (skeep *)
      (("3" (skeep*)
        (("3" (expand "semantic_rel")
          (("3" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (assert) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (flatten) (("5" (grind) nil nil)) nil)
               ("6" (expand "trace_semantic_rel")
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep*)
      (("4" (expand "semantic_rel" -3)
        (("4" (skeep -3)
          (("4" (inst -1 "envi" "env")
            (("4" (inst -2 "env" "envo")
              (("4" (assert)
                (("4" (skolem -1 "trace1")
                  (("4" (skolem -2 "trace2")
                    (("4" (inst 1 "append(trace1, cdr(trace2))")
                      (("1" (flatten)
                        (("1" (split)
                          (("1" (grind) nil nil) ("2" (grind) nil nil)
                           ("3" (case "null?(cdr(trace2))")
                            (("1"
                              (lemma "append_null_right[TraceState]")
                              (("1"
                                (case "cdr(trace2)=null")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (inst -2 "trace1")
                                    (("1"
                                      (replace -2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (rewrite "car_append[TraceState]") nil
                            nil)
                           ("5" (case "cdr(trace2) = null")
                            (("1" (replace -1)
                              (("1"
                                (rewrite
                                 "append_null_right[TraceState]")
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (replace -9)
                                    (("1"
                                      (replace -10)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "last_append[TraceState]")
                              (("2"
                                (rewrite "last_cdr[TraceState]")
                                nil
                                nil))
                              nil))
                            nil)
                           ("6" (expand "trace_semantic_rel" 1)
                            (("6" (inst 1 "trace1" "trace2")
                              (("6"
                                (flatten)
                                (("6"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2" (propax) nil nil)
                                   ("3" (propax) nil nil)
                                   ("4" (propax) nil nil)
                                   ("5"
                                    (replace -4)
                                    (("5" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "trace1")
                        (("2" (typepred "trace2")
                          (("2" (expand "wf_trace?")
                            (("2" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "i < length(trace1)")
                                  (("1"
                                    (inst -5 "i")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (expand "last")
                                      (("2"
                                        (rewrite
                                         "nth_append[TraceState]")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -2 "i - length(trace1) + 1")
                                    (("1"
                                      (rewrite
                                       "nth_append[TraceState]")
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (rewrite
                                           "length_append[TraceState]")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "i")
                                      (("2"
                                        (rewrite
                                         "length_append[TraceState]")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1 2)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep*)
        (("5" (expand "semantic_rel" -3)
          (("5" (split -3)
            (("1" (inst -2 "envi" "envo")
              (("1" (assert)
                (("1" (skeep -2)
                  (("1" (inst 2 "trace")
                    (("1" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -3 "envi" "envo")
              (("2" (assert)
                (("2" (skeep -3)
                  (("2" (inst 2 "trace")
                    (("2" (split)
                      (("1" (propax) nil nil) ("2" (propax) nil nil)
                       ("3" (propax) nil nil) ("4" (propax) nil nil)
                       ("5" (propax) nil nil)
                       ("6" (expand "trace_semantic_rel" 1)
                        (("6" (flatten) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skeep*)
      (("6" (expand "semantic_rel" -2)
        (("6" (split)
          (("1" (inst 1 "(: STATE(envi) :)")
            (("1" (split)
              (("1" (grind) nil nil) ("2" (grind) nil nil)
               ("3" (grind) nil nil) ("4" (grind) nil nil)
               ("5" (grind) nil nil)
               ("6" (expand "trace_semantic_rel" 1)
                (("6" (flatten) (("6" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (grind) nil nil))
            nil)
           ("2" (skeep)
            (("2" (inst -3 "envi" "envo")
              (("2" (expand "semantic_rel" -2)
                (("2" (split -2)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "trace")
                          (("1" (split)
                            (("1" (propax) nil nil)
                             ("2" (propax) nil nil)
                             ("3" (propax) nil nil)
                             ("4" (propax) nil nil)
                             ("5" (propax) nil nil)
                             ("6" (expand "trace_semantic_rel" 1)
                              (("6"
                                (flatten)
                                (("6" (postpone) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (postpone) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (expand "semantic_rel" -1)
        (("7" (flatten)
          (("7" (inst 1 "(: STATE(envi), STATE(envo) :)")
            (("1" (skeep -1)
              (("1" (split)
                (("1" (grind) nil nil) ("2" (grind) nil nil)
                 ("3" (grind) nil nil) ("4" (grind) nil nil)
                 ("5" (grind) nil nil)
                 ("6" (expand "trace_semantic_rel")
                  (("6" (split)
                    (("1" (grind) nil nil) ("2" (grind) nil nil)
                     ("3" (grind) nil nil)
                     ("4" (inst 1 "r")
                      (("4" (split)
                        (("1" (grind) nil nil) ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("5" (skeep 1)
                      (("5" (inst -3 "i") (("5" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "wf_trace?")
              (("2" (skeep)
                (("2" (typepred "i") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

