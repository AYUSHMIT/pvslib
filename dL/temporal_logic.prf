(temporal_logic
 (DLGLOBALLY_append 0
  (DLGLOBALLY_append-1 nil 3888924153
   ("" (skeep*)
    (("" (expand "DLGLOBALLY")
      (("" (skeep)
        (("" (lemma "suffix_append")
          (("" (inst?)
            (("" (typepred "suffix")
              (("" (inst -3 "suffix")
                (("" (assert)
                  (("" (split)
                    (("1" (flatten) (("1" (inst -7 "suffix") nil nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (lemma "length_append[TraceState]")
                          (("2" (inst -1 "L" "t2")
                            (("2" (replace -2)
                              (("2"
                                (replace -1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1 1)
                                    (("2"
                                      (lift-if)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (hide 2 -1)
                                              (("2"
                                                (case "wf_trace?(L)")
                                                (("1"
                                                  (inst -8 "t2")
                                                  (("1"
                                                    (inst -7 "L")
                                                    (("1"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "suffix_reflexive[TraceState]")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (lemma
                                                         "nth_append[TraceState]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "L"
                                                           "t2"
                                                           "i")
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -3)
                                                                (("2"
                                                                  (inst
                                                                   -6
                                                                   "i")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (norm_DLGLOBALLY 0
  (norm_DLGLOBALLY-1 nil 3888914764
   ("" (skeep)
    (("" (expand "normDLGLOBALLY")
      (("" (expand "DLBOOL") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil))
   shostak))
 (norm_DLEVENTUALLY 0
  (norm_DLEVENTUALLY-1 nil 3888914799
   ("" (skeep)
    (("" (expand "DLBOOL")
      (("" (expand "normDLEVENTUALLY") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil))
   shostak))
 (norm_DLGE 0
  (norm_DLGE-1 nil 3888914821
   ("" (skeep)
    (("" (expand "normDLGE")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "DLEVENTUALLY")
              (("1" (expand "DLGLOBALLY")
                (("1" (assert)
                  (("1" (iff)
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (inst -1 "(: last(t) :)")
                          (("1" (skeep)
                            (("1" (typepred "suffix")
                              (("1"
                                (expand "State_Trace")
                                (("1"
                                  (lemma "suffix_length[TraceState]")
                                  (("1"
                                    (inst -1 "suffix" "(: last(t) :)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "wf_trace?")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma
                                             "suffix_same_length[TraceState]")
                                            (("1"
                                              (inst
                                               -1
                                               "(: last(t) :)"
                                               "suffix")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         -6
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -6)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -6)
                                                            (("1"
                                                              (expand
                                                               "finite_trace?")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (expand "wf_trace?")
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "i")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "suffix_last[TraceState]")
                              (("2"
                                (inst -1 "t" "rdc(t)" "(: last(t) :)")
                                (("2"
                                  (lemma "rdc_rac[TraceState]")
                                  (("2"
                                    (inst -1 "t")
                                    (("2"
                                      (expand "rac")
                                      (("2"
                                        (expand "last")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "suffix_reflexive[TraceState]")
                                            (("2"
                                              (replace -2)
                                              (("2"
                                                (inst -1 "t")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (skeep)
                          (("2" (inst 1 "(: last(t) :)")
                            (("1" (expand "State_Trace")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (split)
                              (("1"
                                (expand "wf_trace?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "i")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "suffix_1")
                                (("2"
                                  (lemma "suffix_last[TraceState]")
                                  (("2"
                                    (inst
                                     -1
                                     "suffix_1"
                                     "rdc(suffix_1)"
                                     "(: rac(suffix_1) :)")
                                    (("1"
                                      (lemma "rdc_rac[TraceState]")
                                      (("1"
                                        (inst -1 "suffix_1")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "suffix_reflexive[TraceState]")
                                            (("1"
                                              (inst -1 "suffix_1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "rac")
                                                  (("1"
                                                    (hide -2 -1)
                                                    (("1"
                                                      (lemma
                                                       "suffix_nth[TraceState]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "t"
                                                         "suffix_1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "length(suffix_1) - 1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "wf_trace?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (expand
                                                                   "length")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "wf_trace?")
                                          (("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "wf_trace?")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((normDLGE const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (suffix? def-decl "bool" more_list_props structures)
    (Trace type-eq-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (suffix_length formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (suffix_same_length formula-decl nil more_list_props structures)
    (State_Trace def-decl "bool" ltl_expr nil)
    (suffix_last formula-decl nil more_list_props structures)
    (rdc_rac formula-decl nil more_list_props structures)
    (rac const-decl "T" more_list_props structures)
    (suffix_reflexive formula-decl nil more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil))
   shostak))
 (norm_DLEG 0
  (norm_DLEG-1 nil 3888918402
   ("" (skeep)
    (("" (expand "normDLEG")
      (("" (lift-if)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "DLEVENTUALLY")
              (("1" (expand "DLGLOBALLY")
                (("1" (iff)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (inst -1 "(: last(t) :)")
                          (("1" (expand "State_Trace")
                            (("1" (expand "length")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "finite_trace?")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (expand "wf_trace?")
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "i")
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "suffix")
                              (("2"
                                (lemma "suffix_last[TraceState]")
                                (("2"
                                  (inst
                                   -1
                                   "suffix"
                                   "rdc(suffix)"
                                   "(: rac(suffix) :)")
                                  (("1"
                                    (lemma "rdc_rac[TraceState]")
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -1 "suffix")
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (lemma
                                               "suffix_reflexive[TraceState]")
                                              (("1"
                                                (inst -1 "suffix")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "rac")
                                                    (("1"
                                                      (hide -2 -1)
                                                      (("1"
                                                        (lemma
                                                         "suffix_nth[TraceState]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "t"
                                                           "suffix")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "length(suffix) - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "length")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "rac")
                                            (("2"
                                              (expand "last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "wf_trace?")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst 1 "(: last(t) :)")
                        (("1" (skeep)
                          (("1" (typepred "suffix_1")
                            (("1" (expand "wf_trace?")
                              (("1"
                                (flatten)
                                (("1"
                                  (lemma
                                   "suffix_same_length[TraceState]")
                                  (("1"
                                    (inst
                                     -1
                                     "(: last(t) :)"
                                     "suffix_1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (expand "State_Trace")
                                            (("1"
                                              (expand "length" 1)
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (expand
                                                   "finite_trace?")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "suffix_length[TraceState]")
                                          (("2"
                                            (inst
                                             -1
                                             "suffix_1"
                                             "(: last(t) :)")
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (split)
                          (("1" (expand "wf_trace?")
                            (("1" (skeep)
                              (("1"
                                (typepred "i")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "suffix_last[TraceState]")
                            (("2"
                              (inst -1 "t" "rdc(t)" "(: last(t) :)")
                              (("2"
                                (expand "last")
                                (("2"
                                  (lemma "rdc_rac[TraceState]")
                                  (("2"
                                    (inst -1 "t")
                                    (("1"
                                      (expand "rac")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "suffix_reflexive[TraceState]")
                                            (("1"
                                              (inst -1 "t")
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "t")
                                      (("2"
                                        (expand "wf_trace?")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (propax) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((normDLEG const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (suffix_same_length formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (suffix_length formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (suffix? def-decl "bool" more_list_props structures)
    (Trace type-eq-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (State_Trace def-decl "bool" ltl_expr nil)
    (rac const-decl "T" more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (suffix_reflexive formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (rdc_rac formula-decl nil more_list_props structures)
    (suffix_last formula-decl nil more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil))
   shostak))
 (dltl_SEQcap 0
  (dltl_SEQcap-1 nil 3888506957
   ("" (skeep)
    (("" (expand "ALLRUNS_tr" 1)
      (("" (skeep)
        (("" (expand "trace_semantic_rel")
          (("" (split)
            (("1" (skeep)
              (("1" (expand "ALLRUNS_tr" -7 1)
                (("1" (inst -7 "trace1")
                  (("1" (assert)
                    (("1" (lemma "car_append[TraceState]")
                      (("1" (inst -1 "cdr(trace2)" "trace1")
                        (("1" (assert)
                          (("1" (expand "nth")
                            (("1" (assert)
                              (("1"
                                (expand "normDLGLOBALLY" -8 1)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "ALLRUNS_tr" -2)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst -2 "trace2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -2)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "normDLGLOBALLY")
                                                  (("1"
                                                    (case
                                                     "finite_trace?(trace2) IFF finite_trace?(trace)")
                                                    (("1"
                                                      (case
                                                       "finite_trace?(trace2)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "last(trace2) = last(trace)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide-all-but
                                                                 (1
                                                                  -5
                                                                  -7
                                                                  -9
                                                                  -14))
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "trace2")
                                                              (("2"
                                                                (expand
                                                                 "wf_trace?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (case
                                                                     "length(trace2)=1")
                                                                    (("1"
                                                                      (expand
                                                                       "length")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length")
                                                                          (("1"
                                                                            (lift-if)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "append_null[TraceState]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "trace1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "length")
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "last_append[TraceState]")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "trace1"
                                                                                     "cdr(trace2)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -11)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "last_cdr[TraceState]")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "trace2")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "trace")
                                                              (("3"
                                                                (expand
                                                                 "wf_trace?")
                                                                (("3"
                                                                  (flatten)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide-all-but
                                                           (3
                                                            -1
                                                            -3
                                                            -5
                                                            -10))
                                                          (("2"
                                                            (postpone)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (expand
                                                           "finite_trace?")
                                                          (("2"
                                                            (case
                                                             "length(trace2)=1")
                                                            (("1"
                                                              (lemma
                                                               "append_null[TraceState]")
                                                              (("1"
                                                                (typepred
                                                                 "trace2")
                                                                (("1"
                                                                  (expand
                                                                   "wf_trace?")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "trace1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "last_append")
                                                                          (("1"
                                                                            (expand
                                                                             "last"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length")
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "last_append[TraceState]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "trace1"
                                                                 "cdr(trace2)")
                                                                (("1"
                                                                  (lemma
                                                                   "last_cdr[TraceState]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "trace2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "trace2")
                                                                      (("2"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "trace2")
                                                                  (("2"
                                                                    (expand
                                                                     "wf_trace?")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (replace -9)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide
                                                       -1
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -10
                                                       2)
                                                      (("2"
                                                        (lemma
                                                         "TraceState_STATE_eta")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "car(trace2)")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (typepred "trace")
                                      (("2"
                                        (expand "wf_trace?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (expand "finite_trace?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "ALLRUNS_tr" -3 1)
                (("2" (inst -3 "trace")
                  (("2" (assert)
                    (("2" (expand "normDLGLOBALLY" -3 1)
                      (("2" (expand "normDLGLOBALLY" 1)
                        (("2" (split -3)
                          (("1" (flatten)
                            (("1" (expand "finite_trace?")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (flatten) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_choice 0
  (dltl_choice-1 nil 3888506745
   ("" (skeep)
    (("" (expand "ALLRUNS_tr")
      (("" (skeep)
        (("" (expand "trace_semantic_rel" -4)
          (("" (assert)
            (("" (split -4)
              (("1" (postpone) nil nil)
               ("2" (inst -2 "trace") (("2" (assert) nil nil)) nil)
               ("3" (inst -3 "trace") (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_STARconcap_TCC1 0
  (dltl_STARconcap_TCC1-1 nil 3888506744 ("" (subtype-tcc) nil nil) nil
   nil
   (dltl_STARconcap subtype
    "list_props[TraceState_adt.TraceState].nth(temporal_logic.t, temporal_logic.i)"
    "(TraceState_adt.state?)")))
 (dltl_STARconcap_TCC2 0
  (dltl_STARconcap_TCC2-1 nil 3888506744 ("" (subtype-tcc) nil nil) nil
   nil
   (dltl_STARconcap subtype "(number_fields.-)(temporal_logic.k, 1)"
    "naturalnumbers.below(list_props[TraceState_adt.TraceState].length(temporal_logic.t))")))
 (dltl_STARconcap_TCC3 0
  (dltl_STARconcap_TCC3-1 nil 3888506744 ("" (subtype-tcc) nil nil) nil
   nil
   (dltl_STARconcap subtype "0"
    "naturalnumbers.below(list_props[TraceState_adt.TraceState].length(temporal_logic.t))"))))

