(temporal_logic
 (norm_DLGLOBALLY 0
  (norm_DLGLOBALLY-1 nil 3888914764
   ("" (skeep)
    (("" (expand "normDLGLOBALLY")
      (("" (expand "DLBOOL") (("" (decompose-equality) nil nil)) nil))
      nil))
    nil)
   ((normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil))
   shostak))
 (norm_DLEVENTUALLY 0
  (norm_DLEVENTUALLY-1 nil 3888914799
   ("" (skeep)
    (("" (expand "DLBOOL")
      (("" (expand "normDLEVENTUALLY")
        (("" (decompose-equality) nil nil)) nil))
      nil))
    nil)
   ((DLBOOL const-decl "bool" bool_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil))
   shostak))
 (norm_DLGE 0
  (norm_DLGE-1 nil 3888914821
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "normDLGE")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "DLGLOBALLY")
                (("1" (iff)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "final_env")
                        (("1" (assert)
                          (("1" (expand "finite_trace?")
                            (("1" (inst -1 "(: last(x!1) :)")
                              (("1"
                                (assert)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "DLEVENTUALLY_EXISTS")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -2 "max_ci(D(last(x!1)))")
                                      (("2"
                                        (lemma "DLEVENTUALLY_EXISTS")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "cut_state_diff")
                                                (("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand "length")
                                                    (("2"
                                                      (expand "length")
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "cut_state_diff")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split)
                                (("1" (grind) nil nil)
                                 ("2"
                                  (lemma "suffix_supl[TraceState]")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst 1 "rdc(x!1)")
                                        (("2"
                                          (lemma "rdc_rac[TraceState]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "rac")
                                                (("2"
                                                  (expand "last")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "x!1")
                                (("3"
                                  (expand "wf_trace?")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (skeep)
                        (("2" (expand "final_env")
                          (("2" (expand "finite_trace?")
                            (("2" (split -2)
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "DLEVENTUALLY")
                                      (("1"
                                        (inst 1 "(: last(x!1) :)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "State_Trace")
                                            (("1"
                                              (expand "init_env")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1" (grind) nil nil)
                                           ("2"
                                            (lemma
                                             "suffix_supl[TraceState]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst
                                                   1
                                                   "rdc(suffix)")
                                                  (("1"
                                                    (lemma
                                                     "rdc_rac[TraceState]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "last")
                                                          (("1"
                                                            (expand
                                                             "rac")
                                                            (("1"
                                                              (lemma
                                                               "suffix_nth[TraceState]")
                                                              (("1"
                                                                (typepred
                                                                 "suffix")
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x!1"
                                                                   "suffix")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "length(suffix) - 1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "suffix")
                                                    (("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred "suffix")
                                            (("1"
                                              (expand "wf_trace?")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "DLEVENTUALLY_EXISTS")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "length(suffix)-1")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "cut_state_diff")
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lift-if)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "suffix_nth[TraceState]")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "length(suffix)-1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "last")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "suffix_nth[TraceState]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "length(suffix)-1")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (lemma
                                                                 "suffix_nth[TraceState]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "length(suffix)-1")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "last")
                                                                          (("1"
                                                                            (expand
                                                                             "cut_state_diff"
                                                                             +)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               +)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lift-if)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cut_state_diff")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "suffix")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (lemma
                                                       "DLEVENTUALLY_EXISTS")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "length(suffix)=1")
                                                            (("1"
                                                              (expand
                                                               "last")
                                                              (("1"
                                                                (lemma
                                                                 "suffix_nth[TraceState]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -2
                                                               "0")
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (lemma "DLEVENTUALLY_EXISTS")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (typepred "suffix")
                                              (("1"
                                                (expand "wf_trace?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "suffix_nth[TraceState]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "length(suffix)-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "length(suffix) - 1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   1
                                                                   "max_ci(D(nth(x!1, length(x!1) - 1)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("2"
                                                                      (expand
                                                                       "wf_trace?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "last")
                                        (("2"
                                          (typepred "x!1")
                                          (("2"
                                            (typepred "suffix")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (lemma
                                                           "DLEVENTUALLY_EXISTS")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "length(suffix)-1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "cut_state_diff"
                                                                     +)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       +)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (split
                                                                                   1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "max_ci(D(car(suffix)))-t")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "suffix_nth[TraceState]")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "cut_state_diff"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "closed_interval")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "suffix_nth[TraceState]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "0")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "suffix_nth[TraceState]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "length(suffix)-1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 2
                                                                                                 "max_ci(D(nth(x!1, length(x!1) - 1)))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "cut_state_diff"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "cut_inf_diff")
                                                          (("2"
                                                            (lemma
                                                             "suffix_nth[TraceState]")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "length(suffix)=1")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -2
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (inst
                                                                         -3
                                                                         "0")
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (suffix? def-decl "bool" more_list_props structures)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (suffix_supl formula-decl nil more_list_props structures)
    (rdc_rac formula-decl nil more_list_props structures)
    (rac const-decl "T" more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil))
   shostak))
 (norm_DLEG 0
  (norm_DLEG-1 nil 3888918402
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "normDLEG")
        (("" (lift-if)
          (("" (split)
            (("1" (flatten)
              (("1" (iff)
                (("1" (expand "DLEVENTUALLY")
                  (("1" (expand "final_env")
                    (("1" (split)
                      (("1" (flatten)
                        (("1" (skeep)
                          (("1" (lemma "caret_suffix[TraceState]")
                            (("1" (typepred "suffix")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (split -4)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (lemma "DLGLOBALLY_FORALL")
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 -1
                                                 "length(suffix)-1")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "suffix_nth[TraceState]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "length(suffix)-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "last")
                                                              (("1"
                                                                (expand
                                                                 "finite_trace?")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (inst
                                                                           -2
                                                                           "max_ci(D(nth(x!1, length(x!1) - 1)))")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "wf_trace?")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (lemma
                                                   "DLGLOBALLY_FORALL")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "cut_state_diff(suffix, t)")
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "length(cut_state_diff(suffix, t))-1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -2)
                                                              (("1"
                                                                (case
                                                                 "length(suffix)=1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "cut_state_diff"
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lift-if)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "last")
                                                                              (("1"
                                                                                (lemma
                                                                                 "suffix_nth[TraceState]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "length(suffix)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -5)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "max_ci(D(nth(x!1, length(x!1) - 1)))-t")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (replace
                                                                                                       -5)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "cut_state_diff"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "max_ci(D(car(suffix)))")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "closed_interval"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "cut_state_diff"
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "suffix_nth[TraceState]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "length(suffix)-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1
                                                                                       1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "finite_trace?")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "last")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -10)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "max_ci(D(nth(x!1, length(x!1) - 1)))")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (replace
                                                                                                           -4)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "cut_state_diff"
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (flatten)
                                                                                                  (("4"
                                                                                                    (split
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "wf_trace?")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "cut_state_diff")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (lemma
                                                   "DLGLOBALLY_FORALL")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "last")
                                                            (("1"
                                                              (expand
                                                               "finite_trace?")
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (lemma
                                                                   "suffix_nth[TraceState]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "length(suffix)-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "length(suffix)=1")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "wf_trace?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   "0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "wf_trace?")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "cut_inf_diff")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst 1 "(: last(x!1) :)")
                          (("1" (assert)
                            (("1" (expand "finite_trace?")
                              (("1"
                                (split -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "DLGLOBALLY_FORALL")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (typepred "i")
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "max_ci(D(last(x!1)))")
                                    (("2"
                                      (lemma "DLGLOBALLY_FORALL")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "i")
                                              (("2"
                                                (expand
                                                 "cut_state_diff")
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (grind) nil nil)
                             ("2" (lemma "suffix_supl[TraceState]")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "rdc(x!1)")
                                    (("2"
                                      (expand "last")
                                      (("2"
                                        (lemma "rdc_rac[TraceState]")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "rac")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "finite_trace?")
                              (("3"
                                (split -3)
                                (("1" (assert) nil nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "x!1")
                            (("3" (expand "wf_trace?")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (suffix? def-decl "bool" more_list_props structures)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (caret_suffix formula-decl nil even_more_list_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (suffix_supl formula-decl nil more_list_props structures)
    (rac const-decl "T" more_list_props structures)
    (rdc_rac formula-decl nil more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil))
   shostak))
 (dltl_SEQcap 0
  (dltl_SEQcap-1 nil 3888506957
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_tr" 1)
              (("1" (skeep)
                (("1" (expand "trace_semantic_rel")
                  (("1" (split -3)
                    (("1" (skeep)
                      (("1" (expand "ALLRUNS_tr" -6 1)
                        (("1" (inst -6 "trace1")
                          (("1" (assert)
                            (("1" (lemma "car_append[TraceState]")
                              (("1"
                                (typepred "trace1")
                                (("1"
                                  (typepred "trace2")
                                  (("1"
                                    (expand "wf_trace?")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (split -11)
                                        (("1"
                                          (expand
                                           "normDLGLOBALLY"
                                           -1
                                           1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "ALLRUNS_tr" -1)
                                              (("1"
                                                (inst -1 "trace2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "last(trace) = last(trace2)")
                                                    (("1"
                                                      (expand
                                                       "normDLGLOBALLY")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "finite_trace?")
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (case
                                                               "DLGLOBALLY(State_Trace(Q))(trace1) AND DLGLOBALLY(State_Trace(Q))(trace2) IMPLIES DLGLOBALLY(State_Trace(Q))(trace)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -3)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "final_env")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -5)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -2
                                                                 4)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -14)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lemma
                                                                           "DLGLOBALLY_FORALL")
                                                                          (("1"
                                                                            (replace
                                                                             -3)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "Q"
                                                                               "append(trace1, cdr(trace2))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "nth_append[TraceState]")
                                                                                    (("1"
                                                                                      (inst?)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "length_append[TraceState]")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lift-if)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "Q"
                                                                                                           "trace1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -5
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "last"
                                                                                                                               -20)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (skeep)
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -2
                                                                                                                           "t")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -4
                                                                                                             "Q"
                                                                                                             "trace2")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -4
                                                                                                                 "i-length(trace1)+1")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -4)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 -1
                                                                                                                                 2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (flatten)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (skeep)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "t")
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      (("3"
                                                                                                                                        (typepred
                                                                                                                                         "t")
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          (("3"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             1)
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -2)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       1
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (replace
                                                                           -1)
                                                                          (("2"
                                                                            (lemma
                                                                             "DLGLOBALLY_append")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "last_append[TraceState]")
                                                      (("2"
                                                        (split -13)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "cdr(trace2)=null")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "append_null[TraceState]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "last"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth")
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "last_cdr[TraceState]")
                                                              (("2"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("2"
                                              (split -11)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "ALLRUNS_tr" -3 1)
                        (("2" (inst -3 "trace")
                          (("2" (assert)
                            (("2" (expand "normDLGLOBALLY")
                              (("2"
                                (expand "finite_trace?")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_tr")
              (("2" (skeep)
                (("2" (expand "normDLGLOBALLY")
                  (("2" (split)
                    (("1" (flatten)
                      (("1" (split)
                        (("1" (skeep)
                          (("1" (case "last(trace_1)=car(trace)")
                            (("1"
                              (inst -5 "append(trace_1,cdr(trace))")
                              (("1"
                                (assert)
                                (("1"
                                  (split -5)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "finite_trace?")
                                      (("1"
                                        (case "cdr(trace)=null")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "append_null[TraceState]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "last" 1)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "trace")
                                                          (("1"
                                                            (expand
                                                             "wf_trace?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -8)
                                                                      (("1"
                                                                        (split
                                                                         2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "final_env")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "last"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "DLGLOBALLY_FORALL")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "Q"
                                                                                                   "trace")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (skeep)
                                                                                                      (("3"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "Q"
                                                                                                         "trace_1")
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -1)
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   +)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "length(trace_1)-1")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "last")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -11)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "t")
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "t")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "trace_1")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "wf_trace?")
                                                                                                                          (("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "last_append[TraceState]")
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "last_cdr[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "DLGLOBALLY(State_Trace(Q))(trace)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   -5)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 3
                                                                 -4)
                                                                (("2"
                                                                  (lemma
                                                                   "DLGLOBALLY_FORALL")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "Q"
                                                                     "append(trace_1, cdr(trace))")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "Q"
                                                                         "trace")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (lemma
                                                                               "nth_append[TraceState]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "trace_1"
                                                                                 "cdr(trace)"
                                                                                 "_")
                                                                                (("2"
                                                                                  (case
                                                                                   "i=0")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "length(trace_1)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           +)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               (+)
                                                                                               rl)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last"
                                                                                                   +)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -3
                                                                                                     "length(trace_1)-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "length_append[TraceState]")
                                                                                                          (("1"
                                                                                                            (inst?)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (assert)
                                                                                                                      (("3"
                                                                                                                        (skeep)
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -2
                                                                                                                           "t")
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "t")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               -1)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "last")
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("4"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "trace_1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_trace?")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (grind)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "trace_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_trace?")
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     +)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i-1+length(trace_1)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "trace")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "wf_trace?")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "i-1+length(trace_1)")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "length_append[TraceState]")
                                                                                                                (("1"
                                                                                                                  (inst?)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         3)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -6)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (flatten)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (skeep)
                                                                                                                                (("3"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "t")
                                                                                                                                  (("3"
                                                                                                                                    (typepred
                                                                                                                                     "t")
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       -1)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "length_append[TraceState]")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "trace")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (expand "finite_trace?")
                                      (("2"
                                        (lemma
                                         "last_append[TraceState]")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "last_cdr[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (typepred
                                                         "trace")
                                                        (("1"
                                                          (typepred
                                                           "trace_1")
                                                          (("1"
                                                            (expand
                                                             "wf_trace?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (lemma
                                                                 "DLGLOBALLY_FORALL")
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "Q"
                                                                   "append(trace_1, cdr(trace))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "Q"
                                                                       "trace")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (lemma
                                                                             "length_append[TraceState]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (lemma
                                                                                 "nth_append[TraceState]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "trace_1"
                                                                                   "cdr(trace)"
                                                                                   "_")
                                                                                  (("1"
                                                                                    (case
                                                                                     "i=0")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "length(trace_1)-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -4
                                                                                           "length(trace_1)-1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               +)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -12)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "t")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "length(trace_1)+i-1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "i")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 +)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "length(trace_1)+i-1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (skeep)
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "t")
                                                                                                                      (("3"
                                                                                                                        (typepred
                                                                                                                         "t")
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           -1)
                                                                                                                          (("3"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "trace")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "append_null[TraceState]")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "trace_1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "append_null[TraceState]")
                                              (("2"
                                                (inst -1 "trace_1")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "trace_1")
                                    (("3"
                                      (expand "wf_trace?")
                                      (("3"
                                        (flatten)
                                        (("3"
                                          (expand "init_env")
                                          (("3"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (expand "trace_semantic_rel" 1)
                                    (("4"
                                      (flatten)
                                      (("4"
                                        (inst 1 "trace_1" "trace")
                                        (("4" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "wf_append")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (inst -4 "append(trace_1,trace)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred "trace_1")
                                        (("1"
                                          (typepred "trace")
                                          (("1"
                                            (expand "wf_trace?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "last_append[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "finite_trace?")
                                                      (("1"
                                                        (split 4)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "final_env")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "DLGLOBALLY_append")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "wf_append_finite")
                                                                    (("2"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma
                                           "last_append[TraceState]")
                                          (("2"
                                            (expand "finite_trace?")
                                            (("2"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "DLGLOBALLY_append")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (lemma
                                                               "wf_append_finite")
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (typepred "trace")
                                                    (("2"
                                                      (expand
                                                       "wf_trace?")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (expand "init_env")
                                      (("3"
                                        (typepred "trace_1")
                                        (("3"
                                          (expand "wf_trace?")
                                          (("3"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("3"
                                              (inst?)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (replace -1)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (expand "trace_semantic_rel" 1)
                                      (("4"
                                        (flatten)
                                        (("4"
                                          (inst 1 "trace_1" "trace")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "wf_append_finite")
                                  (("2" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "trace_1")
                              (("3"
                                (expand "wf_trace?")
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "exists_trace_env")
                          (("2" (inst -1 "B" "final_env(trace_1)")
                            (("2" (skeep)
                              (("2"
                                (expand "final_env" -3)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst
                                         -6
                                         "append(trace_1,cdr(trace))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (lemma
                                                 "DLGLOBALLY_FORALL")
                                                (("1"
                                                  (inst-cp
                                                   -1
                                                   "Q"
                                                   "append(trace_1, cdr(trace))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "Q"
                                                       "trace_1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "nth_append[TraceState]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "length_append[TraceState]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (split
                                                                                 -3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -2
                                                                                         "t")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[TraceState]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "DLGLOBALLY_FORALL")
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "Q"
                                                   "append(trace_1, cdr(trace))")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "Q"
                                                       "trace_1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "i")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "nth_append[TraceState]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "length_append[TraceState]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -2)
                                                                              (("1"
                                                                                (split
                                                                                 -3)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -2
                                                                                         "t")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (lemma
                                                                   "length_append[TraceState]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "init_env")
                                              (("3"
                                                (lemma
                                                 "car_append[TraceState]")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (replace -1)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (expand
                                               "trace_semantic_rel"
                                               1)
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (inst
                                                   1
                                                   "trace_1"
                                                   "trace")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (assert)
                                                      (("4"
                                                        (expand
                                                         "final_env")
                                                        (("4"
                                                          (expand
                                                           "init_env")
                                                          (("4"
                                                            (assert)
                                                            (("4"
                                                              (lemma
                                                               "TraceState_STATE_extensionality")
                                                              (("4"
                                                                (inst?)
                                                                (("4"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "wf_append")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lemma
                                                 "TraceState_STATE_extensionality")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst
                                         -5
                                         "append(trace_1,trace)")
                                        (("1"
                                          (split -5)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (lemma
                                               "DLGLOBALLY_append")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "wf_append_finite")
                                                    (("1"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "DLGLOBALLY_append")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "wf_append_finite")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "init_env")
                                            (("3"
                                              (lemma
                                               "car_append[TraceState]")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (replace -1)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (expand
                                             "trace_semantic_rel"
                                             1)
                                            (("4"
                                              (flatten)
                                              (("4"
                                                (inst
                                                 1
                                                 "trace_1"
                                                 "trace")
                                                (("4"
                                                  (assert)
                                                  (("4"
                                                    (expand
                                                     "final_env")
                                                    (("4"
                                                      (expand
                                                       "init_env")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "wf_append_finite")
                                          (("2" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -1 "trace_1")
                        (("2" (assert)
                          (("2" (expand "trace_semantic_rel" 3)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length_append formula-decl nil list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (DLGLOBALLY_append formula-decl nil ltl_expr nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (exists_trace_env formula-decl nil trace_semantics nil)
    (TraceState_STATE_extensionality formula-decl nil TraceState_adt
     nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (wf_append formula-decl nil trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (dltl_SEQcup 0
  (dltl_SEQcup-1 nil 3889013508
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_tr")
              (("1" (skeep)
                (("1" (expand "trace_semantic_rel" -3)
                  (("1" (split -3)
                    (("1" (skeep)
                      (("1" (typepred "trace1")
                        (("1" (typepred "trace2")
                          (("1" (expand "wf_trace?")
                            (("1" (flatten)
                              (("1"
                                (inst -10 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -10)
                                    (("1"
                                      (expand "normDLEVENTUALLY" -1)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (inst -1 "trace2")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "normDLEVENTUALLY"
                                               3)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (case
                                                     "finite_trace?(trace)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (case
                                                           "final_env(trace)=final_env(trace2)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -13)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (lemma
                                                                     "DLEVENTUALLY_EXISTS")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "Q"
                                                                       "append(trace1, cdr(trace2))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "Q"
                                                                           "trace2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "nth_append[TraceState]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "trace1"
                                                                                   "cdr(trace2)"
                                                                                   "length(trace1)-1+i")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "length(trace1)-1+i")
                                                                                      (("1"
                                                                                        (case
                                                                                         "i=0")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   3
                                                                                                                   "t")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (flatten)
                                                                                                            (("3"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       4
                                                                                                                       "t")
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "t")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "length_append[TraceState]")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (replace
                                                                   -1)
                                                                  (("2"
                                                                    (lemma
                                                                     "DLEVENTUALLY_append")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "last_append[TraceState]")
                                                            (("2"
                                                              (split
                                                               -13)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (case
                                                                   "cdr(trace2)=null")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (lemma
                                                                       "append_null[TraceState]")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (expand
                                                                               "final_env"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "last"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "final_env"
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (inst?)
                                                                      (("1"
                                                                        (expand
                                                                         "final_env"
                                                                         2)
                                                                        (("1"
                                                                          (replace
                                                                           -3)
                                                                          (("1"
                                                                            (lemma
                                                                             "last_cdr[TraceState]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (expand
                                                                       "final_env"
                                                                       2)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "finite_trace?")
                                                      (("2"
                                                        (lemma
                                                         "last_append[TraceState]")
                                                        (("2"
                                                          (split -12)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "cdr(trace2)=null")
                                                              (("1"
                                                                (lemma
                                                                 "append_null[TraceState]")
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "last_cdr[TraceState]")
                                                                (("2"
                                                                  (inst?)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (case
                                                     "DLEVENTUALLY(State_Trace(Q))(trace)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 5)
                                                      (("2"
                                                        (split -10)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -2)
                                                            (("1"
                                                              (lemma
                                                               "DLEVENTUALLY_EXISTS")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "Q"
                                                                 "append(trace1, cdr(trace2))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "Q"
                                                                     "trace2")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (lemma
                                                                           "nth_append[TraceState]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "trace1"
                                                                             "cdr(trace2)"
                                                                             "length(trace1)-1+i")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (typepred
                                                                                 "i")
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       -2)
                                                                                      (("1"
                                                                                        (case
                                                                                         "i=0")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (inst
                                                                                               2
                                                                                               "length(trace1)-1")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "finite_trace?")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       3
                                                                                                                       "t")
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "t")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           -1)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 3
                                                                                                 "length(trace1) - 1 + i")
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   4
                                                                                                                   "t")
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (lemma
                                                             "DLEVENTUALLY_append")
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "DLEVENTUALLY_implies_norm")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -10)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (lemma
                                                     "DLEVENTUALLY_EXISTS")
                                                    (("1"
                                                      (inst-cp
                                                       -1
                                                       "Q"
                                                       "append(trace1, cdr(trace2))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Q"
                                                           "trace1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (typepred
                                                                 "i")
                                                                (("1"
                                                                  (lemma
                                                                   "length_append[TraceState]")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (inst
                                                                       2
                                                                       "i")
                                                                      (("1"
                                                                        (lemma
                                                                         "nth_append[TraceState]")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (split
                                                                                 -4)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         3
                                                                                         "t")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "wf_append")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (lemma
                                                     "DLEVENTUALLY_append")
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "car_append[TraceState]")
                                      (("2"
                                        (split -10)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst?)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand "init_env")
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (expand "init_env")
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -3 "trace")
                        (("2" (assert)
                          (("2" (expand "normDLEVENTUALLY" -3)
                            (("2" (expand "finite_trace?")
                              (("2"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "DLEVENTUALLY_implies_norm")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_tr")
              (("2" (skeep)
                (("2" (expand "normDLEVENTUALLY" 1 1)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (typepred "trace_1")
                          (("1" (typepred "trace")
                            (("1" (expand "wf_trace?")
                              (("1"
                                (flatten)
                                (("1"
                                  (case "last(trace_1)=car(trace)")
                                  (("1"
                                    (inst
                                     -9
                                     "append(trace_1,cdr(trace))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "normDLEVENTUALLY")
                                          (("1"
                                            (expand "finite_trace?")
                                            (("1"
                                              (expand "final_env")
                                              (("1"
                                                (case
                                                 "last(trace) = last(append(trace_1, cdr(trace)))")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -2)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (assert)
                                                            (("3"
                                                              (split 3)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     1)
                                                                    (("1"
                                                                      (lemma
                                                                       "DLEVENTUALLY_EXISTS")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "Q"
                                                                         "append(trace_1, cdr(trace))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -1
                                                                               "Q"
                                                                               "trace_1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "Q"
                                                                                   "trace")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "nth_append[TraceState]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "i")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "length_append[TraceState]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             2
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           3
                                                                                                                           "t")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               2
                                                                                                               "i - length(trace_1)+1")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 2)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               3
                                                                                                                               "t")
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "t")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "DLEVENTUALLY_EXISTS")
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "Q"
                                                               "append(trace_1, cdr(trace))")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "Q"
                                                                     "trace_1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "Q"
                                                                         "trace")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "nth_append[TraceState]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "i")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "length_append[TraceState]")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lift-if)
                                                                                          (("2"
                                                                                            (split
                                                                                             -3)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (split
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   3
                                                                                                                   "t")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     2
                                                                                                     "i - length(trace_1)+1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (flatten)
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     3
                                                                                                                     "t")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case
                                                   "cdr(trace)=null")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "append_null[TraceState]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "last_append[TraceState]")
                                                    (("2"
                                                      (inst?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (lemma
                                                           "last_cdr[TraceState]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "init_env")
                                          (("2"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand
                                           "trace_semantic_rel"
                                           1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (inst
                                               1
                                               "trace_1"
                                               "trace")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "wf_append")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -8 "append(trace_1,trace)")
                                    (("1"
                                      (split -8)
                                      (("1"
                                        (expand "normDLEVENTUALLY")
                                        (("1"
                                          (expand "finite_trace?")
                                          (("1"
                                            (expand "final_env")
                                            (("1"
                                              (case
                                               "last(trace) = last(append(trace_1, trace))")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (split -2)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (assert)
                                                          (("3"
                                                            (split 4)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "DLEVENTUALLY_append")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "wf_append_finite")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "finite_trace?")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "DLEVENTUALLY_append")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "wf_append_finite")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "finite_trace?")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "last_append[TraceState]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "length_append[TraceState]")
                                                (("3"
                                                  (inst?)
                                                  (("3"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "init_env")
                                        (("2"
                                          (lemma
                                           "car_append[TraceState]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (expand "trace_semantic_rel" 1)
                                        (("3"
                                          (flatten)
                                          (("3"
                                            (inst 1 "trace_1" "trace")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "wf_append_finite")
                                      (("2" (inst?) nil nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -1 "trace_1")
                        (("2" (assert)
                          (("2" (split)
                            (("1" (expand "normDLEVENTUALLY")
                              (("1" (propax) nil nil)) nil)
                             ("2" (expand "trace_semantic_rel" 1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (init_env const-decl "Environment" trace_semantics nil)
    (DLEVENTUALLY_implies_norm formula-decl nil ltl_expr nil)
    (wf_append formula-decl nil trace_semantics nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (DLEVENTUALLY_append formula-decl nil ltl_expr nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_append_finite formula-decl nil trace_semantics nil))
   shostak))
 (dltl_SEQtriangleEG 0
  (dltl_SEQtriangleEG-1 nil 3889025577
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_tr")
              (("1" (skeep)
                (("1" (expand "trace_semantic_rel" -3)
                  (("1" (split -3)
                    (("1" (skeep)
                      (("1" (typepred "trace1")
                        (("1" (typepred "trace2")
                          (("1" (expand "wf_trace?")
                            (("1" (flatten)
                              (("1"
                                (inst -10 "trace1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -10)
                                    (("1"
                                      (expand "normDLEG")
                                      (("1"
                                        (inst -1 "trace2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "finite_trace?"
                                             (-1 3))
                                            (("1"
                                              (case
                                               "last(trace2) = last(trace)")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "final_env"
                                                     (-2 3))
                                                    (("1"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace -3)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "DLEG_nth")
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "Q"
                                                               "trace")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "Q"
                                                                   "trace2")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (split
                                                                         -12)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (inst
                                                                             2
                                                                             "length(trace1)-1+j")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nth_append[TraceState]")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "j")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lift-if)
                                                                                              (("1"
                                                                                                (split)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "j=0")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "finite_trace?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "last")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "nth_append[TraceState]")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "trace1"
                                                                                                                       "cdr(trace2)"
                                                                                                                       "i + length(trace1) - 1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "i")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -3)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -8)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "length_append[TraceState]")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if
                                                                                                                                           -3)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -3)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "i=0")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -12
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "nth"
                                                                                                                                                               -12)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -10)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (split
                                                                                                                                                                     -12)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "nth"
                                                                                                                                                                             1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (inst
                                                                                                                                                                                 3
                                                                                                                                                                                 "T")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (skeep)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -2
                                                                                                                                                                                     "t")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "nth"
                                                                                                                                                                                       1)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "T")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "nth"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("3"
                                                                                                                                                                      (flatten)
                                                                                                                                                                      (("3"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -10
                                                                                                                                                   "i")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nth"
                                                                                                                                                     -10)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (split
                                                                                                                                                         -10)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "length"
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (propax)
                                                                                                                                                          nil
                                                                                                                                                          nil)
                                                                                                                                                         ("3"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("3"
                                                                                                                                                            (assert)
                                                                                                                                                            (("3"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("3"
                                                                                                                                                                (inst
                                                                                                                                                                 -2
                                                                                                                                                                 "t")
                                                                                                                                                                (("3"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   1)
                                                                                                                                                                  (("3"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("4"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("4"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "length"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "nth_append[TraceState]")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "trace1"
                                                                                                                 "cdr(trace2)"
                                                                                                                 "i + length(trace1) - 1+j")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "i")
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -6)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "length_append[TraceState]")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -3)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -8
                                                                                                                                   "i")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       -8)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -8)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (flatten)
                                                                                                                                            (("3"
                                                                                                                                              (assert)
                                                                                                                                              (("3"
                                                                                                                                                (split)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         5
                                                                                                                                                         "T")
                                                                                                                                                        (("1"
                                                                                                                                                          (skeep)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -2
                                                                                                                                                             "t")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "nth"
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "T")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "nth"
                                                                                                                                                             -1)
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("4"
                                                                                                                                            (flatten)
                                                                                                                                            (("4"
                                                                                                                                              (assert)
                                                                                                                                              (("4"
                                                                                                                                                (split)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -2
                                                                                                                                                         "t")
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "nth"
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -3)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "length_append[TraceState]")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               3
                                                                               "length(trace1)+j")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "nth_append[TraceState]")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "trace1"
                                                                                     "trace2"
                                                                                     "length(trace1)+j")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "length_append[TraceState]")
                                                                                          (("1"
                                                                                            (inst?)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "j")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "trace1"
                                                                                                       "trace2"
                                                                                                       "length(trace1) + i + j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -4)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -7
                                                                                                                   "i")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (flatten)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        (("3"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   5
                                                                                                                                   "T")
                                                                                                                                  (("1"
                                                                                                                                    (skeep)
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "t")
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (flatten)
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        (("4"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -2
                                                                                                                                   "t")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "j")
                                                                                (("2"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "length_append[TraceState]")
                                                                                    (("2"
                                                                                      (inst?)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1 4)
                                                (("2"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "cdr(trace2)=null")
                                                      (("1"
                                                        (lemma
                                                         "append_null[TraceState]")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "last"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "last_append[TraceState]")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (lemma
                                                             "last_cdr[TraceState]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (lemma
                                                       "last_append[TraceState]")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (split -11)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -2)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "init_env" (1 -10))
                                      (("2"
                                        (split -9)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (lemma
                                             "car_append[TraceState]")
                                            (("2"
                                              (inst?)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -3 "trace")
                        (("2" (assert)
                          (("2" (expand "normDLEG")
                            (("2" (expand "finite_trace?")
                              (("2"
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_tr")
              (("2" (skeep)
                (("2" (expand "normDLEG")
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (typepred "trace_1")
                          (("1" (typepred "trace")
                            (("1" (expand "wf_trace?")
                              (("1"
                                (flatten)
                                (("1"
                                  (case "last(trace_1) = car(trace)")
                                  (("1"
                                    (inst
                                     -9
                                     "append(trace_1,cdr(trace))")
                                    (("1"
                                      (case
                                       "last(append(trace_1, cdr(trace))) = last(trace)")
                                      (("1"
                                        (expand
                                         "finite_trace?"
                                         (-10 3))
                                        (("1"
                                          (expand "final_env" (-10 3))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -10)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma "DLEG_nth")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "Q"
                                                       "trace")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "Q"
                                                           "append(trace_1, cdr(trace))")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (typepred
                                                                 "j")
                                                                (("2"
                                                                  (lemma
                                                                   "nth_append[TraceState]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lemma
                                                                         "length_append[TraceState]")
                                                                        (("2"
                                                                          (inst?)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if)
                                                                              (("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       2
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "i=0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -6
                                                                                                       "length(trace_1)-j-1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nth_append[TraceState]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "trace_1"
                                                                                                             "cdr(trace)"
                                                                                                             "length(trace_1)-1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "last")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -10)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -7)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 +)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (skeep)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           4
                                                                                                                                           "T")
                                                                                                                                          (("1"
                                                                                                                                            (skeep)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "t")
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "t")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "nth"
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (flatten)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 +)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (split)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           5
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (skeep)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "t")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "t")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nth"
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (typepred
                                                                                                                                             "D(nth[TraceState](trace, i))")
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "closed_interval")
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           6
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (skeep)
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "t")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (expand
                                                                                                                                             "hp")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -5
                                                                                                       "length(trace_1)-j+i-1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nth_append[TraceState]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "trace_1"
                                                                                                             "cdr(trace)"
                                                                                                             "i + length(trace_1) - 1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           +)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             3)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -7)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (flatten)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (skeep)
                                                                                                                                    (("3"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "t")
                                                                                                                                      (("3"
                                                                                                                                        (typepred
                                                                                                                                         "t")
                                                                                                                                        (("3"
                                                                                                                                          (expand
                                                                                                                                           "nth"
                                                                                                                                           -1)
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("4"
                                                                                                                                (flatten)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         3
                                                                                         "j - length(trace_1)+1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           3
                                                                                           1)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_append[TraceState]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "trace_1"
                                                                                                     "cdr(trace)"
                                                                                                     "i + j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -1
                                                                                                           2)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   +)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     3
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (skeep)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     5
                                                                                                                                     "T")
                                                                                                                                    (("1"
                                                                                                                                      (skeep)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "t")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "t")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "nth"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("4"
                                                                                                                        (flatten)
                                                                                                                        (("4"
                                                                                                                          (assert)
                                                                                                                          (("4"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (skeep)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "t")
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "t")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "nth"
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (replace
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (expand "init_env")
                                                (("3"
                                                  (lemma
                                                   "car_append[TraceState]")
                                                  (("3"
                                                    (inst?)
                                                    (("3"
                                                      (replace -1)
                                                      (("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (expand
                                                 "trace_semantic_rel"
                                                 1)
                                                (("4"
                                                  (flatten)
                                                  (("4"
                                                    (inst
                                                     1
                                                     "trace_1"
                                                     "trace")
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (case "cdr(trace)=null")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma
                                             "append_null[TraceState]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "last" 1 2)
                                                  (("1"
                                                    (expand "length" 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "last_append[TraceState]")
                                          (("2"
                                            (inst?)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (lemma
                                                 "last_cdr[TraceState]")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (assert) nil nil)
                                       ("4"
                                        (assert)
                                        (("4" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "wf_append")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -8 "append(trace_1,trace)")
                                      (("1"
                                        (expand "finite_trace?" (-8 4))
                                        (("1"
                                          (expand "final_env" (-8 4))
                                          (("1"
                                            (case
                                             "last(append(trace_1, trace)) = last(trace)")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -9)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "DLEG_nth")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "Q"
                                                           "trace")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "Q"
                                                               "append(trace_1, trace)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (lemma
                                                                       "nth_append[TraceState]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "length_append[TraceState]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if)
                                                                                  (("2"
                                                                                    (split
                                                                                     -2)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         2
                                                                                         "0")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -5
                                                                                                   "length(trace_1)-j+i")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "nth_append[TraceState]")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "trace_1"
                                                                                                         "trace"
                                                                                                         "length(trace_1) + i")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -6)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (assert)
                                                                                                                  (("3"
                                                                                                                    (split
                                                                                                                     4)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -3
                                                                                                                             "t")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "D(nth[TraceState](trace, i))")
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "closed_interval")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "t")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (flatten)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  (("4"
                                                                                                                    (split
                                                                                                                     4)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "0")
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -3
                                                                                                                             "t")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "hp")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (flatten)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           3
                                                                                           "j - length(trace_1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -4
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "nth_append[TraceState]")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "trace_1"
                                                                                                     "trace"
                                                                                                     "i+j")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (split)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (flatten)
                                                                                                              (("3"
                                                                                                                (assert)
                                                                                                                (("3"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (skeep)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           5
                                                                                                                           "T")
                                                                                                                          (("1"
                                                                                                                            (skeep)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "t")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (flatten)
                                                                                                              (("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (flatten)
                                                                                                                  (("4"
                                                                                                                    (split)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "t")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (expand
                                                       "init_env")
                                                      (("3"
                                                        (lemma
                                                         "car_append[TraceState]")
                                                        (("3"
                                                          (inst?)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (replace
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (expand
                                                     "trace_semantic_rel"
                                                     1)
                                                    (("4"
                                                      (flatten)
                                                      (("4"
                                                        (inst
                                                         1
                                                         "trace_1"
                                                         "trace")
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "last_append[TraceState]")
                                              (("2" (inst?) nil nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -1 "trace_1")
                        (("2" (assert)
                          (("2" (expand "trace_semantic_rel" 3)
                            (("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (append def-decl "list[T]" list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DLEG_nth formula-decl nil ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append_null formula-decl nil list_props nil)
    (last_cdr formula-decl nil more_list_props structures)
    (last_append formula-decl nil more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_append formula-decl nil trace_semantics nil)
    (hp const-decl "bool" interval_def ODEs)
    (wf_append_finite formula-decl nil trace_semantics nil))
   shostak))
 (dltl_SEQtriangleGE 0
  (dltl_SEQtriangleGE-1 nil 3889087486
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_tr")
              (("1" (skeep)
                (("1" (expand "trace_semantic_rel" -3)
                  (("1" (split -3)
                    (("1" (skeep)
                      (("1" (inst -6 "trace1")
                        (("1" (assert)
                          (("1" (split -6)
                            (("1" (expand "normDLGE")
                              (("1"
                                (inst -1 "trace2")
                                (("1"
                                  (typepred "trace1")
                                  (("1"
                                    (typepred "trace2")
                                    (("1"
                                      (expand "wf_trace?")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "finite_trace?")
                                            (("1"
                                              (case
                                               "last(trace2) = last(trace)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (split 3)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "final_env")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "DLGE_nth")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "Q"
                                                           "trace")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "Q"
                                                             "trace2")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "j")
                                                                  (("2"
                                                                    (split
                                                                     -13)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "nth_append[TraceState]")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "length_append[TraceState]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lift-if
                                                                                       -2)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -7
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -7
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (skeep)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       3
                                                                                                       "length(trace1)-j+i-1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "nth_append[TraceState]")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "trace1"
                                                                                                             "cdr(trace2)"
                                                                                                             "length(trace1) - 1 + i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (lift-if
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (case
                                                                                                                         "i=0")
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -3)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "last")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   -10)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -10)
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             3)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (skeep)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   -3
                                                                                                                                                   "T")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       1
                                                                                                                                                       "t")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "t")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "nth"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "nth"
                                                                                                                                                     1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -2
                                                                                                                                                   "0")
                                                                                                                                                  (("1"
                                                                                                                                                    (skeep)
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       2
                                                                                                                                                       "t")
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (typepred
                                                                                                                                                         "t")
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "nth"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "D(nth[TraceState](trace2, i))")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (replace
                                                                                                                                                         -2)
                                                                                                                                                        (("2"
                                                                                                                                                          (expand
                                                                                                                                                           "closed_interval")
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (flatten)
                                                                                                                                        (("3"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         -9)
                                                                                                                                        (("1"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 5
                                                                                                                                                 "t")
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "t")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "nth"
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("3"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "i")
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -4)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -6
                                                                                                 "j - length(trace1)+1")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         4
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "nth_append[TraceState]")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "trace1"
                                                                                                               "cdr(trace2)"
                                                                                                               "i+j")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (typepred
                                                                                                                   "i")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -8)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -2
                                                                                                                                         "T")
                                                                                                                                        (("1"
                                                                                                                                          (skeep)
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             5
                                                                                                                                             "t")
                                                                                                                                            (("1"
                                                                                                                                              (typepred
                                                                                                                                               "t")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "nth"
                                                                                                                                                   -1)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (typepred
                                                                                                                                           "T")
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "nth"
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("3"
                                                                                                                                  (flatten)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (split)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           6
                                                                                                                                           "t")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (typepred
                                                                                                                                               "t")
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "nth"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "nth_append[TraceState]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "length_append[TraceState]")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lift-if)
                                                                                      (("2"
                                                                                        (split
                                                                                         -2)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -6
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -6
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     4
                                                                                                     "length(trace1)-j+i")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "nth_append[TraceState]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "trace1"
                                                                                                           "trace2"
                                                                                                           "length(trace1) + i")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "0")
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 5
                                                                                                                                 "t")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "D(nth[TraceState](trace2, i))")
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "closed_interval")
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (inst
                                                                                                                             -2
                                                                                                                             "0")
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 6
                                                                                                                                 "t")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "hp")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 6
                                                                                                                                 "t")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "j-length(trace1)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       5
                                                                                                       "i")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "nth_append[TraceState]")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "trace1"
                                                                                                             "trace2"
                                                                                                             "i+j")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("2"
                                                                                                                  (split)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -4)
                                                                                                                    (("1"
                                                                                                                      (flatten)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (split)
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (skeep)
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "T")
                                                                                                                                    (("2"
                                                                                                                                      (skeep)
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         6
                                                                                                                                         "t")
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   7
                                                                                                                                   "t")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (hide -5 4)
                                                  (("2"
                                                    (split -9)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "cdr(trace2)=null")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (lemma
                                                             "append_null[TraceState]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "last"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "last_append[TraceState]")
                                                          (("2"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "last_cdr[TraceState]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "last_append[TraceState]")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "init_env")
                              (("2"
                                (lemma "car_append[TraceState]")
                                (("2"
                                  (split -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (replace -2)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -3 "trace")
                        (("2" (assert)
                          (("2" (expand "normDLGE")
                            (("2" (expand "finite_trace?")
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_tr")
              (("2" (skeep)
                (("2" (expand "normDLGE")
                  (("2" (expand "trace_semantic_rel" -1)
                    (("2" (split)
                      (("1" (flatten)
                        (("1" (skeep)
                          (("1" (typepred "trace_1")
                            (("1" (typepred "trace")
                              (("1"
                                (expand "wf_trace?")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (case "last(trace_1) = car(trace)")
                                    (("1"
                                      (inst
                                       -9
                                       "append(trace_1,cdr(trace))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finite_trace?")
                                          (("1"
                                            (expand "final_env")
                                            (("1"
                                              (case
                                               "last(trace) = last(append(trace_1, cdr(trace)))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -10)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "DLGE_nth")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "Q"
                                                             "append(trace_1, cdr(trace))")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "Q"
                                                               "trace")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -2
                                                                         "length(trace_1)-1+j")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "nth_append[TraceState]")
                                                                            (("1"
                                                                              (lemma
                                                                               "length_append[TraceState]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if)
                                                                                        (("1"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (case
                                                                                             "j=0")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last")
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "nth_append[TraceState]")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lift-if)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "i+j=0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "last")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               3
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     +)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -3)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "T")
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     4
                                                                                                                                     "t")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "T")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             4
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               4)
                                                                                                              (("1"
                                                                                                                (split)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "T")
                                                                                                                              (("1"
                                                                                                                                (skeep)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   5
                                                                                                                                   "t")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (typepred
                                                                                                                                 "T")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 6
                                                                                                                                 "t")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (typepred
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "j")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -5)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "i")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "j")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "length_append[TraceState]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand "init_env")
                                                    (("3"
                                                      (lemma
                                                       "car_append[TraceState]")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (replace
                                                             -1)
                                                            (("3"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (flatten)
                                                    (("4"
                                                      (inst
                                                       1
                                                       "trace_1"
                                                       "trace")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case
                                                 "cdr(trace)=null")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (lemma
                                                     "append_null[TraceState]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "last"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "last_append[TraceState]")
                                                  (("2"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (lemma
                                                         "last_cdr[TraceState]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst -8 "append(trace_1,trace)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -8)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "finite_trace?")
                                              (("1"
                                                (expand "final_env")
                                                (("1"
                                                  (lemma
                                                   "last_append[TraceState]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "finite_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "last_append[TraceState]")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "DLGE_nth")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "Q"
                                                           "append(trace_1, trace)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "Q"
                                                               "trace")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "j")
                                                                    (("2"
                                                                      (lemma
                                                                       "length_append[TraceState]")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (inst
                                                                           -3
                                                                           "length(trace_1)+j")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "nth_append[TraceState]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "nth_append[TraceState]")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "trace_1"
                                                                                         "trace"
                                                                                         "i + length(trace_1) + j")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               2
                                                                                               "i")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -5)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "T")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       3
                                                                                                                       "t")
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (split)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   4
                                                                                                                   "t")
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (expand "init_env")
                                            (("3"
                                              (lemma
                                               "car_append[TraceState]")
                                              (("3"
                                                (inst?)
                                                (("3"
                                                  (replace -1)
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("4"
                                            (flatten)
                                            (("4"
                                              (inst
                                               1
                                               "trace_1"
                                               "trace")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "wf_append_finite")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil)
                                     ("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (inst -1 "trace_1")
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (car_append formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (hp const-decl "bool" interval_def ODEs)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (length_append formula-decl nil list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (DLGE_nth formula-decl nil ltl_expr nil)
    (last_append formula-decl nil more_list_props structures)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (append def-decl "list[T]" list_props nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (wf_append_finite formula-decl nil trace_semantics nil)
    (wf_append formula-decl nil trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (dltl_choice 0
  (dltl_choice-1 nil 3888506745
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_tr")
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -4)
                    (("1" (split)
                      (("1" (inst -2 "trace") (("1" (assert) nil nil))
                        nil)
                       ("2" (inst -3 "trace") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "ALLRUNS_tr")
                (("2" (split)
                  (("1" (skeep)
                    (("1" (inst -3 "trace")
                      (("1" (assert)
                        (("1" (expand "trace_semantic_rel" 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -3 "trace")
                      (("2" (assert)
                        (("2" (expand "trace_semantic_rel" 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil))
   shostak))
 (dltl_choice_st 0
  (dltl_choice_st-1 nil 3899896375
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "DLAND")
        (("" (expand "ALLRUNS_st")
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (expand "trace_semantic_rel" -4)
                    (("1" (split)
                      (("1" (inst -2 "trace") (("1" (assert) nil nil))
                        nil)
                       ("2" (inst -3 "trace") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "trace_semantic_rel" -1)
                  (("2" (split)
                    (("1" (skeep)
                      (("1" (inst?) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (skeep)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil))
   shostak))
 (dltl_TESTcap 0
  (dltl_TESTcap-1 nil 3889020669
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (expand "DLNOT")
          (("" (expand "DLIMPLIES")
            (("" (flatten)
              (("" (expand "ALLRUNS_tr")
                (("" (skeep)
                  (("" (expand "normDLGLOBALLY")
                    (("" (expand "trace_semantic_rel")
                      (("" (assert)
                        (("" (split -4)
                          (("1" (flatten)
                            (("1" (expand "finite_trace?")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "last")
                                  (("1"
                                    (expand "init_env")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "last")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (expand "nth")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -6)
                                                        (("1"
                                                          (lemma
                                                           "DLGLOBALLY_FORALL")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "i")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "trace")
                              (("2"
                                (expand "valid_trace?")
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (nth def-decl "T" list_props nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLOR const-decl "bool" bool_expr nil))
   shostak))
 (dltl_TESTcap_con 0
  (dltl_TESTcap_con-1 nil 3899803590
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "DLAND")
              (("1" (expand "DLNOT")
                (("1" (expand "DLOR")
                  (("1" (expand "ALLRUNS_tr")
                    (("1" (flatten)
                      (("1" (inst -1 "(:STATE(x!1):)")
                        (("1" (expand "init_env")
                          (("1" (expand "trace_semantic_rel")
                            (("1" (assert)
                              (("1"
                                (expand "nth")
                                (("1"
                                  (expand "normDLGLOBALLY")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "DLGLOBALLY_FORALL")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "valid_trace?")
                          (("2" (expand "wf_trace?")
                            (("2" (expand "finite_trace?")
                              (("2"
                                (expand "last")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "nth")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "i")
                                        (("2"
                                          (expand "length")
                                          (("2"
                                            (expand "length")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "DLOR")
              (("2" (expand "DLNOT")
                (("2" (expand "DLAND")
                  (("2" (expand "ALLRUNS_tr")
                    (("2" (skeep)
                      (("2" (typepred "trace")
                        (("2" (expand "trace_semantic_rel")
                          (("2" (split -5)
                            (("1" (flatten)
                              (("1"
                                (expand "nth")
                                (("1"
                                  (expand "init_env")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -7)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "normDLGLOBALLY")
                                            (("1"
                                              (expand "finite_trace?")
                                              (("1"
                                                (expand "final_env")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (lemma
                                                           "DLGLOBALLY_FORALL")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "i")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "valid_trace?")
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (expand "last")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (length_singleton formula-decl nil more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil))
   shostak))
 (dltl_TESTcup 0
  (dltl_TESTcup-1 nil 3889108169
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (expand "DLIMPLIES")
          (("" (flatten)
            (("" (expand "ALLRUNS_tr")
              (("" (skeep)
                (("" (expand "trace_semantic_rel")
                  (("" (expand "normDLEVENTUALLY")
                    (("" (split -3)
                      (("1" (flatten)
                        (("1" (expand "finite_trace?")
                          (("1" (expand "final_env")
                            (("1" (expand "last")
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "init_env")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -5)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -4)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (lemma
                                                   "DLEVENTUALLY_EXISTS")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (inst 1 "0")
                                                        (("2"
                                                          (expand
                                                           "nth")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (typepred "trace")
                          (("2" (expand "valid_trace?")
                            (("2" (expand "finite_trace?")
                              (("2"
                                (expand "last")
                                (("2"
                                  (replace -3)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (nth def-decl "T" list_props nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (DLOR const-decl "bool" bool_expr nil))
   shostak))
 (dltl_TESTcup_eq 0
  (dltl_TESTcup_eq-1 nil 3899807951
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (expand "DLOR")
          (("" (expand "DLNOT")
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel")
                      (("1" (split -3)
                        (("1" (flatten)
                          (("1" (expand "nth")
                            (("1" (expand "init_env")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "normDLEVENTUALLY")
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "finite_trace?")
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (split)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "DLEVENTUALLY_EXISTS")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             1
                                                             "0")
                                                            (("2"
                                                              (expand
                                                               "nth")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (expand "last")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "ALLRUNS_tr")
                  (("2" (inst -1 "(: STATE(x!1) :)")
                    (("1" (assert)
                      (("1" (expand "init_env")
                        (("1" (expand "trace_semantic_rel")
                          (("1" (assert)
                            (("1" (expand "nth")
                              (("1"
                                (expand "normDLEVENTUALLY")
                                (("1"
                                  (expand "finite_trace?")
                                  (("1"
                                    (expand "final_env")
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (lemma
                                             "DLEVENTUALLY_EXISTS")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (typepred "i")
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (expand
                                                         "length")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "valid_trace?")
                      (("2" (expand "finite_trace?")
                        (("2" (expand "wf_trace?")
                          (("2" (assert)
                            (("2" (expand "last")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_singleton formula-decl nil more_list_props structures)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (dltl_TESTEG 0
  (dltl_TESTEG-1 nil 3889108694
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (expand "DLNOT")
          (("" (decompose-equality)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "ALLRUNS_tr")
                    (("1" (skeep)
                      (("1" (expand "trace_semantic_rel")
                        (("1" (expand "normDLEG")
                          (("1" (split -3)
                            (("1" (flatten)
                              (("1"
                                (expand "init_env")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -5)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "finite_trace?")
                                            (("1"
                                              (expand "final_env")
                                              (("1"
                                                (expand "last")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "init_env")
                                    (("2"
                                      (expand "last")
                                      (("2"
                                        (expand "nth")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -5)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "DLEVENTUALLY")
                                                (("2"
                                                  (inst 2 "trace")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "DLGLOBALLY")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "suffix")
                                                          (("1"
                                                            (lemma
                                                             "suffix_length[TraceState]")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -4)
                                                                  (("1"
                                                                    (lemma
                                                                     "suffix_nth[TraceState]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "0")
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "length(suffix)=1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "length(suffix)=2")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "State_Trace")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "init_env")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "wf_trace?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "wf_trace?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "suffix_reflexive[TraceState]")
                                                    (("2"
                                                      (inst?)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "ALLRUNS_tr")
                    (("2" (expand "trace_semantic_rel")
                      (("2" (case "P(x!1)")
                        (("1" (inst -2 "(: STATE(x!1) :)")
                          (("1" (assert)
                            (("1" (expand "init_env")
                              (("1"
                                (expand "nth")
                                (("1"
                                  (expand "normDLEG")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "length")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (inst -1 "(: STATE(x!1), ERROR :)")
                            (("1" (expand "init_env")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "normDLEG")
                                          (("1"
                                            (expand "finite_trace?")
                                            (("1"
                                              (expand "last")
                                              (("1"
                                                (expand "length")
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand
                                                           "DLEVENTUALLY")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "suffix")
                                                              (("1"
                                                                (expand
                                                                 "wf_trace?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (lemma
                                                                     "suffix_length[TraceState]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "suffix_nth[TraceState]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "0")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "length(suffix)=1")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (case
                                                                                                     "length(suffix)=2")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "DLGLOBALLY")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -7
                                                                                                               "suffix")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "State_Trace")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "init_env")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -2)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (lemma
                                                                                                                 "suffix_reflexive[TraceState]")
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide-all-but
                                                                                                       (1
                                                                                                        2
                                                                                                        -3
                                                                                                        -2))
                                                                                                      (("2"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (ERROR adt-constructor-decl "(error?)" TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (suffix? def-decl "bool" more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (suffix_length formula-decl nil more_list_props structures)
    (suffix_reflexive formula-decl nil more_list_props structures)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil))
   shostak))
 (dltl_TESTEG_eq 0
  (dltl_TESTEG_eq-1 nil 3899808583
   ("" (skeep)
    (("" (expand "DLOR")
      (("" (expand "DLNOT")
        (("" (decompose-equality)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel")
                      (("1" (expand "normDLEG")
                        (("1" (split -3)
                          (("1" (flatten)
                            (("1" (expand "init_env")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -5)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "finite_trace?")
                                          (("1"
                                            (expand "final_env")
                                            (("1"
                                              (expand "last")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (typepred "trace")
                              (("2"
                                (expand "valid_trace?")
                                (("2"
                                  (expand "finite_trace?")
                                  (("2"
                                    (expand "last")
                                    (("2"
                                      (replace -3)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "ALLRUNS_tr")
                  (("2" (expand "trace_semantic_rel")
                    (("2" (inst -1 "(: STATE(x!1) :)")
                      (("1" (assert)
                        (("1" (expand "init_env")
                          (("1" (expand "nth")
                            (("1" (expand "normDLEG")
                              (("1"
                                (expand "finite_trace?")
                                (("1"
                                  (expand "final_env")
                                  (("1"
                                    (expand "last")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "valid_trace?")
                        (("2" (expand "finite_trace?")
                          (("2" (expand "last")
                            (("2" (assert)
                              (("2"
                                (expand "wf_trace?")
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLOR const-decl "bool" bool_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (final_env const-decl "Environment" trace_semantics nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DLNOT const-decl "bool" bool_expr nil))
   shostak))
 (dltl_TESTGE 0
  (dltl_TESTGE-1 nil 3889109022
   ("" (skeep)
    (("" (expand "DLOR")
      (("" (expand "DLAND")
        (("" (expand "DLNOT")
          (("" (expand "DLIMPLIES")
            (("" (flatten)
              (("" (expand "ALLRUNS_tr")
                (("" (skeep)
                  (("" (expand "trace_semantic_rel")
                    (("" (assert)
                      (("" (expand "normDLGE")
                        (("" (expand "finite_trace?")
                          (("" (expand "final_env")
                            (("" (expand "last")
                              ((""
                                (split -3)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "init_env")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -5)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "valid_trace?")
                                      (("2"
                                        (expand "finite_trace?")
                                        (("2"
                                          (expand "last")
                                          (("2"
                                            (replace -3)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLOR const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (DLIMPLIES const-decl "bool" bool_expr nil)
    (DLAND const-decl "bool" bool_expr nil))
   shostak))
 (dltl_TESTGE_eq 0
  (dltl_TESTGE_eq-1 nil 3899810228
   ("" (skeep)
    (("" (decompose-equality)
      (("" (expand "DLOR")
        (("" (expand "DLNOT")
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel")
                      (("1" (split -3)
                        (("1" (flatten)
                          (("1" (expand "nth")
                            (("1" (expand "init_env")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "normDLGE")
                                      (("1"
                                        (expand "finite_trace?")
                                        (("1"
                                          (expand "final_env")
                                          (("1"
                                            (expand "last")
                                            (("1"
                                              (expand "nth")
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (typepred "trace")
                            (("2" (expand "valid_trace?")
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (expand "last")
                                  (("2"
                                    (replace -3)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "ALLRUNS_tr")
                  (("2" (inst -1 "(: STATE(x!1) :)")
                    (("1" (expand "init_env")
                      (("1" (expand "normDLGE")
                        (("1" (expand "trace_semantic_rel")
                          (("1" (expand "finite_trace?")
                            (("1" (expand "final_env")
                              (("1"
                                (expand "last")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "valid_trace?")
                      (("2" (expand "finite_trace?")
                        (("2" (expand "last")
                          (("2" (expand "wf_trace?")
                            (("2" (expand "nth")
                              (("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "i")
                                    (("2"
                                      (expand "length")
                                      (("2"
                                        (expand "length")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLOR const-decl "bool" bool_expr nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (HP type-decl nil HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (dltl_ASSIGNcap 0
  (dltl_ASSIGNcap-1 nil 3889022728
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_tr")
                (("1" (expand "ALLRUNS_st")
                  (("1" (skeep)
                    (("1" (assert)
                      (("1" (typepred "trace")
                        (("1" (case "finite_trace?(trace)")
                          (("1" (inst -5 "trace")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "normDLGLOBALLY")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "DLGLOBALLY_FORALL")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "final_env")
                                                  (("1"
                                                    (expand "last")
                                                    (("1"
                                                      (expand
                                                       "init_env")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "trace_semantic_rel")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -9)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (case
                                                                       "i=0")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "trace_semantic_rel")
                            (("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (expand "last")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "ALLRUNS_tr")
                (("2" (expand "ALLRUNS_st")
                  (("2" (split)
                    (("1" (expand "trace_semantic_rel")
                      (("1" (name "envo" "assign_sub(l)(x!1)")
                        (("1" (inst -2 "(: STATE(x!1), STATE(envo) :)")
                          (("1" (expand "length")
                            (("1" (expand "length")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "nth" -2 1)
                                  (("1"
                                    (expand "nth" -2 1)
                                    (("1"
                                      (expand "nth" -2 1)
                                      (("1"
                                        (expand "init_env")
                                        (("1"
                                          (expand "nth" -2 1)
                                          (("1"
                                            (expand "nth" -2 1)
                                            (("1"
                                              (expand "nth" -2 1)
                                              (("1"
                                                (expand "nth" -2 3)
                                                (("1"
                                                  (expand "nth" -2 3)
                                                  (("1"
                                                    (expand "nth" -2 3)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       -2
                                                       3)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (expand
                                                           "normDLGLOBALLY")
                                                          (("1"
                                                            (expand
                                                             "finite_trace?")
                                                            (("1"
                                                              (expand
                                                               "last")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "length")
                                                                  (("1"
                                                                    (expand
                                                                     "length")
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "DLGLOBALLY_FORALL")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "0")
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "assign_env_alt")
                                                          (("2"
                                                            (expand
                                                             "assign_sub")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lift-if)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "assign_env_alt")
                                                          (("3"
                                                            (expand
                                                             "assign_sub")
                                                            (("3"
                                                              (inst?)
                                                              (("3"
                                                                (flatten)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "varj")
                                                                    (("3"
                                                                      (inst
                                                                       -3
                                                                       "varj")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "wf_trace?")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (inst -3 "trace")
                        (("1" (assert)
                          (("1" (expand "normDLGLOBALLY")
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "DLGLOBALLY_FORALL")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand
                                             "trace_semantic_rel")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -3)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -1 "1")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "valid_trace?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (assign_env_alt formula-decl nil substitution nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (assign_sub const-decl "Environment" substitution nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (last const-decl "T" more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (HP type-decl nil HP_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_ASSIGNcup 0
  (dltl_ASSIGNcup-1 nil 3889023836
   ("" (skeep)
    (("" (expand "DLOR")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_tr")
                (("1" (skeep)
                  (("1" (expand "normDLEVENTUALLY")
                    (("1" (expand "trace_semantic_rel")
                      (("1" (flatten)
                        (("1" (expand "finite_trace?")
                          (("1" (expand "last")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (split)
                                  (("1"
                                    (lemma "DLEVENTUALLY_EXISTS")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst 1 "0")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "init_env")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "ALLRUNS_st")
                                    (("2"
                                      (inst -1 "trace")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "trace_semantic_rel")
                                          (("2"
                                            (split)
                                            (("1"
                                              (lemma
                                               "DLEVENTUALLY_EXISTS")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst 1 "1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "last")
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (propax) nil nil)
                                             ("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (expand "ALLRUNS_st")
                (("2" (skeep)
                  (("2" (expand "ALLRUNS_tr")
                    (("2" (inst -1 "trace")
                      (("1" (assert)
                        (("1" (expand "normDLEVENTUALLY")
                          (("1" (lemma "DLEVENTUALLY_EXISTS")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (expand "trace_semantic_rel")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "init_env")
                                              (("1"
                                                (case "i=0")
                                                (("1"
                                                  (expand "nth")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "valid_trace?")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLOR const-decl "bool" bool_expr nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (nth def-decl "T" list_props nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (HP type-decl nil HP_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_ASSIGNEG 0
  (dltl_ASSIGNEG-1 nil 3889023948
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_st")
              (("1" (expand "ALLRUNS_tr")
                (("1" (skeep)
                  (("1" (inst -1 "trace")
                    (("1" (assert)
                      (("1" (expand "normDLEG")
                        (("1" (expand "finite_trace?")
                          (("1" (expand "last")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "finite_trace?")
                      (("2" (expand "last")
                        (("2" (expand "trace_semantic_rel")
                          (("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_st")
              (("2" (expand "ALLRUNS_tr")
                (("2" (skeep)
                  (("2" (inst -1 "trace")
                    (("1" (assert)
                      (("1" (expand "normDLEG")
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (expand "valid_trace?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (normDLEG const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_ASSIGNGE 0
  (dltl_ASSIGNGE-1 nil 3889024123
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS_st")
              (("1" (expand "ALLRUNS_tr")
                (("1" (skeep)
                  (("1" (inst -1 "trace")
                    (("1" (assert)
                      (("1" (expand "normDLGE")
                        (("1" (expand "finite_trace?")
                          (("1" (expand "last")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "finite_trace?")
                      (("2" (expand "last")
                        (("2" (expand "trace_semantic_rel")
                          (("2" (assert)
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS_st")
              (("2" (expand "ALLRUNS_tr")
                (("2" (skeep)
                  (("2" (inst -1 "trace")
                    (("1" (expand "normDLGE") (("1" (assert) nil nil))
                      nil)
                     ("2" (expand "valid_trace?")
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last const-decl "T" more_list_props structures)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_DIFFcap 0
  (dltl_DIFFcap-1 nil 3889024783
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLNOT")
        (("" (expand "DLOR")
          (("" (decompose-equality)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "ALLRUNS_tr")
                    (("1" (skeep)
                      (("1" (case "Q(x!1)")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (expand "trace_semantic_rel")
                                (("1"
                                  (expand "normDLGLOBALLY")
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "ALLRUNS_st")
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -5 "trace")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "final_env")
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "DLGLOBALLY_FORALL")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (expand "init_env")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -7)
                                                          (("2"
                                                            (expand
                                                             "finite_trace?")
                                                            (("2"
                                                              (expand
                                                               "last")
                                                              (("2"
                                                                (expand
                                                                 "ALLRUNS_st")
                                                                (("2"
                                                                  (inst-cp
                                                                   -6
                                                                   "trace")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "DLGLOBALLY_FORALL")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "fs")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "t=0")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "solution_odes_u?")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "solution_odes?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "env_at_t(f, fs, x!1)(0)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "t>0")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -10
                                                                                                             "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(r:(closed_interval(0,t))): env_at_t(f, fs, x!1)(r)) :)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "init_env")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "final_env")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "last")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       -10)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "db_max")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "trace_semantic_rel"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             3
                                                                                                                                             "fs")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (decompose-equality)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nth")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "nth")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "t_1")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "nth"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -9
                                                                                                                                                         "t_1")
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "D(nth[TraceState](trace, 0))")
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "closed_interval")
                                                                                                                                                                (("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "t")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -3)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "nth")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "solution_odes_subset")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "D(car(trace))"
                                                                                                                                                   "f"
                                                                                                                                                   "x!1"
                                                                                                                                                   "fs"
                                                                                                                                                   "closed_interval(0, t)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "D(car[TraceState](trace))")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "closed_interval")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "finite_trace?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_trace?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "last")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "i!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "solution_odes_u?")
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "solution_odes?")
                                                                                                                  (("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       " env_at_t(f, fs, x!1)(0)")
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "x!1")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "dd?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("5"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "D(nth(trace, i))")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "closed_interval")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (replace -2)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand
                                                     "finite_trace?")
                                                    (("3"
                                                      (expand "last")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "DLGLOBALLY_FORALL")
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "i")
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (expand
                                                                       "nth")
                                                                      (("3"
                                                                        (replace
                                                                         -3)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "init_env")
                                                                            (("3"
                                                                              (replace
                                                                               -8)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "t")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "ALLRUNS_st")
                                                                                    (("3"
                                                                                      (case
                                                                                       "t=0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "fs")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "solution_odes_u?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "solution_odes?")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         " env_at_t(f, fs, x!1)(0)")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(r:(closed_interval(0,t))): env_at_t(f, fs, x!1)(r)) :)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "init_env")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "final_env")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "db_max")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "trace_semantic_rel"
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       3
                                                                                                                       "fs")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (decompose-equality)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "nth")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "t_1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -7
                                                                                                                                   "t_1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "hp")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "solution_odes_subset")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "hp(0)"
                                                                                                                             "f"
                                                                                                                             "x!1"
                                                                                                                             "fs"
                                                                                                                             "closed_interval(0, t)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "fs")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "closed_interval")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "hp")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "hp")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "fs")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "solution_odes_u?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "solution_odes?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "nth")
                                                                                                    (("3"
                                                                                                      (replace
                                                                                                       -12)
                                                                                                      (("3"
                                                                                                        (typepred
                                                                                                         " env_at_t(f, fs, x!1)(0)")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "x!1")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (typepred "trace")
                                        (("2"
                                          (expand "valid_trace?")
                                          (("2"
                                            (expand "finite_trace?")
                                            (("2"
                                              (expand "last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "trace_semantic_rel" -3)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "init_env")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred
                                               "behavior(car(trace))")
                                              (("2"
                                                (inst -4 "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "init_env")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "D(car[TraceState](trace))")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (expand
                                                           "closed_interval")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (typepred
                                               "inf_behavior(car(trace))")
                                              (("3"
                                                (inst -4 "0")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "init_env")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "valid_trace?")
                                      (("2"
                                        (expand "finite_trace?")
                                        (("2"
                                          (expand "last")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (inst -1 "(: STATE(x!1) :)")
                        (("1" (assert)
                          (("1" (expand "init_env")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (lemma "DLGLOBALLY_FORALL")
                                    (("1"
                                      (expand "normDLGLOBALLY")
                                      (("1"
                                        (expand "finite_trace?")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (expand "ALLRUNS_st")
                      (("2" (skeep)
                        (("2" (expand "ALLRUNS_tr")
                          (("2" (inst -3 "trace")
                            (("1" (assert)
                              (("1"
                                (expand "normDLGLOBALLY")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "DLGLOBALLY_FORALL")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel")
                                            (("1"
                                              (expand "final_env")
                                              (("1"
                                                (expand "last")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "0")
                                                            (("1"
                                                              (typepred
                                                               "trace")
                                                              (("1"
                                                                (expand
                                                                 "wf_trace?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -6
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "init_env")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "max_ci(D(car(trace)))")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "finite_trace?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "last")
                                                                                    (("3"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (typepred
                                                         "trace")
                                                        (("2"
                                                          (expand
                                                           "finite_trace?")
                                                          (("2"
                                                            (expand
                                                             "last")
                                                            (("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "trace")
                              (("2"
                                (expand "valid_trace?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (DLOR const-decl "bool" bool_expr nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (<= const-decl "bool" reals nil) nil nil
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (valid_trace? const-decl "bool" trace_semantics nil) nil
    (final_env const-decl "Environment" trace_semantics nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (nth def-decl "T" list_props nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (solution_odes_subset formula-decl nil ODEs_equiv nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length_singleton formula-decl nil more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    nil nil nil nil nil
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil) nil
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (hp const-decl "bool" interval_def ODEs) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (suffix? def-decl "bool" more_list_props structures) nil nil
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (HP type-decl nil HP_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_DIFFcap_eq 0
  (dltl_DIFFcap_eq-1 nil 3899985467
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLNOT")
        (("" (expand "DLOR")
          (("" (decompose-equality)
            (("" (iff)
              (("" (split)
                (("1" (flatten)
                  (("1" (expand "ALLRUNS_tr")
                    (("1" (skeep)
                      (("1" (case "Q(x!1)")
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (expand "trace_semantic_rel")
                                (("1"
                                  (expand "normDLGLOBALLY")
                                  (("1"
                                    (split -4)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "ALLRUNS_st")
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -5 "trace")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "final_env")
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -3)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "DLGLOBALLY_FORALL")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (replace -2)
                                                (("2"
                                                  (expand "init_env")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "nth")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -7)
                                                          (("2"
                                                            (expand
                                                             "finite_trace?")
                                                            (("2"
                                                              (expand
                                                               "last")
                                                              (("2"
                                                                (expand
                                                                 "ALLRUNS_st")
                                                                (("2"
                                                                  (inst-cp
                                                                   -6
                                                                   "trace")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "DLGLOBALLY_FORALL")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "fs")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -11)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "t=0")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "solution_odes_u?")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "solution_odes?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "env_at_t(f, fs, x!1)(0)")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -2
                                                                                                                       "x!1")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (case
                                                                                                           "t>0")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -10
                                                                                                             "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(r:(closed_interval(0,t))): env_at_t(f, fs, x!1)(r)) :)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "init_env")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "final_env")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "last")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       -10)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         -10)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "db_max")
                                                                                                                              (("1"
                                                                                                                                (inst?)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "trace_semantic_rel"
                                                                                                                                       3)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "nth")
                                                                                                                                          (("1"
                                                                                                                                            (inst
                                                                                                                                             3
                                                                                                                                             "fs")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 3)
                                                                                                                                                (("1"
                                                                                                                                                  (decompose-equality)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nth")
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (expand
                                                                                                                                                     "nth")
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (skeep)
                                                                                                                                                  (("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "t_1")
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "nth"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -9
                                                                                                                                                         "t_1")
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "D(nth[TraceState](trace, 0))")
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "closed_interval")
                                                                                                                                                                (("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "t")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (expand
                                                                                                                                                                         "nth")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -3)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (expand
                                                                                                                                               "nth")
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "solution_odes_subset")
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -1
                                                                                                                                                   "D(car(trace))"
                                                                                                                                                   "f"
                                                                                                                                                   "x!1"
                                                                                                                                                   "fs"
                                                                                                                                                   "closed_interval(0, t)")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (typepred
                                                                                                                                                     "D(car[TraceState](trace))")
                                                                                                                                                    (("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "closed_interval")
                                                                                                                                                        (("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (skeep)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "finite_trace?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "wf_trace?")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "last")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "i!1")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (expand
                                                                                                               "solution_odes_u?")
                                                                                                              (("3"
                                                                                                                (flatten)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "solution_odes?")
                                                                                                                  (("3"
                                                                                                                    (flatten)
                                                                                                                    (("3"
                                                                                                                      (typepred
                                                                                                                       " env_at_t(f, fs, x!1)(0)")
                                                                                                                      (("3"
                                                                                                                        (inst
                                                                                                                         -2
                                                                                                                         "x!1")
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("4"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "dd?")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (inst?)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("5"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "D(nth(trace, i))")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "closed_interval")
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (flatten)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (replace -2)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand
                                                     "finite_trace?")
                                                    (("3"
                                                      (expand "last")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (lemma
                                                           "DLGLOBALLY_FORALL")
                                                          (("3"
                                                            (inst?)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (skeep)
                                                                (("3"
                                                                  (typepred
                                                                   "i")
                                                                  (("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (expand
                                                                       "nth")
                                                                      (("3"
                                                                        (replace
                                                                         -3)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "init_env")
                                                                            (("3"
                                                                              (replace
                                                                               -8)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "t")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "ALLRUNS_st")
                                                                                    (("3"
                                                                                      (case
                                                                                       "t=0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "fs")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "solution_odes_u?")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -12)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "solution_odes?")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         " env_at_t(f, fs, x!1)(0)")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "x!1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         -8
                                                                                         "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(r:(closed_interval(0,t))): env_at_t(f, fs, x!1)(r)) :)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "init_env")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "final_env")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "last")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "db_max")
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "trace_semantic_rel"
                                                                                                                 3)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       3
                                                                                                                       "fs")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           3)
                                                                                                                          (("1"
                                                                                                                            (decompose-equality)
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "nth")
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "t_1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -1)
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -7
                                                                                                                                   "t_1")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "hp")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "solution_odes_subset")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "hp(0)"
                                                                                                                             "f"
                                                                                                                             "x!1"
                                                                                                                             "fs"
                                                                                                                             "closed_interval(0, t)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (typepred
                                                                                                                                 "fs")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "closed_interval")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "hp")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (grind)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "hp")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "fs")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "solution_odes_u?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "solution_odes?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "nth")
                                                                                                    (("3"
                                                                                                      (replace
                                                                                                       -12)
                                                                                                      (("3"
                                                                                                        (typepred
                                                                                                         " env_at_t(f, fs, x!1)(0)")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "x!1")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (typepred "trace")
                                        (("2"
                                          (expand "valid_trace?")
                                          (("2"
                                            (expand "finite_trace?")
                                            (("2"
                                              (expand "last")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "trace_semantic_rel" -3)
                          (("2" (assert)
                            (("2" (hide -1)
                              (("2"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "init_env")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred
                                               "behavior(car(trace))")
                                              (("2"
                                                (inst -4 "0")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "init_env")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   "D(car[TraceState](trace))")
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (expand
                                                           "closed_interval")
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (typepred
                                               "inf_behavior(car(trace))")
                                              (("3"
                                                (inst -4 "0")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "init_env")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "valid_trace?")
                                      (("2"
                                        (expand "finite_trace?")
                                        (("2"
                                          (expand "last")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (split)
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (inst -1 "(: STATE(x!1) :)")
                        (("1" (assert)
                          (("1" (expand "init_env")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (lemma "DLGLOBALLY_FORALL")
                                    (("1"
                                      (expand "normDLGLOBALLY")
                                      (("1"
                                        (expand "finite_trace?")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (expand "ALLRUNS_st")
                      (("2" (skeep)
                        (("2" (expand "ALLRUNS_tr")
                          (("2" (inst -3 "trace")
                            (("1" (assert)
                              (("1"
                                (expand "normDLGLOBALLY")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "DLGLOBALLY_FORALL")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel")
                                            (("1"
                                              (expand "final_env")
                                              (("1"
                                                (expand "last")
                                                (("1"
                                                  (hide -4)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "0")
                                                            (("1"
                                                              (typepred
                                                               "trace")
                                                              (("1"
                                                                (expand
                                                                 "wf_trace?")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -6
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "init_env")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (split
                                                                             -5)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -8
                                                                                     "max_ci(D(car(trace)))")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (expand
                                                                                   "finite_trace?")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "last")
                                                                                    (("3"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("3"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (typepred
                                                         "trace")
                                                        (("2"
                                                          (expand
                                                           "finite_trace?")
                                                          (("2"
                                                            (expand
                                                             "last")
                                                            (("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "trace")
                              (("2"
                                (expand "valid_trace?")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (DLOR const-decl "bool" bool_expr nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (<= const-decl "bool" reals nil)
    (trace skolem-const-decl "(finite_trace?)" temporal_logic nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (last const-decl "T" more_list_props structures)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (trace skolem-const-decl "(valid_trace?)" temporal_logic nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (nth def-decl "T" list_props nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (solution_odes_subset formula-decl nil ODEs_equiv nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (t_1 skolem-const-decl
     "(D(nth((: STATE_DIFF(closed_interval(0, t), x!1,
                     LAMBDA (r: (closed_interval(0, t))):
                       env_at_t(f, fs, x!1)(r)) :),
       0)))" temporal_logic nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length_singleton formula-decl nil more_list_props structures)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (t skolem-const-decl "(D(nth(trace, i)))" temporal_logic nil)
    (i skolem-const-decl "below(length(trace))" temporal_logic nil)
    (f skolem-const-decl "ODEs" temporal_logic nil)
    (fs skolem-const-decl
     "(solution_odes_u?(D(nth(trace, 0)), f, s0(nth(trace, 0))))"
     temporal_logic nil)
    (x!1 skolem-const-decl "[nat -> real]" temporal_logic nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (dd? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (fs skolem-const-decl
     "(solution_odes_u?(hp(0), f, s0(nth(trace, 0))))" temporal_logic
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (suffix? def-decl "bool" more_list_props structures)
    (t_1 skolem-const-decl
     "(D(nth((: STATE_DIFF(closed_interval(0, t), x!1,
                     LAMBDA (r: (closed_interval(0, t))):
                       env_at_t(f, fs, x!1)(r)) :),
       0)))" temporal_logic nil)
    (t skolem-const-decl "(hp(0))" temporal_logic nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (normDLGLOBALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ODEs type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (HP type-decl nil HP_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (DLNOT const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_DIFFcup_TCC1 0
  (dltl_DIFFcup_TCC1-1 nil 3898864597 ("" (subtype-tcc) nil nil) nil
   nil (dltl_DIFFcup subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (dltl_DIFFcup 0
  (dltl_DIFFcup-1 nil 3889265660
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (decompose-equality)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "ALLRUNS_st")
                      (("1" (expand "SOMERUNS_st")
                        (("1" (skeep)
                          (("1" (expand "trace_semantic_rel" -7)
                            (("1" (split -7)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "init_env")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -9)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "normDLEVENTUALLY")
                                                  (("1"
                                                    (expand
                                                     "finite_trace?")
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (replace -3)
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (case
                                                               "Q(x!1)")
                                                              (("1"
                                                                (lemma
                                                                 "DLEVENTUALLY_EXISTS")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "nth")
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (inst
                                                                 -4
                                                                 "trace")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "trace_semantic_rel"
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "DLNOT")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "normDLEVENTUALLY")
                                              (("2"
                                                (expand
                                                 "finite_trace?")
                                                (("2"
                                                  (expand "last")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (lemma
                                                         "DLEVENTUALLY_EXISTS")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "0")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "init_env")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -10)
                                                                            (("2"
                                                                              (inst
                                                                               -6
                                                                               "trace")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "trace_semantic_rel"
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -9)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "DLNOT")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "fs")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   2
                                                                                                   "fs")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -4
                                                                                                         "t")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (flatten)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (typepred "fs")
                                          (("3"
                                            (expand "normDLEVENTUALLY")
                                            (("3"
                                              (expand "finite_trace?")
                                              (("3"
                                                (expand "last")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (lemma
                                                     "DLEVENTUALLY_EXISTS")
                                                    (("3"
                                                      (inst?)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (inst 1 "0")
                                                          (("3"
                                                            (replace
                                                             -3)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "init_env")
                                                                (("3"
                                                                  (expand
                                                                   "nth")
                                                                  (("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (replace
                                                                       -11)
                                                                      (("3"
                                                                        (typepred
                                                                         "trace!1")
                                                                        (("3"
                                                                          (expand
                                                                           "finite_trace?")
                                                                          (("3"
                                                                            (expand
                                                                             "last")
                                                                            (("3"
                                                                              (hide
                                                                               -9)
                                                                              (("3"
                                                                                (expand
                                                                                 "trace_semantic_rel"
                                                                                 -10)
                                                                                (("3"
                                                                                  (split
                                                                                   -10)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "DLBOOL")
                                                                                                (("1"
                                                                                                  (split
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "final_env")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last")
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "DLNOT")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "nth")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -11)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "solution_odes_u?")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "solution_odes?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -10
                                                                                                                           "0")
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "env_at_t(f, fs, x!1)(0)")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -2
                                                                                                                               "x!1")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   1
                                                                                                                                   "0")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (grind)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -12)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "DLNOT")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "final_env")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "last")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "D(car(trace!1))")
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "db_max")
                                                                                                                                  (("2"
                                                                                                                                    (inst?)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "b")
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -7)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (case
                                                                                                                                               "env_at_t(f, fs!1, x!1)(b) = env_at_t(f, fs, x!1)(b)")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -14
                                                                                                                                                 "b")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     1
                                                                                                                                                     "b")
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (grind)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (typepred
                                                                                                                                                 "fs!1")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "nth")
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -17)
                                                                                                                                                    (("2"
                                                                                                                                                      (expand
                                                                                                                                                       "solution_odes_u?")
                                                                                                                                                      (("2"
                                                                                                                                                        (flatten)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -13
                                                                                                                                                           "fs!1"
                                                                                                                                                           "D(car(trace!1))")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (decompose-equality
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (typepred
                                                                                                                                                                 "env_at_t(f, fs!1, x!1)(b)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "env_at_t?"
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (typepred
                                                                                                                                                                       "env_at_t(f, fs, x!1)(b)")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "env_at_t?"
                                                                                                                                                                         -1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (flatten)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (case
                                                                                                                                                                             "not_in_map(f)(x!2)")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 -2
                                                                                                                                                                                 "x!2")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -5
                                                                                                                                                                                   "x!2")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil)
                                                                                                                                                                             ("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "not_in_map")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   -3
                                                                                                                                                                                   "i")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (inst
                                                                                                                                                                                     -6
                                                                                                                                                                                     "i")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       -20
                                                                                                                                                                                       "i"
                                                                                                                                                                                       "b")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        nil
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -8)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "closed_interval")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "hp")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (flatten)
                                                                                                    (("3"
                                                                                                      (skeep)
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "nth")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "init_env")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "normDLEVENTUALLY")
                                          (("2"
                                            (expand "finite_trace?")
                                            (("2"
                                              (expand "last")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (expand "nth")
                                                  (("2"
                                                    (hide -5)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "DLEVENTUALLY_EXISTS")
                                                        (("2"
                                                          (inst?)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               1
                                                               "0")
                                                              (("2"
                                                                (expand
                                                                 "nth")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (inst -1 "(: STATE(x!1), ERROR :)")
                        (("1" (assert)
                          (("1" (expand "init_env")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (expand "normDLEVENTUALLY")
                                (("1"
                                  (expand "finite_trace?")
                                  (("1"
                                    (expand "last")
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (expand "length")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "nth")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (lemma
                                                 "DLEVENTUALLY_EXISTS")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (typepred "i")
                                                        (("1"
                                                          (expand
                                                           "length")
                                                          (("1"
                                                            (expand
                                                             "length")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (case
                                                                 "i=1")
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (case
                                                                   "i=0")
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ALLRUNS_st")
                    (("2" (skeep)
                      (("2" (expand "ALLRUNS_tr")
                        (("2" (typepred "trace")
                          (("2" (inst -5 "trace")
                            (("2" (assert)
                              (("2"
                                (expand "normDLEVENTUALLY")
                                (("2"
                                  (split)
                                  (("1"
                                    (lemma "DLEVENTUALLY_EXISTS")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand
                                             "trace_semantic_rel"
                                             -6)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (split -7)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "nth" -4)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2)
                                                        (("1"
                                                          (expand
                                                           "DLNOT")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -3
                                                                           "t")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (expand
                                                                 "finite_trace?")
                                                                (("3"
                                                                  (expand
                                                                   "last")
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (expand "last")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "trace_semantic_rel")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (split -4)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst 2 "fs")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "t")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (expand
                                                     "finite_trace?")
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "finite_trace?")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "last")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "SOMERUNS_st")
                    (("3" (expand "ALLRUNS_tr")
                      (("3" (expand "DLNOT")
                        (("3" (expand "normDLEVENTUALLY")
                          (("3" (lemma "exists_trace_env")
                            (("3" (inst -1 "DIFF(f, P)" "x!1")
                              (("3"
                                (skeep)
                                (("3"
                                  (expand "trace_semantic_rel" -1)
                                  (("3"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (typepred "f")
                                        (("1"
                                          (expand "ODEs_s?")
                                          (("1"
                                            (inst -2 "x!1")
                                            (("1"
                                              (expand "ODEs_s?")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case
                                                   "FORALL(t:(hp(0))): P(env_at_t(f, fs,x!1)(t))")
                                                  (("1"
                                                    (inst
                                                     -7
                                                     "(: INF_DIFF(x!1, LAMBDA(t: (hp(0))):env_at_t(f, fs, x!1)(t)) :)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "finite_trace?")
                                                        (("1"
                                                          (expand
                                                           "last")
                                                          (("1"
                                                            (expand
                                                             "init_env")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -7)
                                                                (("1"
                                                                  (split
                                                                   -7)
                                                                  (("1"
                                                                    (lemma
                                                                     "DLEVENTUALLY_EXISTS")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (typepred
                                                                             "i")
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "t_1")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("1"
                                                                                            (case
                                                                                             "t_1=0")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -6
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solution_odes_u?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "solution_odes?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "env_at_t(f, fs, x!1)(0)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 2
                                                                                                                 "(: STATE(x!1) :)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "trace_semantic_rel"
                                                                                                                     2)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "final_env")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "last")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "nth"
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "DLBOOL")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "hp")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 3
                                                                                                 "(: STATE_DIFF(closed_interval(0,t_1),x!1, LAMBDA(t:(closed_interval(0,t_1))): env_at_t(f, fs,x!1)(t)) :)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "final_env")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "db_max")
                                                                                                            (("1"
                                                                                                              (inst?)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "trace_semantic_rel"
                                                                                                                   3)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       3)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         3
                                                                                                                         "fs")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "DLBOOL")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (decompose-equality
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "nth")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "solution_odes_subset")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "hp(0)"
                                                                                                                               "f"
                                                                                                                               "x!1"
                                                                                                                               "fs"
                                                                                                                               "closed_interval(0, t_1)")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "hp")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "closed_interval")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (grind)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (expand
                                                                                                   "solution_odes_u?")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "solution_odes?")
                                                                                                    (("3"
                                                                                                      (flatten)
                                                                                                      (("3"
                                                                                                        (typepred
                                                                                                         "env_at_t(f, fs, x!1)(0)")
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "x!1")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "trace_semantic_rel"
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         1)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "fs")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "solution_odes_u?")
                                                      (("3"
                                                        (expand
                                                         "solution_odes?")
                                                        (("3"
                                                          (flatten)
                                                          (("3"
                                                            (typepred
                                                             "env_at_t(f, fs, x!1)(0)")
                                                            (("3"
                                                              (inst
                                                               -2
                                                               "x!1")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (case "t=0")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (expand
                                                           "solution_odes_u?")
                                                          (("1"
                                                            (expand
                                                             "solution_odes?")
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (typepred
                                                                 "env_at_t(f, fs, x!1)(0)")
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "x!1")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "init_env")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (split
                                                                             -9)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "0")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -12)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "fs!1")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -13)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "solution_odes_u?")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "solution_odes?")
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "env_at_t(f, fs!1, x!1)(0)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "x!1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "D(nth[TraceState](trace, 0))")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "closed_interval")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "fs!1")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("3"
                                                                                          (replace
                                                                                           -13)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "solution_odes_u?")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "solution_odes?")
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (typepred
                                                                                                     "env_at_t(f, fs!1, x!1)(0)")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -2
                                                                                                       "x!1")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        (("3"
                                                                                                          (inst
                                                                                                           -9
                                                                                                           "0")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         3
                                                         "(: STATE_DIFF(closed_interval(0,t),x!1, LAMBDA(t_1:(closed_interval(0,t))): env_at_t(f, fs,x!1)(t_1)) :)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "final_env")
                                                            (("1"
                                                              (expand
                                                               "last")
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 3)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "db_max")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "init_env")
                                                                          (("1"
                                                                            (expand
                                                                             "trace_semantic_rel"
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth")
                                                                                (("1"
                                                                                  (expand
                                                                                   "DLBOOL")
                                                                                  (("1"
                                                                                    (inst
                                                                                     3
                                                                                     "fs")
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (expand
                                                                                         "nth")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "solution_odes_subset")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "hp(0)"
                                                                                           "f"
                                                                                           "x!1"
                                                                                           "fs"
                                                                                           "closed_interval(0, t)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "hp")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "closed_interval")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "t")
                                                                        (("2"
                                                                          (expand
                                                                           "hp")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (expand
                                                           "solution_odes_u?")
                                                          (("3"
                                                            (expand
                                                             "solution_odes?")
                                                            (("3"
                                                              (flatten)
                                                              (("3"
                                                                (typepred
                                                                 "env_at_t(f, fs, x!1)(0)")
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "x!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (typepred
                                                           "t")
                                                          (("4"
                                                            (expand
                                                             "hp")
                                                            (("4"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (typepred
                                                           "t")
                                                          (("5"
                                                            (expand
                                                             "hp")
                                                            (("5"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst 2 "(: STATE(x!1) :)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "init_env")
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               2)
                                              (("1"
                                                (expand "final_env")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand
                                                           "DLBOOL")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLAND const-decl "bool" bool_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (HP type-decl nil HP_adt nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (ODEs type-eq-decl nil hp_def nil)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     nil)
    (dd? const-decl "bool" hp_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (DLNOT const-decl "bool" bool_expr nil)
    (SOMERUNS_st const-decl "bool" ltl_expr nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (last const-decl "T" more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (ERROR adt-constructor-decl "(error?)" TraceState_adt nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (length_singleton formula-decl nil more_list_props structures)
    (solution_odes_subset formula-decl nil ODEs_equiv nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    (suffix? def-decl "bool" more_list_props structures)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (INF_DIFF adt-constructor-decl
     "[[s0: Environment, {ib: [(hp(0)) -> Environment] | ib(0) = s0}] ->
   (inf_diff?)]" TraceState_adt nil)
    (exists_trace_env formula-decl nil trace_semantics nil)
    (DLOR const-decl "bool" bool_expr nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil))
   shostak))
 (dltl_DIFFEG 0
  (dltl_DIFFEG-1 nil 3889265663
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (decompose-equality)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_st")
                  (("1" (expand "SOMERUNS_st")
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (skeep)
                        (("1" (expand "normDLEG")
                          (("1" (split 1)
                            (("1" (flatten)
                              (("1"
                                (expand "trace_semantic_rel" -6)
                                (("1"
                                  (split -6)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "init_env")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "trace")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "trace_semantic_rel"
                                                                     2)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst
                                                               -7
                                                               "trace")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "trace_semantic_rel"
                                                                   2)
                                                                  (("2"
                                                                    (typepred
                                                                     "fs")
                                                                    (("2"
                                                                      (inst
                                                                       2
                                                                       "fs")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (replace -2)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "finite_trace?")
                                                            (("3"
                                                              (expand
                                                               "last")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "finite_trace?")
                                        (("2"
                                          (expand "last")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (expand "trace_semantic_rel" -5)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "last")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (split -5)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (lemma
                                                         "DLEG_nth")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "0")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "i")
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -8)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (expand
                                                                               "trace_semantic_rel"
                                                                               -2)
                                                                              (("1"
                                                                                (typepred
                                                                                 "trace!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "finite_trace?")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "last")
                                                                                    (("1"
                                                                                      (split
                                                                                       -4)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -2)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "DLBOOL")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "DLNOT")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "final_env")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "last")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "init_env")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "nth")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -4)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "fs")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "solution_odes_u?")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "solution_odes?")
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "nth")
                                                                                                                                    (("1"
                                                                                                                                      (hide
                                                                                                                                       -15)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -15)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -13
                                                                                                                                           "0")
                                                                                                                                          (("1"
                                                                                                                                            (typepred
                                                                                                                                             "env_at_t(f, fs, x!1)(0)")
                                                                                                                                            (("1"
                                                                                                                                              (inst
                                                                                                                                               -2
                                                                                                                                               "x!1")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (grind)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "DLNOT")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "final_env"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "last"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "init_env")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -13)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -5)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "fs")
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "fs!1")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -15)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -7)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "D(car(trace!1))")
                                                                                                                                        (("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "db_max")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -15
                                                                                                                                                         "b")
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "env_at_t(f, fs, x!1)(b) = env_at_t(f, fs!1, x!1)(b)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (postpone)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "hp")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (flatten)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "trace_1")
                                                                              (("2"
                                                                                (expand
                                                                                 "finite_trace?")
                                                                                (("2"
                                                                                  (expand
                                                                                   "trace_semantic_rel"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (split
                                                                                     -4)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "final_env"
                                                                                                 -6
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "last"
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "init_env"
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -5)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "0")
                                                                                                                (("1"
                                                                                                                  (skeep)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "init_env")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -14)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -6
                                                                                                                           "(: STATE_DIFF(closed_interval(0,t),x!1, LAMBDA (r: (closed_interval(0,t))): env_at_t(f, fs, x!1)(r)) :)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "final_env"
                                                                                                                               -6
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "last"
                                                                                                                                 -6)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   -6)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -6)
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       -6)
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "db_max")
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "trace_semantic_rel"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "nth"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "DLBOOL")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         1
                                                                                                                                                         "fs")
                                                                                                                                                        (("1"
                                                                                                                                                          (decompose-equality
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "nth")
                                                                                                                                                          (("2"
                                                                                                                                                            (typepred
                                                                                                                                                             "fs")
                                                                                                                                                            (("2"
                                                                                                                                                              (expand
                                                                                                                                                               "nth")
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -15)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "solution_odes_subset")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "hp(0)"
                                                                                                                                                                     "f"
                                                                                                                                                                     "x!1"
                                                                                                                                                                     "fs"
                                                                                                                                                                     "closed_interval(0, t)")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (skeep)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (grind)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (typepred
                                                                                                                                             "t")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (postpone)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (grind)
                                                                                                                            nil
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (typepred
                                                                                                                             "fs")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "nth")
                                                                                                                              (("3"
                                                                                                                                (replace
                                                                                                                                 -14)
                                                                                                                                (("3"
                                                                                                                                  (expand
                                                                                                                                   "solution_odes_u?")
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "solution_odes?")
                                                                                                                                    (("3"
                                                                                                                                      (flatten)
                                                                                                                                      (("3"
                                                                                                                                        (assert)
                                                                                                                                        (("3"
                                                                                                                                          (typepred
                                                                                                                                           "env_at_t(f, fs, x!1)(0)")
                                                                                                                                          (("3"
                                                                                                                                            (inst
                                                                                                                                             -2
                                                                                                                                             "x!1")
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("4"
                                                                                                                            (typepred
                                                                                                                             "t")
                                                                                                                            (("4"
                                                                                                                              (postpone)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("5"
                                                                                                                            (postpone)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (postpone)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (flatten)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "last")
                                                                                                (("3"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "last")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (expand
                                                       "init_env")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace -7)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "DLEG_nth")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "0")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (case
                                                                             "i=0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (expand "normDLEG")
                        (("1" (inst -1 "(: STATE(x!1), ERROR :)")
                          (("1" (assert)
                            (("1" (expand "init_env")
                              (("1"
                                (expand "trace_semantic_rel")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (expand "length")
                                        (("1"
                                          (expand "length")
                                          (("1"
                                            (expand "length")
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (lemma "DLEG_nth")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "j")
                                                          (("1"
                                                            (expand
                                                             "length")
                                                            (("1"
                                                              (expand
                                                               "length")
                                                              (("1"
                                                                (expand
                                                                 "length")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (lift-if)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth"
                                                                               2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ALLRUNS_st")
                    (("2" (expand "ALLRUNS_tr")
                      (("2" (skeep)
                        (("2" (expand "normDLEG")
                          (("2" (typepred "trace")
                            (("2" (inst -5 "trace")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (expand "ALLRUNS_tr")
                      (("3" (expand "SOMERUNS_st")
                        (("3" (expand "ALLRUNS_st")
                          (("3" (expand "normDLEG")
                            (("3" (typepred "f")
                              (("3"
                                (expand "ODEs_s?")
                                (("3"
                                  (inst -2 "x!1")
                                  (("3"
                                    (expand "ODEs_s?")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (case
                                           "FORALL(t:(hp(0))): P(env_at_t(f,fs,x!1)(t))")
                                          (("1"
                                            (inst
                                             -3
                                             "(: INF_DIFF(x!1,LAMBDA(t: (hp(0))): env_at_t(f, fs, x!1)(t)) :)")
                                            (("1"
                                              (expand "init_env")
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth" -3)
                                                      (("1"
                                                        (split -3)
                                                        (("1"
                                                          (lemma
                                                           "DLEG_nth")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "j")
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (typepred
                                                                                 "T")
                                                                                (("1"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("1"
                                                                                    (case
                                                                                     "T=0")
                                                                                    (("1"
                                                                                      (inst
                                                                                       3
                                                                                       "(: STATE(x!1) :)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trace_semantic_rel"
                                                                                           3
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "DLBOOL")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "final_env")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "trace_1")
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "finite_trace?")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "last")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "trace_semantic_rel"
                                                                                                             -11)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -11)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -12)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -11)
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 -6
                                                                                                                                 "0")
                                                                                                                                (("1"
                                                                                                                                  (typepred
                                                                                                                                   "env_at_t(f, fs, x!1)(0)")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "solution_odes_u?")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "solution_odes?")
                                                                                                                                      (("1"
                                                                                                                                        (flatten)
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -2
                                                                                                                                           "x!1")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -11)
                                                                                                                                      (("2"
                                                                                                                                        (typepred
                                                                                                                                         "D(car(trace_1))")
                                                                                                                                        (("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "db_max")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("2"
                                                                                                                                                      (assert)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -10
                                                                                                                                                         "b")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (case
                                                                                                                                                             "env_at_t(f, fs, x!1)(b) = env_at_t(f, fs!1, x!1)(b)")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (postpone)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "hp")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (flatten)
                                                                                                                        (("3"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (inst
                                                                                         3
                                                                                         "(: STATE_DIFF(closed_interval(0,T),x!1, LAMBDA(t:(closed_interval(0,T))): env_at_t(f,fs,x!1)(t)) :)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "trace_semantic_rel"
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "DLBOOL")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "fs")
                                                                                                      (("1"
                                                                                                        (decompose-equality
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "nth")
                                                                                                          (("1"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "nth")
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "solution_odes_subset")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "hp(0)"
                                                                                                             "f"
                                                                                                             "x!1"
                                                                                                             "fs"
                                                                                                             "closed_interval(0, T)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "closed_interval")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "hp")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("3"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "final_env")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "last")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "trace_semantic_rel"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "trace_1")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "finite_trace?")
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "last")
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -4)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nth")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (split
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -6)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "db_max")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -9
                                                                                                                                                 "T")
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -7)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (lemma
                                                                                                                                               "db_max")
                                                                                                                                              (("2"
                                                                                                                                                (inst?)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -1)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -3)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (typepred
                                                                                                                                                           "D(car(trace_1))")
                                                                                                                                                          (("2"
                                                                                                                                                            (skeep)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "db_max")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "0"
                                                                                                                                                                     "b")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "fs!1")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "nth")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (replace
                                                                                                                                                                             -11)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -4)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (postpone)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("3"
                                                                                                                                    (flatten)
                                                                                                                                    (("3"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "solution_odes_u?")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "solution_odes?")
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "env_at_t(f, fs, x!1)(0)")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "x!1")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil)
                                                                                         ("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "trace_semantic_rel"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "nth")
                                                              (("2"
                                                                (inst
                                                                 1
                                                                 "fs")
                                                                (("2"
                                                                  (expand
                                                                   "nth")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (expand
                                               "solution_odes_u?")
                                              (("3"
                                                (expand
                                                 "solution_odes?")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (typepred
                                                     "env_at_t(f, fs, x!1)(0)")
                                                    (("3"
                                                      (inst -2 "x!1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (case "t=0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (inst
                                                   2
                                                   "(: STATE(x!1) :)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "init_env")
                                                      (("1"
                                                        (expand
                                                         "DLNOT")
                                                        (("1"
                                                          (expand
                                                           "final_env")
                                                          (("1"
                                                            (expand
                                                             "last")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "solution_odes_u?")
                                                                    (("1"
                                                                      (expand
                                                                       "solution_odes?")
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (typepred
                                                                           "env_at_t(f, fs, x!1)(0)")
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "trace_semantic_rel"
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "DLBOOL")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst
                                                 3
                                                 "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(t_1:(closed_interval(0,t))): env_at_t(f,fs,x!1)(t_1)) :)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "init_env")
                                                    (("1"
                                                      (expand "DLNOT")
                                                      (("1"
                                                        (expand
                                                         "final_env")
                                                        (("1"
                                                          (expand
                                                           "last")
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             3)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (lemma
                                                                   "db_max")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "trace_semantic_rel"
                                                                           3)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("1"
                                                                                  (inst
                                                                                   3
                                                                                   "fs")
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     3)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("2"
                                                                                      (hide
                                                                                       4)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "solution_odes_subset")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "hp(0)"
                                                                                           "f"
                                                                                           "x!1"
                                                                                           "fs"
                                                                                           "closed_interval(0, t)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "hp")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "closed_interval")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "t")
                                                                        (("2"
                                                                          (expand
                                                                           "hp")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3"
                                                  (expand
                                                   "solution_odes_u?")
                                                  (("3"
                                                    (expand
                                                     "solution_odes?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (typepred
                                                         "env_at_t(f, fs, x!1)(0)")
                                                        (("3"
                                                          (inst
                                                           -2
                                                           "x!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (typepred "t")
                                                  (("4"
                                                    (expand "hp")
                                                    (("4"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (typepred "t")
                                                  (("5"
                                                    (expand "hp")
                                                    (("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_DIFFGE 0
  (dltl_DIFFGE-1 nil 3889265665
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (expand "DLOR")
        (("" (decompose-equality)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (expand "ALLRUNS_st")
                  (("1" (expand "ALLRUNS_tr")
                    (("1" (skeep)
                      (("1" (expand "normDLGE")
                        (("1" (expand "trace_semantic_rel" -5)
                          (("1" (split -5)
                            (("1" (flatten)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "init_env")
                                  (("1"
                                    (expand "nth")
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -7)
                                              (("1"
                                                (expand
                                                 "finite_trace?")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (replace -3)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand
                                                           "final_env")
                                                          (("1"
                                                            (expand
                                                             "last")
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "trace")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "trace_semantic_rel"
                                                                           -4)
                                                                          (("1"
                                                                            (expand
                                                                             "nth")
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "finite_trace?")
                                          (("2"
                                            (expand "final_env")
                                            (("2"
                                              (expand "last")
                                              (("2"
                                                (replace -3)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "nth")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -6
                                                             "trace")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "trace_semantic_rel"
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "fs")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (expand "finite_trace?")
                                          (("3"
                                            (expand "last")
                                            (("3"
                                              (replace -3)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (expand "nth")
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (lemma
                                                       "DLGE_nth")
                                                      (("3"
                                                        (inst?)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (typepred
                                                               "j")
                                                              (("3"
                                                                (inst
                                                                 2
                                                                 "0")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     "nth"
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (typepred
                                                                         "T")
                                                                        (("3"
                                                                          (expand
                                                                           "hp")
                                                                          (("3"
                                                                            (split
                                                                             -9)
                                                                            (("1"
                                                                              (expand
                                                                               "SOMERUNS_st")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (expand
                                                                                   "final_env")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "trace!1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "finite_trace?")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trace_semantic_rel"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -4)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "DLNOT")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "init_env")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -14)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -6)
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "inf_behavior(car(trace))")
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -14)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -11
                                                                                                                               "0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -15)
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "DLNOT")
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "init_env")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -6)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "fs!1")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "nth")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -7)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "D(car(trace!1))")
                                                                                                                                      (("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "db_max")
                                                                                                                                            (("2"
                                                                                                                                              (inst?)
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (replace
                                                                                                                                                   -14)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -18)
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -15
                                                                                                                                                         "b")
                                                                                                                                                        (("1"
                                                                                                                                                          (case
                                                                                                                                                           "env_at_t(f, fs, x!1)(b) = env_at_t(f, fs!1, x!1)(b)")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (postpone)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (expand
                                                                                                                                                           "hp")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "T=0")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "(: STATE(x!1) :)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "trace_semantic_rel"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -2)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "DLBOOL")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "SOMERUNS_st")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "final_env"
                                                                                                   -2)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "last"
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "trace!1")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "finite_trace?")
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "last")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "trace_semantic_rel"
                                                                                                                 -5)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           -6)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "final_env")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "last")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -6)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "init_env")
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "nth")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (hide
                                                                                                                                                   -14)
                                                                                                                                                  (("1"
                                                                                                                                                    (typepred
                                                                                                                                                     "inf_behavior(car(trace))")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -15)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -5)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           2
                                                                                                                                                           "0")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (skeep)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "final_env")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "last")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -7)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "nth")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  (("2"
                                                                                                                                                    (hide
                                                                                                                                                     -15)
                                                                                                                                                    (("2"
                                                                                                                                                      (typepred
                                                                                                                                                       "D(car(trace!1))")
                                                                                                                                                      (("2"
                                                                                                                                                        (skeep)
                                                                                                                                                        (("2"
                                                                                                                                                          (replace
                                                                                                                                                           -2)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "db_max")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("2"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "init_env")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -8)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (replace
                                                                                                                                                                           -14)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (replace
                                                                                                                                                                               -18)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   2
                                                                                                                                                                                   "b")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (case
                                                                                                                                                                                     "env_at_t(f, fs, x!1)(b) = env_at_t(f, fs!1, x!1)(b)")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (postpone)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "hp")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (assert)
                                                                                                                            (("3"
                                                                                                                              (flatten)
                                                                                                                              (("3"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "finite_trace?")
                                (("2"
                                  (expand "last")
                                  (("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nth")
                                        (("2"
                                          (expand "init_env")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -7)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (hide -5 -6)
                                                  (("2"
                                                    (lemma "DLGE_nth")
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "j")
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               1)
                                                              (("2"
                                                                (lift-if)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "ALLRUNS_tr")
                      (("1" (expand "normDLGE")
                        (("1" (inst -1 "(:STATE(x!1),ERROR:)")
                          (("1" (assert)
                            (("1" (expand "finite_trace?")
                              (("1"
                                (expand "last")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "length")
                                    (("1"
                                      (expand "length")
                                      (("1"
                                        (expand "nth")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "init_env")
                                            (("1"
                                              (expand
                                               "trace_semantic_rel")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "length")
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (lemma
                                                             "DLGE_nth")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "ALLRUNS_tr")
                    (("2" (expand "ALLRUNS_st")
                      (("2" (skeep)
                        (("2" (expand "normDLGE")
                          (("2" (typepred "trace")
                            (("2" (inst -5 "trace")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (flatten)
                    (("3" (expand "SOMERUNS_st")
                      (("3" (expand "ALLRUNS_tr")
                        (("3" (expand "ALLRUNS_st")
                          (("3" (skeep)
                            (("3" (expand "normDLGE")
                              (("3"
                                (typepred "f")
                                (("3"
                                  (expand "ODEs_s?")
                                  (("3"
                                    (inst -2 "x!1")
                                    (("3"
                                      (expand "ODEs_s?")
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (case
                                           "FORALL(t:(hp(0))): P(env_at_t(f,fs,x!1)(t))")
                                          (("1"
                                            (inst
                                             -6
                                             "(: INF_DIFF(x!1, LAMBDA(t: (hp(0))): env_at_t(f, fs, x!1)(t)) :)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "init_env")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "finite_trace?")
                                                    (("1"
                                                      (expand "last")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -6)
                                                          (("1"
                                                            (split -6)
                                                            (("1"
                                                              (lemma
                                                               "DLGE_nth")
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "0")
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (typepred
                                                                           "i")
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "fs")
                                                                    (("2"
                                                                      (expand
                                                                       "nth")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil)
                                             ("3"
                                              (expand
                                               "solution_odes_u?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand
                                                   "solution_odes?")
                                                  (("3"
                                                    (flatten)
                                                    (("3"
                                                      (typepred
                                                       "env_at_t(f, fs, x!1)(0)")
                                                      (("3"
                                                        (inst -2 "x!1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (typepred "t")
                                              (("2"
                                                (expand "hp")
                                                (("2"
                                                  (case "t=0")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (expand
                                                       "solution_odes_u?")
                                                      (("1"
                                                        (expand
                                                         "solution_odes?")
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (typepred
                                                             "env_at_t(f, fs, x!1)(0)")
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "x!1")
                                                              (("1"
                                                                (inst
                                                                 2
                                                                 "(: STATE(x!1) :)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "DLNOT")
                                                                    (("1"
                                                                      (expand
                                                                       "final_env")
                                                                      (("1"
                                                                        (expand
                                                                         "init_env")
                                                                        (("1"
                                                                          (expand
                                                                           "last")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               2)
                                                                              (("1"
                                                                                (expand
                                                                                 "trace_semantic_rel"
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     2)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "DLBOOL")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     3
                                                     "(: STATE_DIFF(closed_interval(0,t),x!1,LAMBDA(r:(closed_interval(0,t))): env_at_t(f,fs,x!1)(r)) :)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "init_env"
                                                         3)
                                                        (("1"
                                                          (expand
                                                           "DLNOT")
                                                          (("1"
                                                            (expand
                                                             "final_env")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "last")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     3)
                                                                    (("1"
                                                                      (lemma
                                                                       "db_max")
                                                                      (("1"
                                                                        (inst?)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "trace_semantic_rel"
                                                                               3)
                                                                              (("1"
                                                                                (expand
                                                                                 "DLBOOL")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         3
                                                                                         "fs")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             3)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "nth")
                                                                                          (("2"
                                                                                            (hide
                                                                                             4)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -7)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "solution_odes_subset")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "hp(0)"
                                                                                                   "f"
                                                                                                   "x!1"
                                                                                                   "fs"
                                                                                                   "closed_interval(0, t)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "closed_interval")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("3"
                                                      (expand
                                                       "solution_odes_u?")
                                                      (("3"
                                                        (expand
                                                         "solution_odes?")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (typepred
                                                               "env_at_t(f, fs, x!1)(0)")
                                                              (("3"
                                                                (inst
                                                                 -2
                                                                 "x!1")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_STARcap 0
  (dltl_STARcap-1 nil 3889265666
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_st")
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel" -4)
                      (("1" (split -4)
                        (("1" (flatten)
                          (("1" (expand "normDLGLOBALLY" 1)
                            (("1" (expand "final_env" 1)
                              (("1"
                                (expand "finite_trace?")
                                (("1"
                                  (expand "last" 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "nth" 1)
                                        (("1"
                                          (expand "init_env" -5)
                                          (("1"
                                            (assert)
                                            (("1" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (lemma
                           "trace_semantic_rel_star_seq_switch_eq")
                          (("2" (inst?)
                            (("2" (decompose-equality -1)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (iff)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (hide -2)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (case
                                             "finite_trace?(trace)")
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               -2)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -9 "trace1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -9)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "trace2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (postpone)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "trace")
                                                            (("2"
                                                              (expand
                                                               "valid_trace?")
                                                              (("2"
                                                                (expand
                                                                 "finite_trace?")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "finite_trace?")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "finite_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (postpone)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (split)
                (("1" (expand "ALLRUNS_tr")
                  (("1" (inst -1 "(: STATE(x!1) :)")
                    (("1" (assert)
                      (("1" (expand "trace_semantic_rel")
                        (("1" (assert)
                          (("1" (expand "init_env")
                            (("1" (expand "normDLGLOBALLY")
                              (("1"
                                (expand "finite_trace?")
                                (("1"
                                  (expand "final_env")
                                  (("1"
                                    (expand "last")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth")
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("2" (expand "ALLRUNS_st")
                  (("2" (expand "ALLRUNS_tr")
                    (("2" (skeep)
                      (("2" (skeep)
                        (("2"
                          (lemma
                           "trace_semantic_rel_star_seq_switch_eq")
                          (("2" (inst -1 "A")
                            (("2" (case "state?(last(trace))")
                              (("1"
                                (decompose-equality -2)
                                (("1"
                                  (inst
                                   -1
                                   "append(rdc(trace),trace_1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (iff)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (inst
                                               -7
                                               "append(rdc(trace), trace_1)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "trace_semantic_rel"
                                                   -7)
                                                  (("1"
                                                    (case
                                                     "rdc(trace)=null")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "append_null_left[TraceState]")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -7)
                                                                  (("1"
                                                                    (expand
                                                                     "final_env")
                                                                    (("1"
                                                                      (expand
                                                                       "last")
                                                                      (("1"
                                                                        (typepred
                                                                         "trace")
                                                                        (("1"
                                                                          (expand
                                                                           "wf_trace?")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (lemma
                                                                               "length_rdc[TraceState]")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "init_env"
                                                                                           -9)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "car_append[TraceState]")
                                                      (("2"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           "init_env")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (lemma
                                                                 "car_rdc[TraceState]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -5)
                                                                        (("1"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "trace")
                                                                    (("2"
                                                                      (expand
                                                                       "wf_trace?")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (lemma
                                                                           "length_rdc[TraceState]")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "trace")
                                                          (("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil)
                                             ("2"
                                              (expand
                                               "trace_semantic_rel"
                                               1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   1
                                                   "trace"
                                                   "trace_1")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (case "state?(car(trace_1))")
                                (("1"
                                  (decompose-equality -2)
                                  (("1"
                                    (inst
                                     -1
                                     "append(trace,cdr(trace_1))")
                                    (("1"
                                      (inst
                                       -7
                                       "append(trace, cdr(trace_1))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (iff)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (expand
                                                   "trace_semantic_rel"
                                                   -7)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "init_env")
                                                      (("1"
                                                        (lemma
                                                         "car_append[TraceState]")
                                                        (("1"
                                                          (inst?)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "trace_semantic_rel"
                                                   1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "trace"
                                                       "trace_1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality -1)
                                  (("2"
                                    (inst -1 "append(trace,trace_1)")
                                    (("1"
                                      (iff)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (inst
                                             -6
                                             "append(trace, trace_1)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand
                                                 "trace_semantic_rel"
                                                 -6)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "init_env")
                                                    (("1"
                                                      (lemma
                                                       "car_append[TraceState]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -3)
                                                              (("1"
                                                                (expand
                                                                 "normDLGLOBALLY")
                                                                (("1"
                                                                  (expand
                                                                   "finite_trace?")
                                                                  (("1"
                                                                    (expand
                                                                     "final_env")
                                                                    (("1"
                                                                      (typepred
                                                                       "trace_1")
                                                                      (("1"
                                                                        (expand
                                                                         "wf_trace?")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (lemma
                                                                             "last_append[TraceState]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("1"
                                                                                    (case
                                                                                     "DLGLOBALLY(State_Trace(Q))(trace_1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (grind)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "DLGLOBALLY(State_Trace(Q))(append(trace, trace_1))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -12
                                                                                         5)
                                                                                        (("1"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand
                                                 "trace_semantic_rel"
                                                 1)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "trace"
                                                     "trace_1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (postpone) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "trace")
                                (("3"
                                  (expand "wf_trace?")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_BSTARcap_eq 0
  (dltl_BSTARcap_eq-1 nil 3899895270
   ("" (induct "i")
    (("1" (expand "BSTAR")
      (("1" (expand "BSTAR")
        (("1" (expand "DLBOOL")
          (("1" (skeep)
            (("1" (expand "DLAND")
              (("1" (decompose-equality)
                (("1" (iff)
                  (("1" (split)
                    (("1" (flatten)
                      (("1" (expand "ALLRUNS_st")
                        (("1" (expand "ALLRUNS_tr")
                          (("1" (skeep)
                            (("1" (expand "trace_semantic_rel" -5)
                              (("1"
                                (split -5)
                                (("1"
                                  (lemma
                                   "trace_semantic_rel_bounded_star_seq_switch_eq")
                                  (("1"
                                    (inst -1 "A" "0")
                                    (("1"
                                      (expand "BSTAR")
                                      (("1"
                                        (expand "DLBOOL")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (expand
                                               "trace_semantic_rel"
                                               -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "trace_semantic_rel"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand "last")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -9
                                                               "trace1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "trace_semantic_rel"
                                                                           -9
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "final_env")
                                                                            (("1"
                                                                              (expand
                                                                               "last")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("1"
                                                                                          (case
                                                                                           "rdc(trace1)=null")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "append_null_left[TraceState]")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (split
                                                                                                       -11)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "trace2")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "trace1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_trace?")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "length_rdc[TraceState]")
                                                                                                  (("2"
                                                                                                    (inst?)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (expand
                                                     "trace_semantic_rel"
                                                     -2)
                                                    (("2"
                                                      (expand "last")
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "trace_semantic_rel" -1)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (expand "nth")
                                      (("2"
                                        (hide -5)
                                        (("2"
                                          (expand "init_env")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "normDLGLOBALLY")
                                              (("2"
                                                (expand "final_env")
                                                (("2"
                                                  (expand
                                                   "finite_trace?")
                                                  (("2"
                                                    (expand "last")
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (expand "nth")
                                                        (("2"
                                                          (lemma
                                                           "DLGLOBALLY_FORALL")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (expand
                                                                     "nth")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (expand "ALLRUNS_st")
                        (("2" (expand "ALLRUNS_tr")
                          (("2" (inst-cp -1 "(: STATE(x!1) :)")
                            (("1" (assert)
                              (("1"
                                (expand "init_env" -2)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (expand "normDLGLOBALLY" -1)
                                    (("1"
                                      (expand "finite_trace?" -1)
                                      (("1"
                                        (expand "final_env" -1)
                                        (("1"
                                          (expand "last" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "DLGLOBALLY_FORALL")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "0")
                                                        (("1"
                                                          (expand
                                                           "nth")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (expand
                                                                     "trace_semantic_rel"
                                                                     -3)
                                                                    (("1"
                                                                      (lemma
                                                                       "trace_semantic_rel_bounded_star_seq_switch_eq")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "A"
                                                                         "0")
                                                                        (("1"
                                                                          (expand
                                                                           "BSTAR")
                                                                          (("1"
                                                                            (expand
                                                                             "DLBOOL")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "trace_1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "final_env")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "last")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "trace_semantic_rel"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (flatten)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "init_env"
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "trace_semantic_rel"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     1
                                                                                                                     "trace"
                                                                                                                     "trace_1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "last")
                                                                                                                        (("1"
                                                                                                                          (typepred
                                                                                                                           "trace")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "wf_trace?")
                                                                                                                            (("1"
                                                                                                                              (flatten)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "length_rdc[TraceState]")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -8)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             -1)
                                                                                                                                            (("1"
                                                                                                                                              (lemma
                                                                                                                                               "append_null_left[TraceState]")
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "trace_1")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (expand "trace_semantic_rel" 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (expand
                                           "trace_semantic_rel"
                                           2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "nth")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "BSTAR" 1)
          (("2" (lemma "dltl_choice")
            (("2"
              (inst -1 "SEQ(A, BSTAR(A, 1 + j))" "BSTAR(A, 1 + j)"
               "normDLGLOBALLY(P, Q)")
              (("2" (replace -1 1 rl)
                (("2" (hide -1)
                  (("2" (lemma "dltl_choice_st")
                    (("2" (inst?)
                      (("2" (replace -1 1 rl)
                        (("2" (hide -1)
                          (("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (replace -1 1 rl)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (decompose-equality)
                                    (("2"
                                      (expand "DLAND")
                                      (("2"
                                        (iff)
                                        (("2"
                                          (split)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "BSTAR" 1)
                                                (("1"
                                                  (expand "ALLRUNS_st")
                                                  (("1"
                                                    (expand
                                                     "ALLRUNS_tr")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "trace_semantic_rel"
                                                         -6)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               -2)
                                                              (("1"
                                                                (split
                                                                 -2)
                                                                (("1"
                                                                  (lemma
                                                                   "trace_semantic_rel_bounded_star_seq_switch_eq")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -2)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "trace_semantic_rel"
                                                                           -1)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("1"
                                                                                        (split
                                                                                         -10)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "append_assoc[TraceState]")
                                                                                            (("1"
                                                                                              (inst?)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 -3
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "rdc_append[TraceState]")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "trace1!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "wf_trace?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "rdc(trace1)"
                                                                                                           "trace1!1")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             -6
                                                                                                             rl)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -3
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -16
                                                                                                                 "append(rdc(trace1), trace1!1)")
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   -16)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "trace2_1")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (postpone)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (postpone)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (postpone)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (postpone)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (postpone)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (postpone)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "(: STATE(init_env(trace)) :)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "init_env"
                                                                   -6
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     -6)
                                                                    (("1"
                                                                      (expand
                                                                       "final_env"
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "last")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "trace")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "trace_semantic_rel_bstar_reflexive")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "A"
                                                                         "(: STATE(init_env(trace)) :)"
                                                                         "j")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "BSTAR" -1)
                                                (("2"
                                                  (expand "ALLRUNS_st")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "ALLRUNS_tr")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (typepred
                                                             "trace")
                                                            (("2"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               -3)
                                                              (("2"
                                                                (expand
                                                                 "trace_semantic_rel"
                                                                 -3
                                                                 2)
                                                                (("2"
                                                                  (hide
                                                                   -6)
                                                                  (("2"
                                                                    (lemma
                                                                     "trace_semantic_rel_bounded_star_seq_switch_eq")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         -4)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "trace_semantic_rel"
                                                                             -7)
                                                                            (("2"
                                                                              (expand
                                                                               "finite_trace?")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split
                                                                                   -7)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_STARcap_eq 0
  (dltl_STARcap_eq-1 nil 3899893391
   ("" (skeep)
    (("" (expand "DLAND")
      (("" (decompose-equality)
        (("" (iff)
          (("" (split)
            (("1" (flatten)
              (("1" (expand "ALLRUNS_st")
                (("1" (expand "ALLRUNS_tr")
                  (("1" (skeep)
                    (("1" (expand "trace_semantic_rel" -5)
                      (("1" (split -5)
                        (("1" (flatten)
                          (("1" (expand "normDLGLOBALLY")
                            (("1" (expand "final_env")
                              (("1"
                                (expand "finite_trace?")
                                (("1"
                                  (expand "last")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" 1)
                                        (("1"
                                          (expand "init_env")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "DLGLOBALLY_FORALL")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           +)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "trace_semantic_rel" -1)
                          (("2" (split)
                            (("1" (postpone) nil nil)
                             ("2" (flatten)
                              (("2"
                                (typepred "trace")
                                (("2"
                                  (expand "wf_trace?")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (inst -8 "(: STATE(x!1) :)")
                                      (("1"
                                        (expand "init_env" -8 1)
                                        (("1"
                                          (expand
                                           "trace_semantic_rel"
                                           -8
                                           1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "final_env" -8)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth" -8)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "trace")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (case "(P(x!1) AND Q(x!1))")
                (("1" (assert)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "ALLRUNS_st")
                        (("1" (skeep)
                          (("1" (expand "ALLRUNS_tr")
                            (("1" (skeep) (("1" (postpone) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (expand "ALLRUNS_tr")
                      (("2" (inst -1 "(: STATE(x!1) :)")
                        (("1" (expand "init_env")
                          (("1" (expand "trace_semantic_rel")
                            (("1" (assert)
                              (("1"
                                (expand "normDLGLOBALLY")
                                (("1"
                                  (expand "final_env")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "last")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "DLGLOBALLY_FORALL")
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -1 "0")
                                                      (("1"
                                                        (expand "nth")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (dltl_STARcup 0
  (dltl_STARcup-1 nil 3889265668
   ("" (skeep)
    (("" (expand "ALLRUNS_tr")
      (("" (expand "DLOR")
        (("" (decompose-equality)
          (("" (iff)
            (("" (split)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (expand "DLAND")
                    (("1" (split)
                      (("1" (expand "normDLEVENTUALLY")
                        (("1"
                          (case "DLEVENTUALLY(State_Trace(P))(trace)")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (lemma "DLEVENTUALLY_EXISTS")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst 1 "0")
                                    (("1"
                                      (expand "nth")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "init_env")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lift-if)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "trace")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 "state_diff?(car(trace))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "behavior(car(trace))")
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "D(nth[TraceState](trace, 0))")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "inf_behavior(car(trace))")
                                                                    (("2"
                                                                      (inst
                                                                       5
                                                                       "0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "trace")
                                      (("2"
                                        (expand "wf_trace?")
                                        (("2"
                                          (flatten)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (expand "trace_semantic_rel" -4)
                          (("2" (assert)
                            (("2" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "normDLEVENTUALLY")
                                  (("1"
                                    (expand "finite_trace?")
                                    (("1"
                                      (expand "final_env")
                                      (("1"
                                        (expand "last")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "nth")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "init_env")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (inst -7 "trace")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "trace_semantic_rel" 1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst 1 "trace1" "trace2")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (flatten)
                                (("3"
                                  (inst -4 "trace")
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "trace_semantic_rel" 1)
                                      (("3"
                                        (flatten)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "DLAND")
                  (("2" (assert)
                    (("2" (split)
                      (("1" (inst -1 "(: STATE(x!1) :)")
                        (("1" (assert)
                          (("1" (expand "init_env")
                            (("1" (expand "trace_semantic_rel")
                              (("1"
                                (expand "length")
                                (("1"
                                  (expand "length")
                                  (("1"
                                    (expand "normDLEVENTUALLY")
                                    (("1"
                                      (expand "finite_trace?")
                                      (("1"
                                        (expand "final_env")
                                        (("1"
                                          (expand "last")
                                          (("1"
                                            (expand "length")
                                            (("1"
                                              (expand "length")
                                              (("1"
                                                (expand "nth")
                                                (("1"
                                                  (lemma
                                                   "DLEVENTUALLY_EXISTS")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (typepred
                                                           "i")
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -3 "trace")
                          (("2" (assert)
                            (("2" (expand "trace_semantic_rel" 2)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "trace_semantic_rel" -2)
                                  (("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (Environment type-eq-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (DLAND const-decl "bool" bool_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (HP type-decl nil HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil nat_types nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (last const-decl "T" more_list_props structures)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (DLOR const-decl "bool" bool_expr nil))
   shostak))
 (dltl_BSTARindcup 0
  (dltl_BSTARindcup-1 nil 3899815255
   ("" (induct "n")
    (("1" (skeep)
      (("1" (skeep)
        (("1" (expand "BSTAR")
          (("1" (expand "ALLRUNS_tr")
            (("1" (assert)
              (("1" (lemma "dlSequent_equiv")
                (("1" (hide -2)
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (expand "dlSequent")
                          (("1" (skeep)
                            (("1" (inst -1 "0")
                              (("1"
                                (inst 1 "0")
                                (("1"
                                  (expand "nth")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (expand "trace_semantic_rel")
                                      (("1"
                                        (expand "DLBOOL")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "normDLEVENTUALLY")
                                            (("1"
                                              (expand "finite_trace?")
                                              (("1"
                                                (expand "final_env")
                                                (("1"
                                                  (expand "last")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth")
                                                      (("1"
                                                        (expand
                                                         "init_env")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep*)
        (("2" (expand "BSTAR" 1)
          (("2" (inst?)
            (("2" (assert)
              (("2" (lemma "dlSequent_equiv")
                (("2" (inst -1 "_" "P")
                  (("2" (assert)
                    (("2" (copy -1)
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (hide -3)
                            (("2" (copy -2)
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide -4)
                                    (("2"
                                      (inst?)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (expand "dlSequent")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -3 "0")
                                                (("2"
                                                  (inst 1 "0")
                                                  (("2"
                                                    (expand
                                                     "nth"
                                                     (-3 1))
                                                    (("2"
                                                      (expand
                                                       "ALLRUNS_tr")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (expand
                                                           "trace_semantic_rel"
                                                           -5)
                                                          (("2"
                                                            (split)
                                                            (("1"
                                                              (expand
                                                               "trace_semantic_rel"
                                                               -1)
                                                              (("1"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "init_env(trace2)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         -6
                                                                         "env")
                                                                        (("1"
                                                                          (split
                                                                           -6)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (typepred
                                                                               "j!1")
                                                                              (("1"
                                                                                (expand
                                                                                 "length")
                                                                                (("1"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -2
                                                                                         "trace1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "normDLEVENTUALLY"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "j_1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -2
                                                                                                                 "trace2")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "normDLEVENTUALLY")
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "finite_trace?")
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "state?(last(trace2)) OR state_diff?(last(trace2))")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (split
                                                                                                                                 -4)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (split
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (split
                                                                                                                                         -11)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "trace2")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_trace?")
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "last_append[TraceState]")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "final_env")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (split)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "trace2")
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "wf_trace?")
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (case
                                                                                                                                                         "cdr(trace2)=null")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "append_null[TraceState]")
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "last_append[TraceState]")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst?)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "last_cdr[TraceState]")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "final_env")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -2)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (assert)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (assert)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (typepred
                                                                                                                                                 "trace2")
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "wf_trace?")
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (lemma
                                                                                                                                                       "last_append[TraceState]")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst?)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "final_env")
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -4)
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1)
                                                                                                                                                              (("1"
                                                                                                                                                                (propax)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (lemma
                                                                                                                                         "DLEVENTUALLY_EXISTS")
                                                                                                                                        (("2"
                                                                                                                                          (inst-cp
                                                                                                                                           -1
                                                                                                                                           "Q"
                                                                                                                                           "trace2")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "Q"
                                                                                                                                             "trace")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "trace2")
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "wf_trace?")
                                                                                                                                                    (("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (split
                                                                                                                                                         -14)
                                                                                                                                                        (("1"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -2)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "length_append[TraceState]")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "nth_append[TraceState]")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     2
                                                                                                                                                                     "length(rdc(trace1))+i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (inst?)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (split
                                                                                                                                                                               -7)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (skeep)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (inst
                                                                                                                                                                                       3
                                                                                                                                                                                       "t")
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("3"
                                                                                                                                                                                (flatten)
                                                                                                                                                                                (("3"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (flatten)
                                                                                                                                                          (("2"
                                                                                                                                                            (split)
                                                                                                                                                            (("1"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -2)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     3
                                                                                                                                                                     "length(trace1)-1+i")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "length_append[TraceState]")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst?)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "nth_append[TraceState]")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (inst?)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "i")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (lift-if)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (case
                                                                                                                                                                                           "i=0")
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (replace
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (assert)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (replace
                                                                                                                                                                                                 -3)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (expand
                                                                                                                                                                                                   "last")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "nth"
                                                                                                                                                                                                       -9)
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "final_env")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "init_env")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -19)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "last")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst
                                                                                                                                                                                                                     3
                                                                                                                                                                                                                     "max_ci(D(nth(trace1, length(trace1) - 1)))")
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil)
                                                                                                                                                                                                                     ("2"
                                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                                       "trace1")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "wf_trace?")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "length")
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil)
                                                                                                                                                                                           ("2"
                                                                                                                                                                                            (assert)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (replace
                                                                                                                                                                                               -2)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "nth"
                                                                                                                                                                                                 -8)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                     "trace")
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "valid_trace?")
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "wf_trace?")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (split
                                                                                                                                                                                                             5)
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -9)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "last")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (lemma
                                                                                                                                                                                                                   "nth_append[TraceState]")
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (inst?)
                                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                                      nil
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil)
                                                                                                                                                                                                             ("2"
                                                                                                                                                                                                              (flatten)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (assert)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (split
                                                                                                                                                                                                                   -11)
                                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (skeep)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (inst
                                                                                                                                                                                                                           2
                                                                                                                                                                                                                           "t")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (replace
                                                                                                                                                                                                                               -7)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                                 -10)
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (replace
                                                                                                                                                                                                                                   -7)
                                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                                    (typepred
                                                                                                                                                                                                                                     "t")
                                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                                      (expand
                                                                                                                                                                                                                                       "nth"
                                                                                                                                                                                                                                       -1)
                                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                                        (propax)
                                                                                                                                                                                                                                        nil
                                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil)
                                                                                                                                                                                                                   ("3"
                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil)
                                                                                                                                                                               ("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "trace1")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "wf_trace?")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "length"
                                                                                                                                                                                         2)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -2)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (lemma
                                                                                                                                                                           "length_append[TraceState]")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (typepred
                                                                                                                                                                                   "i")
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length"
                                                                                                                                                                                     -1)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "trace1")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "wf_trace?")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "length")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (flatten)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "length_append[TraceState]")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (lemma
                                                                                                                                                                         "nth_append[TraceState]")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           4
                                                                                                                                                                           "length(trace1)+i")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (inst?)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (split
                                                                                                                                                                                     -6)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("2"
                                                                                                                                                                                      (flatten)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (skeep)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (inst
                                                                                                                                                                                             5
                                                                                                                                                                                             "t")
                                                                                                                                                                                            nil
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil)
                                                                                                                                                                                     ("3"
                                                                                                                                                                                      (propax)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "DLEVENTUALLY_EXISTS")
                                                                                                                                    (("2"
                                                                                                                                      (inst-cp
                                                                                                                                       -1
                                                                                                                                       "Q"
                                                                                                                                       "trace2")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "Q"
                                                                                                                                         "trace")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "last_append[TraceState]")
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "trace2")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "wf_trace?")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "trace2")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "wf_trace?")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "last_append[TraceState]")
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               -4)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "cdr(trace2)=null")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "last")
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         +)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "length"
                                                                                                                                                             +)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "nth"
                                                                                                                                                                 +)
                                                                                                                                                                (("1"
                                                                                                                                                                  (propax)
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "last_cdr[TraceState]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("3"
                                                                                                                              (typepred
                                                                                                                               "trace2")
                                                                                                                              (("3"
                                                                                                                                (expand
                                                                                                                                 "wf_trace?")
                                                                                                                                (("3"
                                                                                                                                  (flatten)
                                                                                                                                  (("3"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("4"
                                                                                                                              (typepred
                                                                                                                               "trace2")
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 "wf_trace?")
                                                                                                                                (("4"
                                                                                                                                  (flatten)
                                                                                                                                  (("4"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "NOT finite_trace?(trace2)")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (lemma
                                                                                                                               "DLEVENTUALLY_EXISTS")
                                                                                                                              (("1"
                                                                                                                                (inst-cp
                                                                                                                                 -1
                                                                                                                                 "Q"
                                                                                                                                 "trace2")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "Q"
                                                                                                                                   "trace")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (skeep)
                                                                                                                                      (("1"
                                                                                                                                        (typepred
                                                                                                                                         "trace2")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "wf_trace?")
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (split
                                                                                                                                               -12)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "length_append[TraceState]")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "nth_append[TraceState]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           2
                                                                                                                                                           "length(rdc(trace1))+i")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (split
                                                                                                                                                                       -7)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil)
                                                                                                                                                                       ("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (assert)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (skeep)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               3
                                                                                                                                                                               "t")
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil)
                                                                                                                                                                       ("3"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (split)
                                                                                                                                                  (("1"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           3
                                                                                                                                                           "length(trace1)-1+i")
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "length_append[TraceState]")
                                                                                                                                                              (("1"
                                                                                                                                                                (inst?)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "nth_append[TraceState]")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "i")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "length"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (lift-if)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (case
                                                                                                                                                                                 "i=0")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -3)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (expand
                                                                                                                                                                                         "last")
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "nth"
                                                                                                                                                                                             -9)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "final_env")
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (expand
                                                                                                                                                                                                 "init_env")
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -17)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "last")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (expand
                                                                                                                                                                                                           "finite_trace?")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "last")
                                                                                                                                                                                                            (("1"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("1"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 3
                                                                                                                                                                                                                 "max_ci(D(nth(trace1, length(trace1) - 1)))")
                                                                                                                                                                                                                (("1"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil)
                                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                                  (typepred
                                                                                                                                                                                                                   "trace1")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (expand
                                                                                                                                                                                                                     "wf_trace?")
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (flatten)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (expand
                                                                                                                                                                                                                         "length")
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          nil
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (assert)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (replace
                                                                                                                                                                                     -2)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "nth"
                                                                                                                                                                                       -8)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (assert)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (typepred
                                                                                                                                                                                           "trace")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "valid_trace?")
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "wf_trace?")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (flatten)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (split
                                                                                                                                                                                                   5)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (replace
                                                                                                                                                                                                     -9)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "last")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (lemma
                                                                                                                                                                                                         "nth_append[TraceState]")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst?)
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (flatten)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (assert)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (split
                                                                                                                                                                                                         -11)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (flatten)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (skeep)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                 2
                                                                                                                                                                                                                 "t")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (replace
                                                                                                                                                                                                                     -7)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (replace
                                                                                                                                                                                                                       -10)
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (replace
                                                                                                                                                                                                                         -7)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                                           "t")
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (expand
                                                                                                                                                                                                                             "nth"
                                                                                                                                                                                                                             -1)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (propax)
                                                                                                                                                                                                                              nil
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("3"
                                                                                                                                                                                                          (propax)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "trace1")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "wf_trace?")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (expand
                                                                                                                                                                               "length"
                                                                                                                                                                               2)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (replace
                                                                                                                                                               -2)
                                                                                                                                                              (("2"
                                                                                                                                                                (lemma
                                                                                                                                                                 "length_append[TraceState]")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "i")
                                                                                                                                                                        (("2"
                                                                                                                                                                          (expand
                                                                                                                                                                           "length"
                                                                                                                                                                           -1)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (typepred
                                                                                                                                                                               "trace1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (expand
                                                                                                                                                                                 "wf_trace?")
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (flatten)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (expand
                                                                                                                                                                                     "length")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      nil
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "length_append[TraceState]")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (lemma
                                                                                                                                                               "nth_append[TraceState]")
                                                                                                                                                              (("2"
                                                                                                                                                                (inst
                                                                                                                                                                 4
                                                                                                                                                                 "length(trace1)+i")
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst?)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (flatten)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (split
                                                                                                                                                                           -6)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil)
                                                                                                                                                                           ("2"
                                                                                                                                                                            (flatten)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (skeep)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (inst
                                                                                                                                                                                   5
                                                                                                                                                                                   "t")
                                                                                                                                                                                  nil
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil)
                                                                                                                                                                           ("3"
                                                                                                                                                                            (propax)
                                                                                                                                                                            nil
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (expand
                                                                                                                             "finite_trace?")
                                                                                                                            (("2"
                                                                                                                              (flatten)
                                                                                                                              (("2"
                                                                                                                                (lemma
                                                                                                                                 "last_append[TraceState]")
                                                                                                                                (("2"
                                                                                                                                  (split
                                                                                                                                   -11)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (typepred
                                                                                                                                           "trace2")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "wf_trace?")
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (hide
                                                                                                                                                 -2)
                                                                                                                                                (("1"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "trace2")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "wf_trace?")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "last_append[TraceState]")
                                                                                                                                            (("2"
                                                                                                                                              (split
                                                                                                                                               -4)
                                                                                                                                              (("1"
                                                                                                                                                (flatten)
                                                                                                                                                (("1"
                                                                                                                                                  (replace
                                                                                                                                                   -2)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "cdr(trace2)=null")
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "last")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "length"
                                                                                                                                                             -8)
                                                                                                                                                            (("1"
                                                                                                                                                              (expand
                                                                                                                                                               "length"
                                                                                                                                                               -8)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "nth"
                                                                                                                                                                 -8)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "append_null[TraceState]")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (propax)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (lemma
                                                                                                                                                         "last_cdr[TraceState]")
                                                                                                                                                        (("1"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "trace")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "valid_trace?")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "finite_trace?")
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "last_append[TraceState]")
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -11)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "trace2")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "wf_trace?")
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -2)
                                                                                                                                            (("1"
                                                                                                                                              (inst?)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "trace2")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "wf_trace?")
                                                                                                                                    (("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "last_append[TraceState]")
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -4)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -2)
                                                                                                                                              (("1"
                                                                                                                                                (case
                                                                                                                                                 "cdr(trace2)=null")
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "last")
                                                                                                                                                  (("1"
                                                                                                                                                    (replace
                                                                                                                                                     -1)
                                                                                                                                                    (("1"
                                                                                                                                                      (assert)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         +)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "length"
                                                                                                                                                           +)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "nth")
                                                                                                                                                            (("1"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "last_cdr[TraceState]")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (inst?)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (skeep)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "normDLEVENTUALLY")
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "DLEVENTUALLY(State_Trace(Q))(trace)")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -8)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "DLEVENTUALLY_EXISTS")
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -1
                                                                                                             "Q"
                                                                                                             "trace1")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "Q"
                                                                                                               "trace")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "trace1")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "wf_trace?")
                                                                                                                      (("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -10)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "length_append[TraceState]")
                                                                                                                                (("1"
                                                                                                                                  (inst?)
                                                                                                                                  (("1"
                                                                                                                                    (lemma
                                                                                                                                     "nth_append[TraceState]")
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "rdc(trace1)=null")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (lemma
                                                                                                                                           "append_null_left[TraceState]")
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (typepred
                                                                                                                                                   "i")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "length_rdc[TraceState]")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst?)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "length"
                                                                                                                                                         -1
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "nth"
                                                                                                                                                           -11)
                                                                                                                                                          (("1"
                                                                                                                                                            (assert)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               2
                                                                                                                                                               "0")
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "finite_trace?")
                                                                                                                                                                (("1"
                                                                                                                                                                  (expand
                                                                                                                                                                   "final_env")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "last")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "nth"
                                                                                                                                                                       -17)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "init_env")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (expand
                                                                                                                                                                               "nth")
                                                                                                                                                                              (("1"
                                                                                                                                                                                (typepred
                                                                                                                                                                                 "trace2")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (expand
                                                                                                                                                                                   "wf_trace?")
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (lift-if)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (split
                                                                                                                                                                                             -19)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil)
                                                                                                                                                                                             ("2"
                                                                                                                                                                                              (flatten)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (case
                                                                                                                                                                                                   "state_diff?(car(trace2))")
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("1"
                                                                                                                                                                                                      (typepred
                                                                                                                                                                                                       "behavior(car(trace2))")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         5
                                                                                                                                                                                                         "0")
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil)
                                                                                                                                                                                                         ("2"
                                                                                                                                                                                                          (typepred
                                                                                                                                                                                                           "D(nth[TraceState](trace, 0))")
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (skeep)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (replace
                                                                                                                                                                                                               -2)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (expand
                                                                                                                                                                                                                 "closed_interval")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (propax)
                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil)
                                                                                                                                                                                                   ("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (inst
                                                                                                                                                                                                       7
                                                                                                                                                                                                       "0")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        nil
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (expand
                                                                                                                                                                                                         "hp")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                          nil
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (typepred
                                                                                                                                                                 "trace")
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "wf_trace?")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (flatten)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (expand
                                                                                                                                                                       "length"
                                                                                                                                                                       2)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "rdc(trace1)"
                                                                                                                                         "trace2"
                                                                                                                                         "i")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "length_rdc[TraceState]")
                                                                                                                                            (("2"
                                                                                                                                              (inst?)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                (("2"
                                                                                                                                                  (typepred
                                                                                                                                                   "i")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -2)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        (("2"
                                                                                                                                                          (split
                                                                                                                                                           -3)
                                                                                                                                                          (("1"
                                                                                                                                                            (lift-if)
                                                                                                                                                            (("1"
                                                                                                                                                              (case
                                                                                                                                                               "i=length(trace1)-1")
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "nth"
                                                                                                                                                                     -2
                                                                                                                                                                     2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "final_env")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "last")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "init_env")
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              (("1"
                                                                                                                                                                                (inst
                                                                                                                                                                                 3
                                                                                                                                                                                 "length(trace1) - 1")
                                                                                                                                                                                (("1"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -2)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (typepred
                                                                                                                                                                                     "trace2")
                                                                                                                                                                                    (("1"
                                                                                                                                                                                      (expand
                                                                                                                                                                                       "wf_trace?")
                                                                                                                                                                                      (("1"
                                                                                                                                                                                        (flatten)
                                                                                                                                                                                        (("1"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("1"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("1"
                                                                                                                                                                                              (lift-if)
                                                                                                                                                                                              (("1"
                                                                                                                                                                                                (split
                                                                                                                                                                                                 -18)
                                                                                                                                                                                                (("1"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("1"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    nil
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil)
                                                                                                                                                                                                 ("2"
                                                                                                                                                                                                  (flatten)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (case
                                                                                                                                                                                                       "state_diff?(car(trace2))")
                                                                                                                                                                                                      (("1"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("1"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           6
                                                                                                                                                                                                           "0")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (typepred
                                                                                                                                                                                                             "D(nth[TraceState](trace, length[TraceState](trace1) - 1))")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (skeep)
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (replace
                                                                                                                                                                                                                 -2)
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (expand
                                                                                                                                                                                                                   "closed_interval")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (propax)
                                                                                                                                                                                                                    nil
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil)
                                                                                                                                                                                                       ("2"
                                                                                                                                                                                                        (assert)
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (inst
                                                                                                                                                                                                           8
                                                                                                                                                                                                           "0")
                                                                                                                                                                                                          (("1"
                                                                                                                                                                                                            (assert)
                                                                                                                                                                                                            nil
                                                                                                                                                                                                            nil)
                                                                                                                                                                                                           ("2"
                                                                                                                                                                                                            (expand
                                                                                                                                                                                                             "hp")
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (assert)
                                                                                                                                                                                                              nil
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil)
                                                                                                                                                                                 ("2"
                                                                                                                                                                                  (replace
                                                                                                                                                                                   -7)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (assert)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (replace
                                                                                                                                                                                       -5)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (typepred
                                                                                                                                                                                         "trace2")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (expand
                                                                                                                                                                                           "wf_trace?")
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (flatten)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (expand
                                                                                                                                                                                               "length"
                                                                                                                                                                                               2
                                                                                                                                                                                               3)
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (assert)
                                                                                                                                                                                                nil
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil)
                                                                                                                                                               ("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "nth_rdc[TraceState]")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (inst?)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (replace
                                                                                                                                                                         -1)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (inst
                                                                                                                                                                           4
                                                                                                                                                                           "i")
                                                                                                                                                                          (("2"
                                                                                                                                                                            (assert)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (flatten)
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -2)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (split
                                                                                                                                                                                   -10)
                                                                                                                                                                                  (("1"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("2"
                                                                                                                                                                                    (flatten)
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (assert)
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (skeep)
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (inst
                                                                                                                                                                                           5
                                                                                                                                                                                           "t")
                                                                                                                                                                                          nil
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil)
                                                                                                                                                                                   ("3"
                                                                                                                                                                                    (propax)
                                                                                                                                                                                    nil
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil)
                                                                                                                                                           ("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "trace2")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "wf_trace?")
                                                                                                                                                                (("2"
                                                                                                                                                                  (flatten)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "length"
                                                                                                                                                                     2
                                                                                                                                                                     2)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "nth(trace1, i)=nth(trace, i)")
                                                                                                                              (("1"
                                                                                                                                (inst
                                                                                                                                 3
                                                                                                                                 "i")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (flatten)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (split
                                                                                                                                           -5)
                                                                                                                                          (("1"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (skeep)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   4
                                                                                                                                                   "t")
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("3"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (lemma
                                                                                                                                 "nth_append[TraceState]")
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "length_append[TraceState]")
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (inst?)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (inst?)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("3"
                                                                                                                                (typepred
                                                                                                                                 "i")
                                                                                                                                (("3"
                                                                                                                                  (lemma
                                                                                                                                   "length_append[TraceState]")
                                                                                                                                  (("3"
                                                                                                                                    (split
                                                                                                                                     -3)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (inst?)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (inst?)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (replace
                                                                                               -9
                                                                                               1
                                                                                               rl)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -9
                                                                                                 -8
                                                                                                 -7)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -6)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "last")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "trace1")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "wf_trace?")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "rdc(trace1)=null")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "append_null_left[TraceState]")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "init_env"
                                                                                                                           2
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "length_rdc[TraceState]")
                                                                                                                            (("1"
                                                                                                                              (inst?)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     -6)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "final_env")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "last")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "nth")
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "car_append[TraceState]")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (lemma
                                                                                                                       "car_rdc[TraceState]")
                                                                                                                      (("1"
                                                                                                                        (inst?)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "init_env")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (lemma
                                                                                                                           "length_rdc[TraceState]")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "length")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "trace1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "wf_trace?")
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "car_append[TraceState]")
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (inst?)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "init_env")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -3)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst?)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "init_env")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -2)
                                                                                                                          (("2"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "valid_trace?")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "length")
                                                                                (("2"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "env")
                                                                    (("2"
                                                                      (split
                                                                       -3)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (typepred
                                                                           "j!1")
                                                                          (("1"
                                                                            (expand
                                                                             "length")
                                                                            (("1"
                                                                              (expand
                                                                               "length")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "trace")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (expand
                                                                             "length")
                                                                            (("2"
                                                                              (expand
                                                                               "length")
                                                                              (("2"
                                                                                (expand
                                                                                 "nth")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -3
                                                               "env")
                                                              (("2"
                                                                (split
                                                                 -3)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (typepred
                                                                     "j_1")
                                                                    (("1"
                                                                      (expand
                                                                       "length")
                                                                      (("1"
                                                                        (expand
                                                                         "length")
                                                                        (("1"
                                                                          (expand
                                                                           "nth")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "trace")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (expand
                                                                       "length")
                                                                      (("2"
                                                                        (expand
                                                                         "length")
                                                                        (("2"
                                                                          (expand
                                                                           "nth")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (UNION adt-constructor-decl "[[HP, HP] -> (union?)]" HP_adt nil)
    (union? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car_append formula-decl nil more_list_props structures)
    (car_rdc formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (length_rdc formula-decl nil more_list_props structures)
    (length_null formula-decl nil more_list_props structures)
    (nth_rdc formula-decl nil more_list_props structures)
    (State_Trace const-decl "bool" ltl_expr nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (last_cdr formula-decl nil more_list_props structures)
    (append_null formula-decl nil list_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (last_append formula-decl nil more_list_props structures)
    (rdc const-decl "list[T]" more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (<= const-decl "bool" reals nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (append def-decl "list[T]" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (dlSequent const-decl "bool" dynamic_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (trace_semantic_rel inductive-decl "bool" trace_semantics nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (dlSequent_equiv formula-decl nil dynamic_logic nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (\|- const-decl "bool" dynamic_logic nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (list type-decl nil list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (HP type-decl nil HP_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dltl_STARindcup 0
  (dltl_STARindcup-1 nil 3891418097
   ("" (skeep)
    (("" (lemma "dlSequent_equiv")
      ((""
        (inst -1 "(: ALLRUNS_tr(STAR(A), normDLEVENTUALLY(P, Q)) :)"
         "(: P :)")
        (("" (assert)
          (("" (expand "dlSequent")
            (("" (skeep)
              (("" (inst 1 "0")
                (("" (expand "nth" 1)
                  (("" (expand "ALLRUNS_tr" 1)
                    (("" (skeep)
                      (("" (lemma "dltl_BSTARindcup")
                        ((""
                          (lemma
                           "trace_semantic_rel_star_bounded_star")
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (skeep)
                                ((""
                                  (inst -2 "i" "P" "Q" "A")
                                  ((""
                                    (assert)
                                    ((""
                                      (lemma "dlSequent_equiv")
                                      ((""
                                        (inst
                                         -1
                                         "(: ALLRUNS_tr(BSTAR(A, i), normDLEVENTUALLY(P, Q)) :)"
                                         "(: P :)")
                                        ((""
                                          (assert)
                                          ((""
                                            (expand "dlSequent")
                                            ((""
                                              (inst?)
                                              ((""
                                                (split -1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (typepred "j")
                                                    (("1"
                                                      (expand "length")
                                                      (("1"
                                                        (expand
                                                         "length")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "ALLRUNS_tr"
                                                               -2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dlSequent_equiv formula-decl nil dynamic_logic nil)
    (nth def-decl "T" list_props nil)
    (trace_semantic_rel_star_bounded_star formula-decl nil
     trace_bounded_star_semantics nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (BSTAR def-decl "HP" bounded_star_semantics nil)
    (valid_trace? const-decl "bool" trace_semantics nil)
    (dltl_BSTARindcup formula-decl nil temporal_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dlSequent const-decl "bool" dynamic_logic nil)
    (normDLEVENTUALLY const-decl "bool" ltl_expr nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil)
    (TraceBoolExpr type-eq-decl nil ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (HP type-decl nil HP_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Formulas type-eq-decl nil bool_expr nil)
    (list type-decl nil list_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dltl_STAREG 0
  (dltl_STAREG-1 nil 3889265671
   (""
    (case "FORALL(i:nat, A: HP, P, Q: BoolExpr):
        DLAND(P, ALLRUNS(BSTAR(A,i), ALLRUNS_tr(A, normDLEG(P, Q)))) =
         ALLRUNS_tr(BSTAR(A,i+1),
 normDLEG(P, Q))")
    (("1" (skeep)
      (("1" (expand "DLAND") (("1" (postpone) nil nil)) nil)) nil)
     ("2" (postpone) nil nil))
    nil)
   nil shostak))
 (dltl_STARGE 0
  (dltl_STARGE-1 nil 3889265672 ("" (postpone) nil nil) nil shostak))
 (dltl_BSTARconcap 0
  (dltl_BSTARconcap-1 nil 3899905594 ("" (postpone) nil nil) nil
   shostak))
 (dltl_STARconcap 0
  (dltl_STARconcap-1 nil 3889265674 ("" (postpone) nil nil) nil
   shostak))
 (ALLRUNS_tr_equiv 0
  (ALLRUNS_tr_equiv-1 nil 3899201443 ("" (postpone) nil nil) nil
   shostak))
 (ALLRUNS_st_imp 0
  (ALLRUNS_st_imp-1 nil 3899203027
   ("" (skeep)
    (("" (expand "ALLRUNS_st")
      (("" (expand "ALLRUNS_tr")
        (("" (skeep)
          (("" (insteep)
            (("" (assert)
              (("" (expand "normDLGE") (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ALLRUNS_st const-decl "bool" ltl_expr nil)
    (normDLGE const-decl "bool" ltl_expr nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (ALLRUNS_tr const-decl "bool" ltl_expr nil))
   shostak))
 (ALLRUNS_st_finite_equiv 0
  (ALLRUNS_st_finite_equiv-1 nil 3899203068
   ("" (skeep)
    (("" (expand "ALLRUNS_st")
      (("" (expand "normDLGE") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((ALLRUNS_st const-decl "bool" ltl_expr nil)
    (normDLGE const-decl "bool" ltl_expr nil))
   shostak))
 (ALLRUNS_st_not_error_equiv_TCC1 0
  (ALLRUNS_st_not_error_equiv_TCC1-1 nil 3899204533
   ("" (subtype-tcc) nil nil) nil nil
   (ALLRUNS_st_not_error_equiv subtype "temporal_logic.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (ALLRUNS_st_not_error_equiv 0
  (ALLRUNS_st_not_error_equiv-1 nil 3899204538
   ("" (skeep)
    (("" (expand "ALLRUNS_st")
      (("" (expand "normDLGE")
        (("" (split)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (insteep) (("1" (assert) nil nil)) nil)) nil)
                 ("2" (flatten)
                  (("2" (expand "finite_trace?")
                    (("2" (typepred "trace")
                      (("2" (flatten)
                        (("2" (lemma "DLGE_nth")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 2 "length(trace)-1-j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "last")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "j")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (skeep)
              (("2" (insteep)
                (("1" (assert) nil nil)
                 ("2" (typepred "trace")
                  (("2" (expand "finite_trace?")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

