tl_star_lems  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  IMPORTING temporal_logic

%%--------------------------------------------
%%Define variables 
%%--------------------------------------------

  l,m: VAR Assigns
  f:   VAR ODEs
  j,k: VAR nat
  re:  VAR RealExpr
  r :  VAR real

  Gamma,Delta : VAR Formulas
  P,Q,J,R     : VAR BoolExpr
  qQ          : VAR QBoolExpr
  S,T,U,V     : VAR TraceBoolExpr
  A,B         : VAR HP
  t           : VAR Trace
  re1,re2     : VAR RealExpr


%---------
%% Some preliminary lemmas
%-----------

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Repetition
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%  [*]⊓
% P ∧ [A*][A](P ⊓ □Q)
% -----------------------
% [A*](P ⊓ □Q)
dltl_BSTARcap_temp: LEMMA
    equalities[BoolExpr].=( (LAMBDA(env:Environment): (FORALL(i:nat): DLAND(DLAND(P,Q),ALLRUNS_st(BSTAR(A,i),ALLRUNS_tr(A,normDLGLOBALLY(P,Q))))(env))),
    ( LAMBDA(env:Environment): FORALL(i:nat): ALLRUNS_tr(BSTAR(A,i),normDLGLOBALLY(P,Q))(env)))

dltl_STARcap_temp: LEMMA
    DLAND(DLAND(P,Q),ALLRUNS_st(STAR(A),ALLRUNS_tr(A,normDLGLOBALLY(P,Q)))) =
    ALLRUNS_tr(STAR(A),normDLGLOBALLY(P,Q))

%  〈*〉⊔
% P ∨ 〈A*〉〈A〉(P ⊔ ◇Q)
% =======================
% 〈A*〉(P ⊔ ◇Q)
dltl_STARcup_dual_temp: LEMMA
    DLOR(DLOR(P,Q),SOMERUNS_st(STAR(A),SOMERUNS_tr(A,normDLEVENTUALLY(P,Q)))) =
    SOMERUNS_tr(STAR(A),normDLEVENTUALLY(P,Q))

%  ind⊔
% ∀a (P → [a](P ⊔ ◇Q)))
% -----------------------
% P → [A*](P ⊔ ◇Q)
% @QED dltl_BSTARindcup proved by lmwhite3 on Tue, 01 Aug 2023 13:02:54 GMT
dltl_BSTARindcup_temp: LEMMA
    FORALL(n:nat)(P,Q)(A):
      (P |- ALLRUNS_tr(A,normDLEVENTUALLY(P,Q)))
      IMPLIES (P |- ALLRUNS_tr(BSTAR(A,n),normDLEVENTUALLY(P,Q)))
      

%% eventually

dltl_BSTAREG_dual: LEMMA
   equalities[BoolExpr].=( (LAMBDA(env:Environment): (EXISTS(i:nat): DLOR(P,SOMERUNS_st(BSTAR(A,i),SOMERUNS_tr(A,normDLEG(P,Q))))(env))), (LAMBDA(env:Environment): (EXISTS(i:nat): SOMERUNS_tr(BSTAR(A,i),normDLEG(P,Q))(env))))

dltl_BSTARGE_dual: LEMMA
   equalities[BoolExpr].=( (LAMBDA(env:Environment): (EXISTS(i:nat): DLOR(P,SOMERUNS_st(BSTAR(A,i),SOMERUNS_tr(A,normDLGE(P,Q))))(env))),
    (LAMBDA(env:Environment): (EXISTS(i:nat): SOMERUNS_tr(BSTAR(A,i),normDLGE(P,Q))(env))))

dltl_STAREG_dual: LEMMA
    DLOR(P,SOMERUNS_st(STAR(A),SOMERUNS_tr(A,normDLEG(P,Q)))) =
    SOMERUNS_tr(STAR(A),normDLEG(P,Q))

dltl_STARGE_dual: LEMMA
    DLOR(P,SOMERUNS_st(STAR(A),SOMERUNS_tr(A,normDLGE(P,Q)))) =
    SOMERUNS_tr(STAR(A),normDLGE(P,Q))

%  [*]◁
% P ∧ [A*][A](P ◁ T)
% =======================
% [A*](P ◁ T)
% where T = □◇Q or ◇□Q
dltl_STAREG_temp: LEMMA
    DLAND(P,ALLRUNS_st(STAR(A),ALLRUNS_tr(A,normDLEG(P,Q)))) =
    ALLRUNS_tr(STAR(A),normDLEG(P,Q))

dltl_STARGE_temp: LEMMA
    DLAND(P,ALLRUNS_st(STAR(A),ALLRUNS_tr(A,normDLGE(P,Q)))) =
    ALLRUNS_tr(STAR(A),normDLGE(P,Q))

% wow this one

dltl_STARconcap: LEMMA
    (FORALL(r:real): (qQ(r) |- SOMERUNS_tr(A,normDLGLOBALLY(qQ(r-1),P)))) IMPLIES
    (DLAND(DLEXISTS(qQ),P) |- SOMERUNS_tr(STAR(A),normDLGLOBALLY(LAMBDA(env:Environment): EXISTS(r:nonpos_real): qQ(r)(env),P)))



  END tl_star_lems
