(hp_props
 (assign1_prop_TCC1 0
  (assign1_prop_TCC1-1 nil 3782562816 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (assign1_prop subtype "(: (hp_props.x, hp_props.a) :)" "Assigns")))
 (assign1_prop 0
  (assign1_prop-2 "" 3787419021
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (flatten -1)
              (("1" (dl-unroll -1)
                (("1" (decompose-equality 1)
                  (("1" (case-replace "x!1 = x")
                    (("1" (assert) nil nil)
                     ("2" (inst -2 "x!1")
                      (("1" (assert) nil nil)
                       ("2" (expand "not_in_map")
                        (("2" (skeep 1 :preds? t)
                          (("2" (expand "length" -1)
                            (("2" (expand "length" -1)
                              (("2"
                                (assert)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (expand "semantic_rel")
            (("2" (split 1)
              (("1" (skeep 1 :preds? t) (("1" (grind) nil nil)) nil)
               ("2" (skeep 1)
                (("2" (typepred "i")
                  (("2" (expand "not_in_map")
                    (("2" (dl-unroll -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (x skolem-const-decl "nat" hp_props nil)
    (a skolem-const-decl "RealExpr" hp_props nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak)
  (assign1_prop-1 nil 3780406533
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (flatten -1)
              (("1" (dl-unroll -1)
                (("1" (decompose-equality 1)
                  (("1" (case-replace "x!1 = x")
                    (("1" (assert) nil nil)
                     ("2" (inst -2 "x!1")
                      (("1" (assert) nil nil)
                       ("2" (expand "not_in_map")
                        (("2" (dl-unroll 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (expand "semantic_rel")
            (("2" (split 1)
              (("1" (dl-unroll 1) (("1" (assert) nil nil)) nil)
               ("2" (skeep 1)
                (("2" (typepred "i")
                  (("2" (expand "not_in_map")
                    (("2" (dl-unroll -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (assign_prop_TCC1 0
  (assign_prop_TCC1-1 nil 3782562816 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (assign_prop subtype
    "(: (hp_props.x, hp_props.a), (hp_props.y, hp_props.b) :)"
    "Assigns")))
 (assign_prop 0
  (assign_prop-3 "" 3787419225
   ("" (skeep)
    (("" (beta)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (flatten)
              (("1" (dl-unroll -1)
                (("1" (decompose-equality)
                  (("1" (case-replace "x!1=x")
                    (("1" (grind) nil nil)
                     ("2" (case-replace "x!1=y")
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (inst -3 "x!1")
                          (("2" (expand "not_in_map")
                            (("2" (skeep 1 :preds? t)
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (case "i=0")
                                      (("1"
                                        (replace -1 :hide? t)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (case "i=1")
                                        (("1"
                                          (replace -1 :hide? t)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (split 1)
              (("1" (skeep 1 :preds? t)
                (("1" (expand "length" -1)
                  (("1" (expand "length" -1)
                    (("1" (expand "length" -1)
                      (("1" (case "i=0")
                        (("1" (replace -1 :hide? t)
                          (("1" (grind) nil nil)) nil)
                         ("2" (case "i=1")
                          (("1" (replace -1 :hide? t)
                            (("1" (grind) nil nil)) nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (expand "not_in_map")
                  (("2" (dl-unroll -1)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b skolem-const-decl "RealExpr" hp_props nil)
    (y skolem-const-decl "nat" hp_props nil)
    (a skolem-const-decl "RealExpr" hp_props nil)
    (x skolem-const-decl "nat" hp_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak)
  (assign_prop-1 "" 3787078298
   ("" (skeep)
    (("" (beta)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (flatten)
              (("1" (dl-unroll -1)
                (("1" (decompose-equality)
                  (("1" (case-replace "x!1=x")
                    (("1" (grind) nil nil)
                     ("2" (case-replace "x!1=y")
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (inst -3 "x!1")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll 1)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (split 1)
              (("1" (dl-unroll 1)
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                 ("2" (replaces -1) (("2" (assert) nil nil)) nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (expand "not_in_map")
                  (("2" (dl-unroll -1)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil))
   shostak)
  (assign_prop-2 nil 3786463320
   ("" (skeep)
    (("" (beta)
      (("" (split)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (flatten)
              (("1" (dl-unroll -1)
                (("1" (decompose-equality)
                  (("1" (case-replace "x!1=x")
                    (("1" (assert) nil nil)
                     ("2" (case-replace "x!1=y")
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (inst -3 "x!1")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll 1)
                              (("1" (assert) nil nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (split 1)
              (("1" (dl-unroll 1)
                (("1" (replaces -1) (("1" (grind) nil nil)) nil)
                 ("2" (replaces -1) (("2" (assert) nil nil)) nil))
                nil)
               ("2" (skeep :preds? t)
                (("2" (expand "not_in_map")
                  (("2" (dl-unroll -1)
                    (("2" (replaces -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   nil))
 (assign_comm_TCC1 0
  (assign_comm_TCC1-1 nil 3897151536
   ("" (skeep*) (("" (hide -1) (("" (grind) nil nil)) nil)) nil)
   ((null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (assign_comm subtype
    "(: (hp_props.y, hp_props.b), (hp_props.x, hp_props.a) :)"
    "Assigns")))
 (assign_comm 0
  (assign_comm-3 "" 3787419496
   ("" (skeep)
    (("" (beta)
      (("" (split +)
        (("1" (flatten)
          (("1" (lemma "assign_prop")
            (("1" (insteep)
              (("1" (beta)
                (("1" (assert)
                  (("1" (expand "semantic_rel" 1)
                    (("1" (split 1)
                      (("1" (skeep 1 :preds? t)
                        (("1" (expand "length" -1)
                          (("1" (expand "length" -1)
                            (("1" (expand "length" -1)
                              (("1"
                                (case "i=0")
                                (("1"
                                  (replace -1 :hide? t)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (case "i=1")
                                  (("1"
                                    (replace -1 :hide? t)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "assign_prop")
            (("2" (insteep)
              (("2" (beta)
                (("2" (assert)
                  (("2" (lemma "assign_prop")
                    (("2" (inst -1 "y" "x" "b" "a" "envi" "envo")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assign_prop formula-decl nil hp_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (y skolem-const-decl "nat" hp_props nil)
    (b skolem-const-decl "RealExpr" hp_props nil)
    (x skolem-const-decl "nat" hp_props nil)
    (a skolem-const-decl "RealExpr" hp_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil))
   shostak)
  (assign_comm-2 "" 3787079172
   ("" (skeep)
    (("" (beta)
      (("" (split +)
        (("1" (flatten)
          (("1" (lemma "assign_prop")
            (("1" (insteep)
              (("1" (beta)
                (("1" (assert)
                  (("1" (expand "semantic_rel" 1)
                    (("1" (split 1)
                      (("1" (dl-unroll 1)
                        (("1" (replaces -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replaces -1)
                          (("2" (assert)
                            (("2" (hide-all-but 1)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "assign_prop_yx")
            (("2" (insteep)
              (("2" (beta)
                (("2" (assert)
                  (("2" (expand "semantic_rel" 1)
                    (("2" (split 1)
                      (("1" (dl-unroll 1)
                        (("1" (replaces -1)
                          (("1" (assert)
                            (("1" (hide-all-but 1)
                              (("1" (grind) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assign_prop formula-decl nil hp_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil) nil)
   shostak)
  (assign_comm-1 nil 3780407453
   ("" (skeep)
    (("" (beta)
      (("" (split 2)
        (("1" (flatten)
          (("1" (lemma "assign_prop")
            (("1" (inst -1 "x" "y" "a" "b" "envi" "envo")
              (("1" (beta)
                (("1" (assert)
                  (("1" (expand "semantic_rel" 1)
                    (("1" (split 1)
                      (("1" (dl-unroll 1)
                        (("1" (replaces -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (lemma "assign_prop")
            (("2" (inst -1 "y" "x" "b" "a" "envi" "envo")
              (("2" (beta)
                (("2" (assert)
                  (("2" (expand "semantic_rel" 1)
                    (("2" (split 1)
                      (("1" (dl-unroll 1)
                        (("1" (replaces -1) (("1" (assert) nil nil))
                          nil)
                         ("2" (replaces -1) (("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (nth def-decl "T" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil nil (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (assign_prop formula-decl nil hp_props nil))
   shostak))
 (union_prop_TCC1 0
  (union_prop_TCC1-1 nil 3897151536 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (subrange type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (union_prop subtype "(: (hp_props.y, hp_props.b) :)" "Assigns")))
 (union_prop 0
  (union_prop-2 "" 3787419570
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (split -1)
              (("1" (hide 2)
                (("1" (expand "semantic_rel")
                  (("1" (flatten)
                    (("1" (dl-unroll -1)
                      (("1" (decompose-equality)
                        (("1" (case-replace "x!1=x")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (inst -2 "x!1")
                              (("2"
                                (expand "not_in_map")
                                (("2"
                                  (skeep 1 :preds? t)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (lemma "assign1_prop")
                  (("2" (beta)
                    (("2" (inst? -1) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (flatten)
              (("2" (split -1)
                (("1" (hide 2)
                  (("1" (lemma "assign1_prop")
                    (("1" (inst?)
                      (("1" (beta) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil)
                 ("2" (hide 1)
                  (("2" (lemma "assign1_prop")
                    (("2" (inst?)
                      (("2" (beta) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (x skolem-const-decl "nat" hp_props nil)
    (a skolem-const-decl "RealExpr" hp_props nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (assign1_prop formula-decl nil hp_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak)
  (union_prop-1 nil 3780330526
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (split -1)
              (("1" (hide 2)
                (("1" (expand "semantic_rel")
                  (("1" (flatten)
                    (("1" (dl-unroll -1)
                      (("1" (decompose-equality)
                        (("1" (case-replace "x!1=x")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (inst -2 "x!1")
                              (("2"
                                (expand "not_in_map")
                                (("2"
                                  (dl-unroll 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 1)
                (("2" (expand "semantic_rel")
                  (("2" (flatten)
                    (("2" (dl-unroll -1)
                      (("2" (decompose-equality 1)
                        (("2" (case-replace "x!1=y")
                          (("1" (assert) nil nil)
                           ("2" (inst -2 "x!1")
                            (("1" (assert) nil nil)
                             ("2" (expand "not_in_map")
                              (("2"
                                (dl-unroll 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (expand "semantic_rel")
              (("2" (flatten)
                (("2" (split -1)
                  (("1" (hide 2)
                    (("1" (split 1)
                      (("1" (dl-unroll 1) (("1" (assert) nil nil)) nil)
                       ("2" (decompose-equality -1)
                        (("2" (skeep 1)
                          (("2" (typepred "i")
                            (("2" (inst -2 "i")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "not_in_map")
                                  (("2"
                                    (dl-unroll -1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 1)
                    (("2" (split 1)
                      (("1" (dl-unroll 1) (("1" (assert) nil nil)) nil)
                       ("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (expand "not_in_map")
                            (("2" (dl-unroll -1)
                              (("2"
                                (replaces -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil) nil
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (union_prop_xx 0
  (union_prop_xx-2 "" 3787419613
   ("" (skeep)
    (("" (beta)
      (("" (lemma "union_prop")
        (("" (inst?)
          (("" (inst -1 "x" "a")
            (("" (beta)
              (("" (replaces -1) (("" (ground) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((union_prop formula-decl nil hp_props nil)
    (TRUE const-decl "bool" booleans nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)
  (union_prop_xx-1 nil 3787079478
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel")
            (("1" (split -1)
              (("1" (expand "semantic_rel")
                (("1" (flatten)
                  (("1" (dl-unroll -1)
                    (("1" (decompose-equality)
                      (("1" (case-replace "x!1=x")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (inst -2 "x!1")
                            (("2" (expand "not_in_map")
                              (("2"
                                (dl-unroll 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "semantic_rel")
                (("2" (flatten)
                  (("2" (dl-unroll -1)
                    (("2" (decompose-equality 1)
                      (("2" (case-replace "x!1=x")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (inst -2 "x!1")
                            (("2" (expand "not_in_map")
                              (("2"
                                (dl-unroll 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel")
            (("2" (flatten)
              (("2" (hide 2)
                (("2" (expand "semantic_rel")
                  (("2" (split 1)
                    (("1" (dl-unroll 1) (("1" (assert) nil nil)) nil)
                     ("2" (decompose-equality -1)
                      (("2" (skeep 1)
                        (("2" (typepred "i")
                          (("2" (inst -2 "i")
                            (("2" (assert)
                              (("2"
                                (expand "not_in_map")
                                (("2"
                                  (dl-unroll -1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (union_id 0
  (union_id-2 "" 3787079466
   ("" (skeep 1)
    (("" (beta)
      (("" (lemma "union_prop_xx")
        (("" (insteep -1)
          (("" (beta)
            (("" (replaces -1)
              (("" (lemma "assign1_prop")
                (("" (insteep)
                  (("" (beta)
                    (("" (replaces -1) (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TRUE const-decl "bool" booleans nil)
    (assign1_prop formula-decl nil hp_props nil)
    (union_prop_xx formula-decl nil hp_props nil))
   shostak)
  (union_id-1 nil 3780408413
   ("" (skeep 1)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (lemma "union_prop")
            (("1" (inst -1 "x" "x" "a" "a" "envi" "envo")
              (("1" (beta)
                (("1" (assert)
                  (("1" (lemma "assign1_prop")
                    (("1" (inst -1 "x" "a" "envi" "envo")
                      (("1" (beta) (("1" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (lemma "assign1_prop")
            (("2" (inst -1 "x" "a" "envi" "envo")
              (("2" (beta)
                (("2" (assert)
                  (("2" (lemma "union_prop")
                    (("2" (inst -1 "x" "x" "a" "a" "envi" "envo")
                      (("2" (beta) (("2" (assert) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (assign1_prop formula-decl nil hp_props nil)
    (union_prop_xx formula-decl nil hp_props nil))
   shostak))
 (union_comm 0
  (union_comm-1 nil 3780408745
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel") (("1" (grind) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel") (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak))
 (seq_prop 0
  (seq_prop-2 "" 3787419769
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten 1)
          (("1" (expand "semantic_rel")
            (("1" (skeep -1)
              (("1" (expand "semantic_rel")
                (("1" (dl-unroll -1)
                  (("1" (dl-unroll -3)
                    (("1" (case "x /= y")
                      (("1" (decompose-equality 1)
                        (("1" (case-replace "x!1 = x")
                          (("1" (inst -6 "x")
                            (("1" (assert) nil nil)
                             ("2" (expand "not_in_map")
                              (("2"
                                (skeep 1 :preds? t)
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (expand "length" -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "x!1 = y")
                            (("1" (inst -4 "y")
                              (("1"
                                (case
                                 "env = envi WITH [(x) := a(envi)]")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide -5)
                                      (("2"
                                        (reveal -3)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (case-replace
                                                 "x!2 = x")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (inst -1 "x!2")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "not_in_map")
                                                    (("2"
                                                      (skeep
                                                       1
                                                       :preds?
                                                       t)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (skeep 1 :preds? t)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -3 "x!1")
                              (("1"
                                (inst -5 "x!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "not_in_map")
                                  (("2"
                                    (skeep 1 :preds? t)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (expand "length" -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (skeep 1 :preds? t)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (decompose-equality 2)
                          (("2" (case-replace "x!1 = x")
                            (("1"
                              (case "env = envi WITH [(x) := a(envi)]")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -4 -5 2 3)
                                (("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (case-replace "x!2 = x")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst -2 "x!2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "not_in_map")
                                        (("2"
                                          (skeep 1 :preds? t)
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (expand "length" -1)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -4 "x!1")
                              (("1"
                                (inst -2 "x!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "not_in_map")
                                  (("2"
                                    (skeep 1 :preds? t)
                                    (("2"
                                      (expand "length" -1)
                                      (("2"
                                        (expand "length" -1)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (skeep 1 :preds? t)
                                  (("2"
                                    (expand "length" -1)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (expand "semantic_rel")
            (("2" (name "env" "envi WITH [(x) := a(envi)]")
              (("2" (inst 1 "env")
                (("2" (split 1)
                  (("1" (hide -2)
                    (("1" (lemma "assign1_prop")
                      (("1" (inst -1 "x" "a" "envi" "env")
                        (("1" (beta -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (lemma "assign1_prop")
                      (("2" (inst -1 "y" "b" "env" "envo")
                        (("2" (beta -1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assign1_prop formula-decl nil hp_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "nat" hp_props nil)
    (b skolem-const-decl "RealExpr" hp_props nil)
    (y skolem-const-decl "nat" hp_props nil)
    (not_in_map const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (a skolem-const-decl "RealExpr" hp_props nil)
    (x!2 skolem-const-decl "nat" hp_props nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (x!2 skolem-const-decl "nat" hp_props nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak)
  (seq_prop-1 nil 3780392189
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten 1)
          (("1" (expand "semantic_rel")
            (("1" (skeep -1)
              (("1" (expand "semantic_rel")
                (("1" (dl-unroll -1)
                  (("1" (dl-unroll -3)
                    (("1" (case "x /= y")
                      (("1" (decompose-equality 1)
                        (("1" (case-replace "x!1 = x")
                          (("1" (inst -6 "x")
                            (("1" (assert) nil nil)
                             ("2" (expand "not_in_map")
                              (("2"
                                (dl-unroll 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case-replace "x!1 = y")
                            (("1" (inst -4 "y")
                              (("1"
                                (case
                                 "env = envi WITH [(x) := a(envi)]")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide 2 3)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide -5)
                                      (("2"
                                        (reveal -3)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (case-replace
                                                 "x!2 = x")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (inst -1 "x!2")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (expand
                                                     "not_in_map")
                                                    (("2"
                                                      (dl-unroll 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (dl-unroll 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -3 "x!1")
                              (("1"
                                (inst -5 "x!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "not_in_map")
                                  (("2"
                                    (dl-unroll 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (dl-unroll 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (decompose-equality 2)
                          (("2" (case-replace "x!1 = x")
                            (("1"
                              (case "env = envi WITH [(x) := a(envi)]")
                              (("1" (assert) nil nil)
                               ("2"
                                (hide -1 -4 -5 2 3)
                                (("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (case-replace "x!2 = x")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst -2 "x!2")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "not_in_map")
                                        (("2"
                                          (dl-unroll 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -4 "x!1")
                              (("1"
                                (inst -2 "x!1")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "not_in_map")
                                  (("2"
                                    (dl-unroll 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "not_in_map")
                                (("2"
                                  (dl-unroll 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten 1)
          (("2" (expand "semantic_rel")
            (("2" (name "env" "envi WITH [(x) := a(envi)]")
              (("2" (inst 1 "env")
                (("2" (split 1)
                  (("1" (hide -2)
                    (("1" (lemma "assign1_prop")
                      (("1" (inst -1 "a" "envi" "env")
                        (("1" (beta -1) (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (replace -1)
                    (("2" (lemma "assign1_prop_y")
                      (("2" (inst -1 "b" "env" "envo")
                        (("2" (beta -1) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil) nil
    (mapexpr_inj const-decl "bool" hp_def nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (/= const-decl "boolean" notequal nil)
    (nth def-decl "T" list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil) nil
    (assign1_prop formula-decl nil hp_props nil))
   shostak))
 (test_prop 0
  (test_prop-1 nil 3780409246
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel") (("1" (propax) nil nil)) nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel") (("2" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)) shostak))
 (diff_prop_TCC1 0
  (diff_prop_TCC1-1 nil 3878568988 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Environment type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cnst const-decl "real" hp_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (diff_prop subtype "(: (hp_props.x, hp_def.cnst(hp_props.c)) :)"
    "ODEs")))
 (diff_prop 0
  (diff_prop-1 nil 3878568993
   ("" (skeep)
    (("" (beta)
      (("" (split 1)
        (("1" (flatten)
          (("1" (expand "semantic_rel" -1)
            (("1" (skeep)
              (("1" (expand "semantic_rel_diff" -1)
                (("1" (skeep)
                  (("1" (skeep)
                    (("1" (inst 1 "r")
                      (("1" (skeep)
                        (("1" (assert)
                          (("1"
                            (inst -2 "r_1"
                             "env_at_t((: (x, cnst(c)) :), fs, envi)(r_1)")
                            (("1" (assert)
                              (("1"
                                (typepred "fs")
                                (("1"
                                  (case
                                   "(LAMBDA(s:(D)): fs(0)(s))  =  (LAMBDA(s:(D)): envi(x) + c * s)")
                                  (("1"
                                    (case
                                     "env_at_t((: (x, cnst(c)) :), fs, envi)(r_1) = envi WITH [(x) := envi(x) + c * r_1]")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 1)
                                              (("2"
                                                (expand "env_at_t?" -5)
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (case "x!1 /= x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -6 "x!1")
                                                        (("1"
                                                          (expand
                                                           "not_in_map"
                                                           1)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst -6 "0")
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -6)
                                                          (("2"
                                                            (decompose-equality
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "r")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (typepred
                                           " env_at_t((: (x, cnst(c)) :), fs, envi)(r_1)")
                                          (("2"
                                            (expand "env_at_t?" -1)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (case "x!1=x")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -3 "0")
                                                    (("1"
                                                      (expand "nth" -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (decompose-equality
                                                           -5)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "r_1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "r_1")
                                                              (("2"
                                                                (typepred
                                                                 "r")
                                                                (("2"
                                                                  (typepred
                                                                   "D")
                                                                  (("2"
                                                                    (expand
                                                                     "dd?"
                                                                     -1)
                                                                    (("2"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "not_in_map"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (hide -2 -3 -4)
                                      (("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (lemma "derivs_equal[(D)]")
                                          (("1"
                                            (case
                                             "EXISTS(a,b:(D)): a<b")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst
                                                 -2
                                                 "a"
                                                 "b"
                                                 "LAMBDA(s:(D)): fs(0)(s)"
                                                 " LAMBDA(s:(D)): envi(x) + c * s")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -2)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (expand
                                                         "solution_odes_u?"
                                                         -3)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "solution_odes?"
                                                             -3)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "env_at_t?"
                                                                 -4)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "0")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     -4)
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "0")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x!1")
                                                                          (("1"
                                                                            (hide
                                                                             -6
                                                                             -7)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (typepred
                                                                               "D")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "solution_odes_u?"
                                                       -2)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (expand
                                                           "solution_odes?"
                                                           -2)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "sol_at_t?"
                                                               -4)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "x_1"
                                                                   "env_at_t((: (x,cnst(c)) :), fs,envi)(x_1)")
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     "0")
                                                                    (("2"
                                                                      (expand
                                                                       "restrict"
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "cnst"
                                                                               1)
                                                                              (("2"
                                                                                (hide
                                                                                 -4
                                                                                 -5)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -3)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         1)
                                                                                        (("2"
                                                                                          (deriv
                                                                                           "LAMBDA (s: (D)): envi(x) + c * s")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "D")
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "dd_deriv_domain")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2 -2)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (derivable)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide -1 -2 2)
                                                  (("3"
                                                    (typepred "fs")
                                                    (("3"
                                                      (expand
                                                       "solution_odes_u?"
                                                       -1)
                                                      (("3"
                                                        (flatten)
                                                        (("3"
                                                          (expand
                                                           "solution_odes?"
                                                           -1)
                                                          (("3"
                                                            (flatten)
                                                            (("3"
                                                              (expand
                                                               "derivable_odes?"
                                                               -1)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "0")
                                                                (("3"
                                                                  (expand
                                                                   "restrict"
                                                                   -1)
                                                                  (("3"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2 -2 -1)
                                              (("2"
                                                (typepred "D")
                                                (("2"
                                                  (expand "dd?" -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "0"
                                                         "b")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0" "1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "dd_noe")
                                            (("2" (inst?) nil nil))
                                            nil)
                                           ("3"
                                            (assert)
                                            (("3"
                                              (lemma "dd_con")
                                              (("3" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "r" "r_1" "D")
                              (("2"
                                (hide -4 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "r")
                        (("2" (typepred "D")
                          (("2" (hide -3 -4) (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "semantic_rel" 1)
            (("2" (skeep)
              (("2" (typepred "t")
                (("2" (inst 1 "closed_interval(0,t+1)")
                  (("1" (expand "semantic_rel_diff" 1)
                    (("1" (inst 1 "t")
                      (("1"
                        (inst 1
                         "LAMBDA(i:below(1)): LAMBDA(s:real): envi(x) + c * s")
                        (("1" (split 1)
                          (("1" (expand "env_at_t?" 1)
                            (("1" (split 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "t")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (decompose-equality -4)
                                          (("1"
                                            (inst -1 "i_1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case "i_1 /= x")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred "i_1")
                                                  (("2"
                                                    (expand
                                                     "not_in_map"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "0")
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (typepred "k")
                                  (("2"
                                    (expand "length " -1)
                                    (("2"
                                      (expand "length " -1)
                                      (("2"
                                        (expand "nth" 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "t")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "env")
                              (("2"
                                (inst -3 "t_1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case
                                       "env = envi WITH [(x) := envi(x) + c * t_1]")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (case "x!1=x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "env_at_t?" -2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "0")
                                                  (("1"
                                                    (expand "nth" -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "env_at_t?" -1)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -1 "x!1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand
                                                   "not_in_map"
                                                   1)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "t_1")
                                  (("2"
                                    (hide -3)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -2)
                          (("2" (expand "solution_odes_u?" 1)
                            (("2" (split 1)
                              (("1"
                                (expand "solution_odes?" 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "derivable_odes?" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "k")
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (expand "restrict" 1)
                                              (("1"
                                                (derivable)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "env_at_t?" 1)
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "k")
                                        (("2"
                                          (expand "length" -1)
                                          (("2"
                                            (expand "length" -1)
                                            (("2"
                                              (expand "nth" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (expand "sol_at_t?" 1)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (typepred "k")
                                          (("3"
                                            (expand "length" -1)
                                            (("3"
                                              (expand "length" -1)
                                              (("3"
                                                (expand "nth" 1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand
                                                     "restrict"
                                                     1)
                                                    (("3"
                                                      (hide 1)
                                                      (("3"
                                                        (deriv
                                                         "LAMBDA (s_1: (closed_interval(0, 1 + t))): envi(x) + c * s_1")
                                                        (("1"
                                                          (reveal 1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "cnst"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "ci_deriv_domain")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "(closed_interval(0,1+t))")
                                                            (("2"
                                                              (lemma
                                                               "ci_ci")
                                                              (("2"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "S")
                                    (("2"
                                      (lemma "derivs_equal[(S)]")
                                      (("1"
                                        (case "EXISTS(a,b:(S)): a<b")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst
                                             -2
                                             "a"
                                             "b"
                                             "LAMBDA(s:(S)): ff(i_1)(s)"
                                             "LAMBDA(s:(S)): envi(x) + c*s")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand
                                                     "solution_odes?"
                                                     -5)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "env_at_t?"
                                                         -6)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "i_1")
                                                          (("1"
                                                            (decompose-equality
                                                             -1)
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "0")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "t_1")
                                                                (("1"
                                                                  (replace
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "const_fun")
                                                                      (("1"
                                                                        (expand
                                                                         "+")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -7)
                                                                            (("1"
                                                                              (typepred
                                                                               "i_1")
                                                                              (("1"
                                                                                (expand
                                                                                 "length")
                                                                                (("1"
                                                                                  (expand
                                                                                   "length")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -4
                                                                 -5
                                                                 -6)
                                                                (("2"
                                                                  (typepred
                                                                   "S")
                                                                  (("2"
                                                                    (hide
                                                                     -2
                                                                     -5)
                                                                    (("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand
                                                       "solution_odes?"
                                                       -4)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst
                                                           -6
                                                           "x_1"
                                                           "env_at_t((: (x,cnst(c)):), ff, envi)(x_1)")
                                                          (("2"
                                                            (expand
                                                             "sol_at_t?"
                                                             -6)
                                                            (("2"
                                                              (inst
                                                               -6
                                                               "0")
                                                              (("2"
                                                                (expand
                                                                 "restrict")
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -6)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "cnst"
                                                                       -6)
                                                                      (("2"
                                                                        (typepred
                                                                         "i_1")
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "(LAMBDA (s: (S)): ff(i_1)(s)) = (LAMBDA (s: (S)): ff(0)(s))")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -8
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -)
                                                                                      (("1"
                                                                                        (hide
                                                                                         1)
                                                                                        (("1"
                                                                                          (deriv
                                                                                           "LAMBDA (s: (S)): envi(x) + c * s")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "dd_deriv_domain")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (hide -)
                                                (("2"
                                                  (derivable)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand
                                               "solution_odes?"
                                               -4)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (expand
                                                   "derivable_odes?"
                                                   -4)
                                                  (("3"
                                                    (inst -4 "0")
                                                    (("3"
                                                      (expand
                                                       "restrict"
                                                       -4)
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (case
                                                           "i_1=0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "i_1")
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "S")
                                              (("2"
                                                (expand "dd?" -1)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "0"
                                                         "b")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst 1 "0" "1")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "dd_noe")
                                        (("2" (inst?) nil nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (lemma "dd_con")
                                          (("3" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (hide -2) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "dd?" 1)
                    (("2" (flatten) (("2" (inst 1 "1+t") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (t skolem-const-decl "nnreal" hp_props nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ci_deriv_domain formula-decl nil interval_def ODEs)
    (ci_ci formula-decl nil interval_def ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (d__2 skolem-const-decl "[(closed_interval(0, 1 + t)) -> real]"
     hp_props nil)
    (b skolem-const-decl "posreal" hp_props nil)
    (d__3 skolem-const-decl "[(S) -> real]" hp_props nil)
    (i_1 skolem-const-decl "below(length((: (x, cnst(c)) :)))" hp_props
     nil)
    (ff skolem-const-decl
     "[below(length((: (x, cnst(c)) :))) -> [real -> real]]" hp_props
     nil)
    (S skolem-const-decl
     "{SS: (dd?) | FORALL (x: real): SS(x) IMPLIES closed_interval(0, 1 + t)(x)}"
     hp_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (t_1 skolem-const-decl
     "{t_1: (closed_interval(0, t + 1)) | t_1 <= t}" hp_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (r skolem-const-decl "(D)" hp_props nil)
    (D skolem-const-decl "(dd?)" hp_props nil)
    (dd? const-decl "bool" hp_expr nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable_odes? const-decl "bool" hp_expr nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (sol_at_t? const-decl "bool" hp_expr nil)
    (solution_odes? const-decl "bool" hp_expr nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (hp const-decl "bool" interval_def ODEs)
    (length_singleton formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (x!1 skolem-const-decl "nat" hp_props nil)
    (c skolem-const-decl "real" hp_props nil)
    (x skolem-const-decl "nat" hp_props nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (/= const-decl "boolean" notequal nil)
    (derivs_equal formula-decl nil derivative_props analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (b skolem-const-decl "posreal" hp_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (deriv_domain_not_one_element formula-decl nil deriv_domain_def
     analysis)
    (derivable_const_lam formula-decl nil derivatives_lam analysis)
    (derivable_scal1_lam formula-decl nil derivatives_lam analysis)
    (derivable_id_lam formula-decl nil derivatives_lam analysis)
    (derivable_add_lam formula-decl nil derivatives_lam analysis)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (deriv_scal1_lam formula-decl nil derivatives_lam analysis)
    (deriv_add_lam formula-decl nil derivatives_lam analysis)
    (deriv_const_lam formula-decl nil derivatives_lam analysis)
    (deriv_id_lam formula-decl nil derivatives_lam analysis)
    (d__1 skolem-const-decl "[(D) -> real]" hp_props nil)
    (dd_deriv_domain formula-decl nil hp_expr nil)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (constant_seq1 application-judgement "(convergent?)"
     convergence_ops analysis)
    (const_fun_continuous application-judgement "continuous_fun[real]"
     hp_expr nil)
    (derivable_const application-judgement "deriv_fun[T]"
     sqrt_derivative_lam analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (fs skolem-const-decl
     "(solution_odes_u?(D, (: (x, cnst(c)) :), envi))" hp_props nil)
    (envi skolem-const-decl "Environment" hp_props nil)
    (dd_noe formula-decl nil hp_expr nil)
    (dd_con formula-decl nil hp_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (env_at_t const-decl "{env: (env_at_t?(odes, fs, envi, t)) |
   FORALL (env2: (env_at_t?(odes, fs, envi, t))): env = env2}" hp_expr
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (solution_odes_u? const-decl "bool" hp_expr nil)
    (cnst const-decl "real" hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (env_at_t? const-decl "bool" hp_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (< const-decl "bool" reals nil) (ODEs type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (r_1 skolem-const-decl "nnreal" hp_props nil)
    (semantic_rel_diff const-decl "bool" hp_expr nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   nil))
 (star_prop_imp_TCC1 0
  (star_prop_imp_TCC1-1 nil 3780763614 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (star_prop_imp subtype
    "(: (hp_props.x, LAMBDA (env: hp_def.Environment): (number_fields.+)(env(hp_props.x), 1)) :)"
    "Assigns")))
 (star_prop_imp 0
  (star_prop_imp-1 "" 3787419660
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "semantic_rel_induction")
          ((""
            (inst -1
             "LAMBDA(hp:HP)(envi:Environment)(envo:Environment): hp = STAR(ASSIGN((: (x, LAMBDA (env: Environment): env(x) + 1) :))) IMPLIES (envo(x) >= envi(x) AND (FORALL (i: nat): i /= x IMPLIES envo(i) = envi(i)))")
            (("" (split -1)
              (("1"
                (inst -1
                 "STAR(ASSIGN((: (x, LAMBDA (env: Environment): env(x) + 1) :)))"
                 "envi" "envo")
                (("1" (assert) nil nil)) nil)
               ("2" (hide -1 2)
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (skeep :preds? t)
                        (("2" (replaces -6)
                          (("2" (assert)
                            (("2" (hide -2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "semantic_rel")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (dl-unroll -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -2 "i")
                                            (("1"
                                              (insteep)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "not_in_map")
                                              (("2"
                                                (skeep 1 :preds? t)
                                                (("2"
                                                  (expand "length" -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (not_in_map const-decl "bool" hp_def nil)
    (x skolem-const-decl "nat" hp_props nil)
    (i skolem-const-decl "nat" hp_props nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic_rel_induction formula-decl nil hp_expr nil))
   shostak)
  (star_prop_imp-2 nil 3786464388
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (lemma "semantic_rel_induction")
          ((""
            (inst -1
             "LAMBDA(hp:HP)(envi:Environment)(envo:Environment): hp = STAR(ASSIGN((: (x,
                                                     LAMBDA (env: Environment):
                                                       env(x) + 1) :))) IMPLIES (envo(x) >= envi(x) AND
                          (FORALL (i: nat): i /= x IMPLIES envo(i) = envi(i)))")
            (("" (split -1)
              (("1"
                (inst -1
                 "STAR(ASSIGN((: (x, LAMBDA (env: Environment): env(x) + 1) :)))"
                 "envi" "envo")
                (("1" (assert) nil nil)) nil)
               ("2" (hide -1 2)
                (("2" (skeep)
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (assert) nil nil)
                       ("2" (skeep :preds? t)
                        (("2" (replaces -6)
                          (("2" (assert)
                            (("2" (hide -2)
                              (("2"
                                (hide -2)
                                (("2"
                                  (expand "semantic_rel")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (dl-unroll -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst -2 "i")
                                            (("1"
                                              (insteep)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (expand "not_in_map")
                                              (("2"
                                                (dl-unroll 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (MapExprInj type-eq-decl nil hp_def nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (semantic_rel inductive-decl "bool" hp_expr nil)
    (TRUE const-decl "bool" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic_rel_induction formula-decl nil hp_expr nil))
   nil))
 (star2_prop_imp_TCC1 0
  (star2_prop_imp_TCC1-1 nil 3782562816 ("" (tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (/= const-decl "boolean" notequal nil)
    (mapexpr_inj const-decl "bool" hp_def nil))
   nil
   (star2_prop_imp subtype "(: (hp_props.x, hp_def.cnst(0)) :)"
    "Assigns")))
 (star2_prop_imp 0
  (star2_prop_imp-2 "" 3787317310
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (expand "semantic_rel")
          (("" (skeep)
            ((""
              (case "0 = env_1(x) AND (FORALL (i:nat): i /= x IMPLIES env_1(i) = envi(i))")
              (("1" (flatten)
                (("1" (hide -3)
                  (("1" (lemma "semantic_rel_induction")
                    (("1"
                      (inst -1
                       "LAMBDA (hp: HP) (env1: Environment) (envo: Environment): 0 <= env1(x) AND env1(x) <= 10 AND (floor(env1(x)) = env1(x)) AND (FORALL (i:nat): i/=x IMPLIES env1(i)=envi(i)) AND hp = STAR(SEQ(TEST(LAMBDA (env: Environment): env(x) < 10), ASSIGN((: (x, LAMBDA (env: Environment): 1 + env(x)) :)))) IMPLIES (0 <= envo(x) AND envo(x) <= 10 AND (FORALL (i: nat): i /= x IMPLIES envo(i) = envi(i)))")
                      (("1" (split -1)
                        (("1" (inst? -1)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (hide 2)
                              (("4"
                                (hide-all-but (-1 1))
                                (("4"
                                  (assert)
                                  (("4"
                                    (grind-reals)
                                    (("4"
                                      (replace -1 :dir rl)
                                      (("4"
                                        (hide -1)
                                        (("4"
                                          (lemma "floor_int")
                                          (("4" (inst -1 "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (propax) nil nil)
                             ("6" (hide 2)
                              (("6"
                                (expand "<")
                                (("6"
                                  (expand "cnst")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (hide-all-but 1)
                                      (("6" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -5 "i")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (replace -9)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -4)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (expand "semantic_rel" -1)
                                            (("2"
                                              (skeep -1)
                                              (("2"
                                                (case
                                                 "0 <= env_1!2(x)")
                                                (("1"
                                                  (expand
                                                   "semantic_rel"
                                                   -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "env_1!1(x) = env_1!2(x) + 1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (lemma
                                                             "assign1_prop")
                                                            (("2"
                                                              (beta)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x"
                                                                   "LAMBDA (env: Environment): 1 + env(x)"
                                                                   "env_1!2"
                                                                   "env_1!1")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "semantic_rel"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "semantic_rel" -1)
                                          (("3"
                                            (skeep -1)
                                            (("3"
                                              (expand
                                               "semantic_rel"
                                               -1)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (case
                                                   "env_1!1(x) = env_1!2(x) + 1")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1
                                                      -2
                                                      -3
                                                      -8
                                                      -9
                                                      1))
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (replace
                                                             -3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (case
                                                                 "floor(envi_1(x)) <= 9")
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (name-label*
                                                                       ("y_183"
                                                                        (typechecked
                                                                         "envi_1(x)"
                                                                         "real"))
                                                                       :hide?
                                                                       t
                                                                       :label
                                                                       (:pairing
                                                                        |y:2464|)
                                                                       :tcc-label
                                                                       (:pairing
                                                                        nil)
                                                                       :tcc-step
                                                                       (:pairing
                                                                        nil))
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4)
                                                    (("2"
                                                      (hide-all-but
                                                       (-3 1))
                                                      (("2"
                                                        (lemma
                                                         "assign1_prop")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "LAMBDA (env: Environment): 1 + env(x)"
                                                           "env_1!2"
                                                           "env_1!1")
                                                          (("2"
                                                            (beta)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "semantic_rel" -1)
                                          (("4"
                                            (skeep -1)
                                            (("4"
                                              (expand
                                               "semantic_rel"
                                               -1)
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (case
                                                   "floor(env_1!2(x)) = env_1!2(x)")
                                                  (("1"
                                                    (case
                                                     "env_1!1(x) = env_1!2(x) + 1")
                                                    (("1"
                                                      (hide -5)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -8
                                                            1))
                                                          (("1"
                                                            (lemma
                                                             "floor_plus_int")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1"
                                                               "env_1!2(x)")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "assign1_prop")
                                                      (("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "LAMBDA (env: Environment): 1 + env(x)"
                                                           "env_1!2"
                                                           "env_1!1")
                                                          (("2"
                                                            (beta)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -8 1))
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide-all-but (-1 -7 1))
                                          (("5"
                                            (expand "semantic_rel")
                                            (("5"
                                              (skeep)
                                              (("5"
                                                (skeep)
                                                (("5"
                                                  (expand
                                                   "semantic_rel"
                                                   -1)
                                                  (("5"
                                                    (flatten)
                                                    (("5"
                                                      (lemma
                                                       "assign1_prop")
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "x"
                                                         "LAMBDA (env: Environment): 1 + env(x)"
                                                         "env_1!2"
                                                         "env_1!1")
                                                        (("5"
                                                          (beta)
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (case
                                                               "env_1!1 = env_1!2 WITH [(x) := 1 + env_1!2(x)]")
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -2)
                  (("2" (lemma "assign1_prop")
                    (("2" (inst -1 "x" "cnst(0)" "envi" "env_1")
                      (("2" (beta)
                        (("2" (assert)
                          (("2" (hide -2)
                            (("2" (replaces -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cnst")
                                  (("2"
                                    (skeep)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel inductive-decl "bool" hp_expr nil)
    (/= const-decl "boolean" notequal nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (HP type-decl nil HP_adt nil) (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (list type-decl nil list_adt nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (Assigns type-eq-decl nil hp_def nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (assign1_prop formula-decl nil hp_props nil)
    (cnst const-decl "real" hp_def nil)
    (val const-decl "real" hp_def nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (floor_int formula-decl nil floor_ceil nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic_rel_induction formula-decl nil hp_expr nil))
   shostak)
  (star2_prop_imp-1 nil 3781627949
   ("" (skeep)
    (("" (beta)
      (("" (flatten)
        (("" (expand "semantic_rel")
          (("" (skeep)
            ((""
              (case "0 = env_1(x) AND (FORALL (i:nat): i /= x IMPLIES env_1(i) = envi(i))")
              (("1" (flatten)
                (("1" (hide -3)
                  (("1" (lemma "semantic_rel_induction")
                    (("1"
                      (inst -1
                       "LAMBDA (hp: HP) (env1: Environment) (envo: Environment): 0 <= env1(x) AND env1(x) <= 10 AND (floor(env1(x)) = env1(x)) AND (FORALL (i:nat): i/=x IMPLIES env1(i)=envi(i)) AND hp = STAR(SEQ(TEST(LAMBDA (env: Environment): env(x) < 10),
                                                                            ASSIGN((: (x,
                                                                                       LAMBDA
                                                                                       (env: Environment):
                                                                                       1 + env(x)) :)))) IMPLIES (0 <= envo(x) AND
                                                        envo(x) <= 10 AND
                                                         (FORALL (i: nat): i /= x IMPLIES envo(i) = envi(i)))")
                      (("1" (split -1)
                        (("1" (inst? -1)
                          (("1" (split -1)
                            (("1" (propax) nil nil)
                             ("2" (assert) nil nil)
                             ("3" (assert) nil nil)
                             ("4" (hide 2)
                              (("4"
                                (hide-all-but (-1 1))
                                (("4"
                                  (assert)
                                  (("4"
                                    (grind-reals)
                                    (("4"
                                      (replace -1 :dir rl)
                                      (("4"
                                        (hide -1)
                                        (("4"
                                          (lemma "floor_int")
                                          (("4" (inst -1 "0") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (propax) nil nil)
                             ("6" (hide 2)
                              (("6"
                                (expand "<")
                                (("6"
                                  (expand "cnst")
                                  (("6"
                                    (assert)
                                    (("6"
                                      (hide-all-but 1)
                                      (("6" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (propax) nil nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (assert)
                              (("2"
                                (split -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (inst -5 "i")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (skeep)
                                  (("2"
                                    (replace -9)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split -4)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (hide -2)
                                          (("2"
                                            (expand "semantic_rel" -1)
                                            (("2"
                                              (skeep -1)
                                              (("2"
                                                (case
                                                 "0 <= env_1!2(x)")
                                                (("1"
                                                  (expand
                                                   "semantic_rel"
                                                   -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "env_1!1(x) = env_1!2(x) + 1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (lemma
                                                             "assign1_prop")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "x"
                                                               "LAMBDA (env: Environment): 1 + env(x)"
                                                               "env_1!2"
                                                               "env_1!1")
                                                              (("2"
                                                                (beta)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "semantic_rel"
                                                   -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "semantic_rel" -1)
                                          (("3"
                                            (skeep -1)
                                            (("3"
                                              (expand
                                               "semantic_rel"
                                               -1)
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (case
                                                   "env_1!1(x) = env_1!2(x) + 1")
                                                  (("1"
                                                    (hide-all-but
                                                     (-1
                                                      -2
                                                      -3
                                                      -8
                                                      -9
                                                      1))
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (hide -3)
                                                        (("1"
                                                          (hide -3)
                                                          (("1"
                                                            (replace
                                                             -3
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (hide -3)
                                                              (("1"
                                                                (case
                                                                 "floor(envi_1(x)) <= 9")
                                                                (("1"
                                                                  (hide
                                                                   -3)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -1)
                                                                    (("2"
                                                                      (name
                                                                       "y"
                                                                       "envi_1(x)")
                                                                      (("2"
                                                                        (replace
                                                                         -1)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -4)
                                                    (("2"
                                                      (hide-all-but
                                                       (-3 1))
                                                      (("2"
                                                        (lemma
                                                         "assign1_prop")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "LAMBDA (env: Environment): 1 + env(x)"
                                                           "env_1!2"
                                                           "env_1!1")
                                                          (("2"
                                                            (beta)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (expand "semantic_rel" -1)
                                          (("4"
                                            (skeep -1)
                                            (("4"
                                              (expand
                                               "semantic_rel"
                                               -1)
                                              (("4"
                                                (flatten)
                                                (("4"
                                                  (case
                                                   "floor(env_1!2(x)) = env_1!2(x)")
                                                  (("1"
                                                    (case
                                                     "env_1!1(x) = env_1!2(x) + 1")
                                                    (("1"
                                                      (hide -5)
                                                      (("1"
                                                        (hide -6)
                                                        (("1"
                                                          (hide-all-but
                                                           (-1
                                                            -2
                                                            -8
                                                            1))
                                                          (("1"
                                                            (lemma
                                                             "floor_plus_int")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "1"
                                                               "env_1!2(x)")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 :dir
                                                                 rl)
                                                                (("1"
                                                                  (replace
                                                                   -3)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "assign1_prop")
                                                      (("2"
                                                        (hide 2 3)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "x"
                                                           "LAMBDA (env: Environment): 1 + env(x)"
                                                           "env_1!2"
                                                           "env_1!1")
                                                          (("2"
                                                            (beta)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-2 -8 1))
                                                    (("2"
                                                      (replace
                                                       -1
                                                       :dir
                                                       rl)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (hide-all-but (-1 -7 1))
                                          (("5"
                                            (expand "semantic_rel")
                                            (("5"
                                              (skeep)
                                              (("5"
                                                (skeep)
                                                (("5"
                                                  (expand
                                                   "semantic_rel"
                                                   -1)
                                                  (("5"
                                                    (flatten)
                                                    (("5"
                                                      (lemma
                                                       "assign1_prop")
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "x"
                                                         "LAMBDA (env: Environment): 1 + env(x)"
                                                         "env_1!2"
                                                         "env_1!1")
                                                        (("5"
                                                          (beta)
                                                          (("5"
                                                            (assert)
                                                            (("5"
                                                              (flatten)
                                                              (("5"
                                                                (case
                                                                 "env_1!1 = env_1!2 WITH [(x) := 1 + env_1!2(x)]")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -5
                                                                    -7
                                                                    1
                                                                    2))
                                                                  (("1"
                                                                    (inst
                                                                     -3
                                                                     "i")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -5
                                                                    1))
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (hide -2)
                  (("2" (lemma "assign1_prop")
                    (("2" (inst -1 "x" "cnst(0)" "envi" "env_1")
                      (("2" (beta)
                        (("2" (assert)
                          (("2" (hide -2)
                            (("2" (replaces -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "cnst")
                                  (("2"
                                    (skeep)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((semantic_rel_induction formula-decl nil hp_expr nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (floor_int formula-decl nil floor_ceil nil)
    (null_is_MapExprInj name-judgement "MapExprInj" hp_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (< const-decl "BoolExpr" bool_expr nil)
    (val const-decl "real" hp_def nil)
    (cnst const-decl "real" hp_def nil)
    (assign1_prop formula-decl nil hp_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt nil)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (Assigns type-eq-decl nil hp_def nil)
    (mapexpr_inj const-decl "bool" hp_def nil)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def nil)
    (RealExpr type-eq-decl nil hp_def nil)
    (TEST adt-constructor-decl "[BoolExpr -> (test?)]" HP_adt nil)
    (test? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (SEQ adt-constructor-decl "[[HP, HP] -> (seq?)]" HP_adt nil)
    (seq? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (STAR adt-constructor-decl "[HP -> (star?)]" HP_adt nil)
    (star? adt-recognizer-decl "[HP -> boolean]" HP_adt nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil) (HP type-decl nil HP_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil) nil
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (semantic_rel inductive-decl "bool" hp_expr nil))
   shostak)))

