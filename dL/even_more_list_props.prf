(even_more_list_props
 (suffix_append 0
  (suffix_append-1 nil 3888938439
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (replace -2 -3 rl)
          (("1" (hide -2)
            (("1"
              (case "FORALL(l1,l2,s:list[T]): length(s) <= length(l2) AND suffix?(s, append(l1, l2)) IMPLIES suffix?(s, l2)")
              (("1" (inst?) (("1" (assert) nil nil)) nil)
               ("2" (hide-all-but 1)
                (("2" (induct "l1")
                  (("1" (skeep)
                    (("1" (lemma "append_null_left[T]")
                      (("1" (inst?)
                        (("1" (replace -1) (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (lemma "suffix_of_cons[T]")
                      (("2"
                        (inst -1 "cons1_var" "append(cons2_var,l2!1)"
                         "s!1")
                        (("2" (assert)
                          (("2"
                            (case "cons(cons1_var, append(cons2_var, l2!1)) = append(cons(cons1_var, cons2_var), l2!1)")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "length_append[T]")
                                  (("1"
                                    (inst
                                     -1
                                     "cons(cons1_var, cons2_var)"
                                     "l2!1")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (expand "length" -3 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -4 "l2!1" "s!1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but 1)
                              (("2"
                                (decompose-equality)
                                (("1"
                                  (lemma "car_append[T]")
                                  (("1"
                                    (inst?)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "cdr_append[T]")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "length_append[T]")
                                  (("3"
                                    (inst?)
                                    (("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (replace -1 -2 rl)
          (("2" (hide -1)
            (("2"
              (case "FORALL(l1,l2,s:list[T]): length(s) > length(l2) AND suffix?(s, append(l1, l2)) IMPLIES EXIsTS (L: list[T]): append(L, l2) = s AND suffix?(L, l1)")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst?)
                      (("1" (assert) nil nil)
                       ("2" (lemma "length_append[T]")
                        (("2" (inst?)
                          (("2" (expand "length" -1 2)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide-all-but 1)
                (("2" (induct "l1")
                  (("1" (skeep)
                    (("1" (lemma "append_null_left[T]")
                      (("1" (inst?)
                        (("1" (replace -1)
                          (("1" (lemma "suffix_length[T]")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep*)
                    (("2" (lemma "suffix_of_cons[T]")
                      (("2"
                        (inst -1 "cons1_var" "append(cons2_var,l2!1)"
                         "s!1")
                        (("2"
                          (case "cons(cons1_var, append(cons2_var, l2!1)) = append(cons(cons1_var, cons2_var), l2!1)")
                          (("1" (replace -1)
                            (("1" (hide -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "suffix_length[T]")
                                  (("1"
                                    (inst
                                     -1
                                     "s!1"
                                     "append(cons(cons1_var, cons2_var), l2!1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "length(s!1) = length(append(cons(cons1_var, cons2_var), l2!1))")
                                        (("1"
                                          (lemma
                                           "suffix_same_length[T]")
                                          (("1"
                                            (inst
                                             -1
                                             "append(cons(cons1_var, cons2_var), l2!1)"
                                             "s!1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst
                                                 1
                                                 "cons(cons1_var, cons2_var)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "suffix_reflexive[T]")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "cons(cons1_var, cons2_var)")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (inst -3 "l2!1" "s!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst 2 "L")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -6 1 -1 -2)
                                                      (("2"
                                                        (hide -1 -3)
                                                        (("2"
                                                          (lemma
                                                           "suffix_supl[T]")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "L"
                                                             "cons2_var")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "L"
                                                                 "cons(cons1_var, cons2_var)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -2
                                                                     2)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "cons(cons1_var, L_1)")
                                                                        (("2"
                                                                          (decompose-equality)
                                                                          (("1"
                                                                            (lemma
                                                                             "car_append[T]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "cdr_append[T]")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "length_append[T]")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "cons[T](cons1_var, L_1)"
                                                                               "L")
                                                                              (("3"
                                                                                (expand
                                                                                 "length"
                                                                                 -1
                                                                                 2)
                                                                                (("3"
                                                                                  (expand
                                                                                   "length"
                                                                                   -1
                                                                                   1)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide-all-but 1)
                            (("2" (decompose-equality)
                              (("1"
                                (lemma "car_append[T]")
                                (("1"
                                  (inst?)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "cdr_append[T]")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "length_append[T]")
                                (("3"
                                  (inst?)
                                  (("3" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((suffix? def-decl "bool" more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (suffix_of_cons formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (car_append formula-decl nil more_list_props structures)
    (suffix_length formula-decl nil more_list_props structures)
    (suffix_supl formula-decl nil more_list_props structures)
    (suffix_same_length formula-decl nil more_list_props structures)
    (suffix_reflexive formula-decl nil more_list_props structures))
   shostak))
 (caret_suffix_TCC1 0
  (caret_suffix_TCC1-1 nil 3896791246 ("" (subtype-tcc) nil nil) nil
   nil
   (caret_suffix subtype
    "(number_fields.-)(list_props[even_more_list_props.T].length(even_more_list_props.l), 1)"
    "nat")))
 (caret_suffix 0
  (caret_suffix-1 nil 3896791249
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (inst 1 "length(l)-length(s)")
          (("1" (lemma "list_extensionality[T]")
            (("1" (inst?)
              (("1" (assert)
                (("1" (lemma "caret_length[T]")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (split)
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (lemma "caret_nth[T]")
                              (("1"
                                (inst
                                 -1
                                 "l"
                                 "n+length(l) - length(s)"
                                 "(length(l) - length(s), length(l) - 1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "suffix_nth[T]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (inst?)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil)
                                 ("3" (grind) nil nil)
                                 ("4" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil) ("3" (grind) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (grind) nil nil) ("3" (grind) nil nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (lemma "suffix_supl[T]")
            (("2" (inst?)
              (("2" (assert)
                (("2" (replace -1)
                  (("2" (case "i=0")
                    (("1" (replace -1)
                      (("1" (inst 1 "null")
                        (("1" (lemma "append_null_left[T]")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (lemma "list_extensionality[T]")
                                (("1"
                                  (inst
                                   -1
                                   "l ^ (0, length(l) - 1)"
                                   "l")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "caret_length[T]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "caret_nth[T]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "l"
                                                 "n"
                                                 "(0, length(l) - 1)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 2 "l^(0,i-1)")
                      (("1" (lemma "list_extensionality[T]")
                        (("1"
                          (inst -1
                           "append(l ^ (0, i - 1), l ^ (i, length(l) - 1))"
                           "l")
                          (("1" (assert)
                            (("1" (lemma "length_append[T]")
                              (("1"
                                (inst?)
                                (("1"
                                  (lemma "caret_length[T]")
                                  (("1"
                                    (inst -1 "l" "_")
                                    (("1"
                                      (inst-cp -1 "(0, i - 1)")
                                      (("1"
                                        (inst -1 "(i, length(l) - 1)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (lemma "nth_append[T]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (replace -2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "caret_nth[T]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "l"
                                                               "_"
                                                               "_")
                                                              (("1"
                                                                (split)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -3
                                                                       "n"
                                                                       "(0, i - 1)")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "n"
                                                                       "(i, length(l) - 1)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil)
                       ("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((caret_length formula-decl nil more_list_props structures)
    (suffix? def-decl "bool" more_list_props structures)
    (caret_nth formula-decl nil more_list_props structures)
    (suffix_nth formula-decl nil more_list_props structures)
    (list_extensionality formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (suffix_supl formula-decl nil more_list_props structures))
   shostak))
 (rdc_cdr_TCC1 0
  (rdc_cdr_TCC1-1 nil 3903697606 ("" (subtype-tcc) nil nil) nil nil
   (rdc_cdr subtype
    "list_adt[even_more_list_props.T].cdr(even_more_list_props.l)"
    "{l: list_adt[even_more_list_props.T].list | (booleans.NOT)(list_adt[even_more_list_props.T].null?(l))}")))
 (rdc_cdr_TCC2 0
  (rdc_cdr_TCC2-1 nil 3903697606 ("" (subtype-tcc) nil nil) nil nil
   (rdc_cdr subtype "even_more_list_props.l"
    "{l: list_adt[even_more_list_props.T].list | (booleans.NOT)(list_adt[even_more_list_props.T].null?(l))}")))
 (rdc_cdr_TCC3 0
  (rdc_cdr_TCC3-1 nil 3903697606 ("" (subtype-tcc) nil nil) nil nil
   (rdc_cdr subtype
    "more_list_props[even_more_list_props.T].rdc(even_more_list_props.l)"
    "(list_adt[even_more_list_props.T].cons?)")))
 (rdc_cdr 0
  (rdc_cdr-1 nil 3903702977
   ("" (induct "l")
    (("1" (assert) nil nil)
     ("2" (skeep)
      (("2" (case "cons2_var =null")
        (("1" (assert) nil nil)
         ("2" (assert)
          (("2" (case "cdr(cons2_var)=null")
            (("1" (assert)
              (("1" (lemma "length_rdc[T]")
                (("1" (inst-cp -1 "cons2_var")
                  (("1" (assert)
                    (("1" (expand "length" -2 2)
                      (("1" (expand "length" -2)
                        (("1" (assert)
                          (("1" (lift-if) (("1" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lemma "cons_append[T]")
                (("2" (inst?)
                  (("2" (replace -1)
                    (("2" (lemma "rdc_append[T]")
                      (("2" (inst?)
                        (("2" (replace -1)
                          (("2" (assert)
                            (("2" (lemma "cdr_append[T]")
                              (("2"
                                (inst?)
                                (("2"
                                  (replace -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (use "append_null_left[T]")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (lemma "length_rdc[T]")
          (("3" (inst?)
            (("3" (expand "length")
              (("3" (assert)
                (("3" (expand "length") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil)
     ("5" (skeep) (("5" (assert) nil nil)) nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (rdc_append formula-decl nil more_list_props structures)
    (cdr_append formula-decl nil more_list_props structures)
    (append_null_left formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons_append formula-decl nil more_list_props structures)
    (length def-decl "nat" list_props nil)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_rdc formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (T formal-type-decl nil even_more_list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rdc const-decl "list[T]" more_list_props structures)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak)))

