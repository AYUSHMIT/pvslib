%%
% @theory: trace_bounded_star_semantics
% @author: LMW
% @date: Thu, 13 Apr 2023 16:06:22 GMT
%%
trace_bounded_star_semantics: THEORY
  BEGIN 
    

  IMPORTING ltl_expr
  IMPORTING bounded_star_semantics
  IMPORTING orders@orders_nat
  IMPORTING orders@lex2_generic[nat,HP]
  %,lt_nat,HP_adt.<<]


trace_semantic_rel_bounded_star(i: nat)(hp: HP)(trace:Trace): RECURSIVE bool
  = CASES hp OF
      SEQ(stm1,stm2) : (EXISTS (tr1,tr2:Trace)
      		       : trace_semantic_rel_bounded_star(i)(stm1)(tr1) AND
			 trace_semantic_rel_bounded_star(i)(stm2)(tr2) AND finite_trace?(tr1) AND 
       final_env(tr1)=init_env(tr2) AND IF last(tr1)=car(tr2) THEN trace=append(tr1,cdr(tr2)) ELSE trace=append(tr1,tr2) ENDIF) OR (NOT finite_trace?(trace) AND trace_semantic_rel_bounded_star(i)(stm1)(trace)),
      UNION(stm1,stm2) : trace_semantic_rel_bounded_star(i)(stm1)(trace)
      		       	 OR trace_semantic_rel_bounded_star(i)(stm2)(trace),
      STAR(stm)    : length(trace)=1 and state?(car(trace))
      		     OR ( i>0 AND
		     	  ((EXISTS (tr1,tr2:Trace)
		          :trace_semantic_rel(stm)(tr1) AND
                           trace_semantic_rel_bounded_star(i-1)(STAR(stm))(tr2) AND 
                           finite_trace?(tr1) AND final_env(tr1)=init_env(tr2) AND 
                           IF last(tr1)=car(tr2) THEN trace=append(tr1,cdr(tr2)) ELSE trace=append(tr1,tr2) ENDIF)
                           OR (NOT finite_trace?(trace) AND trace_semantic_rel_bounded_star(i-1)(stm)(trace))))
      ELSE trace_semantic_rel(hp)(trace)
    ENDCASES
  MEASURE (i,hp) BY lt_lex2(lt_nat,HP_adt.<<)

  % @QED trace_semantic_rel_bounded_star_inc proved by lmwhite3 on Tue, 11 Jul 2023 16:25:19 GMT
  trace_semantic_rel_bounded_star_inc: LEMMA
  FORALL(hp:HP, trace:Trace, i: nat)
  : trace_semantic_rel_bounded_star(i)(hp)(trace)
     IMPLIES FORALL(j: upfrom(i)): trace_semantic_rel_bounded_star(j)(hp)(trace)

  % @QED trace_semantic_rel_implies_bounded proved by lmwhite3 on Tue, 11 Jul 2023 18:19:33 GMT
  trace_semantic_rel_implies_bounded : LEMMA
  FORALL(hp:HP, trace:Trace)
    : trace_semantic_rel(hp)(trace)
      IMPLIES EXISTS (i: nat): trace_semantic_rel_bounded_star(i)(hp)(trace)

  % @QED bounded_implies_trace_semantic_rel proved by lmwhite3 on Tue, 11 Jul 2023 18:36:49 GMT
  bounded_implies_trace_semantic_rel : LEMMA
  FORALL(hp:HP, trace:Trace,i: nat)
    : trace_semantic_rel_bounded_star(i)(hp)(trace)
      IMPLIES
      trace_semantic_rel(hp)(trace)

  %----------------------------------------------------
  %% Lemmas that relate the bounded iterations BSTAR
  %% and the iteration HP STAR
  %----------------------------------------------------

  % @QED trace_semantic_rel_bstar_reflexive proved by lmwhite3 on Tue, 11 Jul 2023 19:26:35 GMT
  trace_semantic_rel_bstar_reflexive
  : LEMMA
    FORALL(hp:HP, trace:Trace|length(trace)=1 AND state?(car(trace)), i: nat)
    : trace_semantic_rel(BSTAR(hp,i))(trace)

  % @QED trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar proved by lmwhite3 on Wed, 12 Jul 2023 15:25:24 GMT
  trace_semantic_rel_bounded_bstar_trace_semantic_rel_bstar
  : LEMMA
    FORALL(hp:HP, trace:Trace, i: nat)
    : trace_semantic_rel_bounded_star(i)(STAR(hp))(trace)
      IMPLIES trace_semantic_rel(BSTAR(hp,i))(trace)

  % @QED trace_semantic_rel_star_bounded_star proved by lmwhite3 on Wed, 12 Jul 2023 15:29:47 GMT
  trace_semantic_rel_star_bounded_star
  : LEMMA
    FORALL(hp:HP, trace:Trace)
    : trace_semantic_rel(STAR(hp))(trace)
      IMPLIES EXISTS (i: nat): trace_semantic_rel(BSTAR(hp,i))(trace)

  % @QED trace_semantic_rel_star_bounded_star_con proved by lmwhite3 on Wed, 12 Jul 2023 15:33:17 GMT
  trace_semantic_rel_star_bounded_star_con
  : LEMMA
    FORALL(hp:HP, trace:Trace,i:nat)
    :  trace_semantic_rel(BSTAR(hp,i))(trace)
       IMPLIES trace_semantic_rel(STAR(hp))(trace)


  allruns_st_star: LEMMA
  FORALL(hp:HP,P:BoolExpr,env:Environment):
  ALLRUNS_st(STAR(hp),P)(env)
  IFF
  FORALL(i:nat): ALLRUNS_st(BSTAR(hp,i),P)(env)

  someruns_st_star: LEMMA
  FORALL(hp:HP,P:BoolExpr,env:Environment):
  SOMERUNS_st(STAR(hp),P)(env)
  IFF
  EXISTS(i:nat): SOMERUNS_st(BSTAR(hp,i),P)(env)

  allruns_tr_star: LEMMA
  FORALL(hp:HP,P:TraceBoolExpr,env:Environment):
  ALLRUNS_tr(STAR(hp),P)(env)
  IFF
  FORALL(i:nat): ALLRUNS_tr(BSTAR(hp,i),P)(env)

  someruns_tr_star: LEMMA
  FORALL(hp:HP,P:TraceBoolExpr,env:Environment):
  SOMERUNS_tr(STAR(hp),P)(env)
  IFF
  EXISTS(i:nat): SOMERUNS_tr(BSTAR(hp,i),P)(env)

      
  % @QED trace_semantic_rel_star_seq proved by lmwhite3 on Thu, 13 Jul 2023 13:20:58 GMT
  trace_semantic_rel_star_seq: LEMMA
  FORALL(stm:HP, trace:Trace):
  (length(trace)=1 AND state?(car(trace))) OR
    (trace_semantic_rel(SEQ(stm,STAR(stm)))(trace) IFF 
    trace_semantic_rel(STAR(stm))(trace))


%% Move these to trace_semantics

  % @QED finite_trace_rdc proved by lmwhite3 on Fri, 28 Jul 2023 19:04:35 GMT
  finite_trace_rdc: LEMMA
  FORALL(trace:Trace): NOT null?(rdc(trace)) IMPLIES finite_trace?(rdc(trace))

  % @QED wf_cdr proved by lmwhite3 on Fri, 28 Jul 2023 19:12:24 GMT
  wf_cdr: LEMMA
  FORALL(trace1:(finite_trace?),trace2:Trace): wf_trace?(append(trace1,cdr(trace2)))

%% These stay here

  % @QED trace_semantic_rel_bounded_star_seq_switch proved by lmwhite3 on Fri, 28 Jul 2023 19:26:16 GMT
  trace_semantic_rel_bounded_star_seq_switch: LEMMA
  FORALL(stm:HP, i: nat, trace:Trace):
    trace_semantic_rel(SEQ(stm,BSTAR(stm,i)))(trace) IMPLIES
    trace_semantic_rel(SEQ(BSTAR(stm,i),stm))(trace)

  % @QED trace_semantic_rel_bounded_star_seq_switch_con proved by lmwhite3 on Fri, 28 Jul 2023 19:34:49 GMT
  trace_semantic_rel_bounded_star_seq_switch_con: LEMMA
  FORALL(stm:HP, i: nat, trace:Trace):
    trace_semantic_rel(SEQ(BSTAR(stm,i),stm))(trace) IMPLIES
    trace_semantic_rel(SEQ(stm,BSTAR(stm,i)))(trace) 

  % @QED trace_semantic_rel_bounded_star_seq_switch_eq proved by lmwhite3 on Fri, 28 Jul 2023 19:36:14 GMT
  trace_semantic_rel_bounded_star_seq_switch_eq: LEMMA
  FORALL(stm:HP, i: nat):
    trace_semantic_rel(SEQ(stm,BSTAR(stm,i))) = 
    trace_semantic_rel(SEQ(BSTAR(stm,i),stm))

  % @QED trace_semantic_rel_star_seq_switch_eq proved by lmwhite3 on Fri, 28 Jul 2023 19:51:59 GMT
  trace_semantic_rel_star_seq_switch_eq: LEMMA
  FORALL(stm:HP):
    trace_semantic_rel(SEQ(stm,STAR(stm))) =
    trace_semantic_rel(SEQ(STAR(stm),stm))


  trace_semantic_rel_bounded_star_iter: LEMMA
  FORALL(hp:HP, trace1:(finite_trace?),trace2:Trace, i: nat):
  (trace_semantic_rel(BSTAR(hp,i))(trace1) AND trace_semantic_rel(hp)(trace2) AND final_env(trace1)=init_env(trace2))  
    IMPLIES LET trace = IF state?(last(trace1))
          THEN append(rdc(trace1),trace2)
        ELSIF state?(car(trace2))
          THEN append(trace1,cdr(trace2))
         ELSE append(trace1,trace2)
         ENDIF IN trace_semantic_rel(BSTAR(hp,i+1))(trace)

  % @QED trace_semantic_rel_star_iter proved by lmwhite3 on Tue, 01 Aug 2023 17:48:44 GMT
  trace_semantic_rel_star_iter: LEMMA
  FORALL(hp:HP, trace1:(finite_trace?),trace2:Trace):
  (trace_semantic_rel(STAR(hp))(trace1) AND trace_semantic_rel(hp)(trace2) AND final_env(trace1)=init_env(trace2))  
    IMPLIES LET trace = IF state?(last(trace1))
          THEN append(rdc(trace1),trace2)
        ELSIF state?(car(trace2))
          THEN append(trace1,cdr(trace2))
         ELSE append(trace1,trace2)
         ENDIF IN trace_semantic_rel(STAR(hp))(trace)

  % @QED trace_semantic_rel_bounded_star_iter_con proved by lmwhite3 on Tue, 01 Aug 2023 18:30:16 GMT
  trace_semantic_rel_bounded_star_iter_con: LEMMA
  FORALL(hp:HP, trace:Trace, i:posnat):
  trace_semantic_rel(BSTAR(hp,i))(trace) IMPLIES 
  trace_semantic_rel(BSTAR(hp,i-1))(trace)
  OR (EXISTS(trace1:(finite_trace?),trace2:Trace):
  (IF state?(last(trace1))
          THEN trace = append(rdc(trace1),trace2)
        ELSIF state?(car(trace2))
          THEN trace = append(trace1,cdr(trace2))
         ELSE trace = append(trace1,trace2)
         ENDIF AND trace_semantic_rel(BSTAR(hp,i-1))(trace1) AND trace_semantic_rel(hp)(trace2) AND final_env(trace1)=init_env(trace2)))

  % semantic_rel_star_iter: LEMMA
  % FORALL(hp:HP, env,envi,envo: Environment):
  % (semantic_rel(STAR(hp))(envi)(env) AND semantic_rel(hp)(env)(envo))  
  %   IMPLIES semantic_rel(STAR(hp))(envi)(envo)





  END trace_bounded_star_semantics
