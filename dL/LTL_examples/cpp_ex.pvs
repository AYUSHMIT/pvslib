%%
% @theory: cpp_ex
% @author: lmwhite3
% @date: Tue, 15 Aug 2023 19:49:11 GMT
%%
cpp_ex: THEORY
  BEGIN 
    

%-----------------------------------
%% Importing Differential Dynamic Logic
%-----------------------------------
  IMPORTING dL@top,
            dL@temporal_logic,
            analysis@derivative_props

%-----------------------------------
%% Define the variables
%-----------------------------------
  x: nat = 0
  y: nat = 1
  X: RealExpr = val(x)
  Y: RealExpr = val(y)

  x0: real
  y0: negreal

% OPerational zone, safe zone S, and initial zone X0
  OP:BoolExpr = DLTRUE
  S:BoolExpr = (Y>=0)
  X0:BoolExpr  = (X=x0 AND Y=y0)

  %%%%% Safety dynamics defined by:l
% ODE for safety
  ode:{ff:(ODEs_s?(hp(0))) | length(ff)=2 AND nth(ff,1)`1 = 1 AND EXISTS(eps:posreal): FORALL(env:Environment): (nth(ff,1)`2)(env) > eps}

  % @QED Always_eventually_safe proved by lmwhite3 on Thu, 17 Aug 2023 20:06:17 GMT
  Always_eventually_safe: LEMMA
  X0 |- ALLRUNS_tr(SEQ(DIFF(ode),TEST(S)),DLEVENTUALLY(DLGLOBALLY(State_Trace(S))))


whilehp:HP = SEQ(SEQ(ASSIGN((:(x,cnst(0)):)),STAR(SEQ(TEST(X<=10),ASSIGN((:(x,X+1):))))),TEST(X>10))

While_loop_ex: LEMMA
ALLRUNS_tr(whilehp,DLEVENTUALLY(State_Trace(X=10)))






  END cpp_ex
