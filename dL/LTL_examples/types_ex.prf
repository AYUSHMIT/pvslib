(types_ex
 (eventually_not_assign 0
  (eventually_not_assign-1 nil 3894027014
   ("" (use "norm_DLEVENTUALLY")
    (("" (replace -1)
      (("" (hide -1)
        (("" (use "dltl_SEQcup_dual")
          (("" (replace -1 1 rl)
            (("" (hide -1)
              (("" (case "ODEs_s?(hp(0))((: (x,cnst(6)) :))")
                (("1" (use "dltl_DIFFcup_dual")
                  (("1" (replace -1 1 rl)
                    (("1" (hide -1)
                      (("1" (dl-flatten)
                        (("1" (lemma "dlSequent_equiv")
                          (("1" (inst?)
                            (("1" (replace -1)
                              (("1"
                                (hide -1)
                                (("1"
                                  (expand "dlSequent")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "0")
                                      (("1"
                                        (inst -1 "0")
                                        (("1"
                                          (expand "nth")
                                          (("1"
                                            (expand "DLOR")
                                            (("1"
                                              (expand "=")
                                              (("1"
                                                (expand "SOMERUNS_st")
                                                (("1"
                                                  (expand "DLNOT")
                                                  (("1"
                                                    (lemma
                                                     "trace_semantics_complete")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "DIFF((: (x, cnst(6)) :), DLBOOL(TRUE))"
                                                       "env"
                                                       "env WITH [x:=11]")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (split)
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "trace")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "val")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -2
                                                                           -5
                                                                           rl)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "cnst")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "cnst_lins_sol_u")
                                                              (("2"
                                                                (expand
                                                                 "solves_u?")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "DLTRUE"
                                                                   "(: (x, cnst(6)) :)")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "env")
                                                                    (("1"
                                                                      (expand
                                                                       "semantic_rel")
                                                                      (("1"
                                                                        (expand
                                                                         "DLBOOL")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "hp(0)")
                                                                              (("1"
                                                                                (expand
                                                                                 "semantic_rel_diff")
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "1")
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "LAMBDA (i: below(length((: (x, cnst(6)) :)))):
                         LAMBDA (r: real):Y_sol_ex((: (x, cnst(6)) :))(i)(r)(env)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "env_at_t?")
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "i_1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "not_in_map")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "k")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "Y_sol_ex")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lift-if)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -2)
                                                                                                            (("2"
                                                                                                              (split)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "+")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "val")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "cnst")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "*")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "is_cnst?")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "cnst")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "cnst_lins?")
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "6")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "hp")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "DLBOOL")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide-all-but
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "cnst_lins?")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (expand
                                                                             "nth")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "6")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "ODEs_s?")
                    (("2" (expand "ODEs_s?")
                      (("2" (skeep)
                        (("2" (lemma "diff_sol_eq_dd")
                          (("2" (inst?)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (expand "cont_ODEs?")
                                    (("2"
                                      (expand "cont_ODEs?")
                                      (("2"
                                        (expand "cont_ODEs?")
                                        (("2"
                                          (skeep*)
                                          (("2"
                                            (typepred "k")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nth")
                                                (("2"
                                                  (expand "cnst")
                                                  (("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (expand "Lip_ODEs?")
                                    (("3"
                                      (expand "Lip_ODEs?")
                                      (("3"
                                        (expand "Lip_ODEs?")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (skeep*)
                                            (("3"
                                              (typepred "k")
                                              (("3"
                                                (expand "nth")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (expand "cnst")
                                                    (("3"
                                                      (expand "abs")
                                                      (("3"
                                                        (expand
                                                         "max_diff")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (inst
                                                             1
                                                             "1")
                                                            (("3"
                                                              (skeep*)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) (("2" (grind) nil nil)) nil)
                             ("3" (hide 2) (("3" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dltl_SEQcup_dual formula-decl nil temporal_logic dL)
    (FALSE const-decl "bool" booleans nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL) (HP type-decl nil HP_adt dL)
    (diff_sol_eq_dd formula-decl nil ODEs_equiv dL)
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (max_diff def-decl "{x: nnreal |
   (FORALL (i: below(k), r: real): abs(y1(i)(r) - y2(i)(r)) <= x) AND
    EXISTS (i: below(k)): x = abs(y1(i)(0) - y2(i)(0))}" ODEs_equiv dL)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dltl_DIFFcup_dual formula-decl nil temporal_logic dL)
    (normDLEVENTUALLY const-decl "bool" ltl_expr dL)
    (SOMERUNS_tr const-decl "bool" ltl_expr dL)
    (TraceBoolExpr type-eq-decl nil ltl_expr dL)
    (Trace type-eq-decl nil trace_semantics dL)
    (wf_trace? const-decl "bool" trace_semantics dL)
    (TraceState type-decl nil TraceState_adt dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (dlSequent_equiv formula-decl nil dynamic_logic dL)
    (dlSequent const-decl "bool" dynamic_logic dL)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (finite_trace? const-decl "bool" trace_semantics dL)
    (FiniteTrace type-eq-decl nil trace_semantics dL)
    (cnst_lins_sol_u formula-decl nil dl_solution dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (semantic_rel inductive-decl "bool" hp_expr dL)
    (env_at_t? const-decl "bool" hp_expr dL)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (is_cnst? const-decl "bool" dl_solution dL)
    (not_in_map const-decl "bool" hp_def dL)
    (solution_odes_u? const-decl "bool" hp_expr dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (semantic_rel_diff const-decl "bool" hp_expr dL)
    (solves_u? const-decl "bool" dl_solution dL)
    (trace_semantics_complete formula-decl nil trace_semantics dL)
    (dl_notR formula-decl nil dynamic_logic dL)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (dl_orR formula-decl nil dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (SOMERUNS_st const-decl "bool" ltl_expr dL)
    (DLOR const-decl "bool" bool_expr dL)
    (dd? const-decl "bool" hp_expr dL)
    (hp const-decl "bool" interval_def ODEs)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (DLNOT const-decl "bool" bool_expr dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (val const-decl "real" hp_def dL) (x const-decl "nat" types_ex nil)
    (cnst const-decl "real" hp_def dL)
    (norm_DLEVENTUALLY formula-decl nil temporal_logic dL))
   shostak))
 (end_state_5 0
  (end_state_5-1 nil 3894112733
   ("" (dl-assert)
    (("" (dl-grind)
      (("" (dl-assert) (("" (dl-solve) (("" (dl-assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (solution_domain_ax_cnst_imp_zip_no_hyp formula-decl nil
     dl_solution dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (UPTO const-decl "BoolExpr" bool_expr dL)
    (QHP type-eq-decl nil bool_expr dL)
    (DLFORALL const-decl "bool" bool_expr dL)
    (QBoolExpr type-eq-decl nil hp_def dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zs const-decl "MapExprInj" dl_solution dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution dL)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution dL)
    (is_val_not_in_map? const-decl "bool" dl_solution dL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_cnst? const-decl "bool" dl_solution dL)
    (in_map_ex def-decl "bool" dl_solution dL)
    (env_c const-decl "real" dl_solution dL)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (env_nat_shift const-decl "real" dl_solution dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "BoolExpr" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (dl_forallR formula-decl nil dynamic_logic dL)
    (dl_andL formula-decl nil dynamic_logic dL)
    (dl_impliesR formula-decl nil dynamic_logic dL)
    (dl_assignb_restricted formula-decl nil dynamic_logic dL)
    (dl_sub_bool_restricted formula-decl nil substitution dL)
    (iterate_left const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (append def-decl "list[T]" list_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (dl_moveL formula-decl nil dynamic_logic dL)
    (dl_hideL formula-decl nil dynamic_logic dL)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (same_var const-decl "bool" hp_def dL)
    (SUB_MapVar def-decl
     "{re: RealExpr | FORALL (env: Environment): re(env) = SUB_Re(l)(val(i))(env)}"
     substitution dL)
    (dl_sub_eq formula-decl nil substitution dL)
    (Substitution type-eq-decl nil substitution dL)
    (dl_subre_const formula-decl nil substitution dL)
    (dl_subre_val formula-decl nil substitution dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (val const-decl "real" hp_def dL)
    (= const-decl "BoolExpr" bool_expr dL)
    (BoolExpr type-eq-decl nil hp_def dL)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (x const-decl "nat" types_ex nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (dl_assignb formula-decl nil dynamic_logic dL))
   shostak))
 (integer_pred_re?_TCC1 0
  (integer_pred_re?_TCC1-1 nil 3902933080 ("" (subtype-tcc) nil nil)
   nil nil
   (integer_pred_re? subtype "types_ex.re(types_ex.env)" "rational")))
 (eventually_not_int 0
  (eventually_not_int-1 nil 3902993903
   ("" (rewrite "norm_DLEVENTUALLY")
    (("" (use "dltl_SEQcup_dual")
      (("" (use "dl_cut")
        (("" (assert)
          (("" (hide-all-but 1)
            (("" (rewrite "dltl_ASSIGNcup_dual" :dir rl)
              (("" (dl-hide 2 1)
                (("" (dl-flatten)
                  (("" (dl-hide 2 1)
                    (("" (dl-flatten)
                      (("" (rewrite "SOMERUNS_eq")
                        (("" (rewrite "SOMERUNS_eq")
                          (("" (rewrite "dl_assignd")
                            (("" (dl-assert)
                              ((""
                                (rewrite "dlSequent_equiv")
                                ((""
                                  (expand "dlSequent")
                                  ((""
                                    (skeep)
                                    ((""
                                      (hide -1)
                                      ((""
                                        (inst 1 "0")
                                        ((""
                                          (expand "nth")
                                          ((""
                                            (expand "SOMERUNS")
                                            ((""
                                              (expand "DLNOT")
                                              ((""
                                                (expand "DLOR")
                                                ((""
                                                  (expand "SUB")
                                                  ((""
                                                    (assert)
                                                    ((""
                                                      (expand
                                                       "assign_sub")
                                                      ((""
                                                        (expand
                                                         "assign_env")
                                                        ((""
                                                          (expand
                                                           "assign_env")
                                                          ((""
                                                            (assert)
                                                            ((""
                                                              (expand
                                                               "integer_pred_re?"
                                                               1
                                                               2)
                                                              ((""
                                                                (assert)
                                                                ((""
                                                                  (expand
                                                                   "val"
                                                                   1
                                                                   2)
                                                                  ((""
                                                                    (assert)
                                                                    ((""
                                                                      (case
                                                                       "NOT integer_pred_re?(val(x))(env)")
                                                                      (("1"
                                                                        (inst
                                                                         2
                                                                         "env")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "semantic_rel")
                                                                            (("1"
                                                                              (expand
                                                                               "DLBOOL")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "integer_pred_re?"
                                                                         -1)
                                                                        (("2"
                                                                          (expand
                                                                           "floor_re")
                                                                          (("2"
                                                                            (expand
                                                                             "integer_pred_re?")
                                                                            (("2"
                                                                              (expand
                                                                               "val")
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "env WITH [x := env(x)+6*(0.1)]")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "semantic_rel")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "semantic_rel_diff")
                                                                                        (("1"
                                                                                          (expand
                                                                                           "DLBOOL")
                                                                                          (("1"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (grind)
                                                                                      (("2"
                                                                                        (grind)
                                                                                        (("2"
                                                                                          (name
                                                                                           "A"
                                                                                           "env(0)")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("2"
                                                                                                (grind)
                                                                                                (("2"
                                                                                                  (postpone)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (end_state_int 0
  (end_state_int-1 nil 3902994659
   ("" (dl-assert)
    (("" (dl-grind)
      (("" (dl-assert)
        (("" (dl-solve)
          (("1" (dl-assert)
            (("1" (dl-grind) (("1" (grind) nil nil)) nil)) nil)
           ("2" (dl-grind)
            (("2" (typepred "j")
              (("2" (expand "length")
                (("2" (expand "length") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (solution_domain_ax_cnst_imp_zip_no_hyp formula-decl nil
     dl_solution dL)
    (cnst_lins? const-decl "bool" dl_solution dL)
    (MapExprInj type-eq-decl nil hp_def dL)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (nth def-decl "T" list_props nil)
    (UPTO const-decl "BoolExpr" bool_expr dL)
    (QHP type-eq-decl nil bool_expr dL)
    (DLFORALL const-decl "bool" bool_expr dL)
    (QBoolExpr type-eq-decl nil hp_def dL)
    (\|- const-decl "bool" dynamic_logic dL)
    (Formulas type-eq-decl nil bool_expr dL)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (zs const-decl "MapExprInj" dl_solution dL)
    (Y_sol_ex const-decl "[Environment -> real]" dl_solution dL)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_zip_sol def-decl "{a: MapExprInj |
   length(a) = length(ode) AND
    FORALL (i: below(length(a))): nth(a, i) = (nth(ode, i)`1, y(i)(t))}"
     dl_solution dL)
    (below type-eq-decl nil nat_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (get_val_cnst_id_ex const-decl "{vc: [below(length(l)), real] |
   vc`1 /= i AND
    nth(l, i)`2 = cnst(vc`2) + val(nth(l, vc`1)`1) AND
     (FORALL (c: real, m: below(length(l))):
        nth(l, i)`2 = cnst(c) + val(nth(l, m)`1) IMPLIES
         (m = vc`1 AND vc`2 = c))}" dl_solution dL)
    (is_val_not_in_map? const-decl "bool" dl_solution dL)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (is_cnst? const-decl "bool" dl_solution dL)
    (in_map_ex def-decl "bool" dl_solution dL)
    (env_c const-decl "real" dl_solution dL)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (env_nat_shift const-decl "real" dl_solution dL)
    (OR const-decl "[bool, bool -> bool]" booleans nil) nil
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (subrange type-eq-decl nil integers nil)
    (>= const-decl "BoolExpr" bool_expr dL)
    (DLAND const-decl "bool" bool_expr dL)
    (DLIMPLIES const-decl "bool" bool_expr dL)
    (dl_forallR formula-decl nil dynamic_logic dL) nil nil nil nil
    (dl_andL formula-decl nil dynamic_logic dL) nil nil
    (dl_impliesR formula-decl nil dynamic_logic dL) nil
    (dl_assignb_restricted formula-decl nil dynamic_logic dL)
    (dl_sub_bool_restricted formula-decl nil substitution dL)
    (real_times_real_is_real application-judgement "real" reals nil)
    (assign_sub const-decl "Environment" substitution dL)
    (assign_env def-decl "Environment" substitution dL)
    (iterate_left const-decl "T" for_iterate structures)
    (for const-decl "T" for_iterate structures)
    (for_it def-decl
     "{t: T | t = for_def(i, upto, a, ext2int(upfrom, upto, f))}"
     for_iterate structures)
    nil (dl_hideL formula-decl nil dynamic_logic dL) nil
    (dl_moveL formula-decl nil dynamic_logic dL)
    (move_to_head const-decl "Formulas" dynamic_logic dL)
    (is_dlfnum const-decl "bool" dynamic_logic dL)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (move_to_head_rec def-decl "Formulas" dynamic_logic dL)
    (append def-decl "list[T]" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (ALLRUNS const-decl "bool" bool_expr dL)
    (Substitution type-eq-decl nil substitution dL)
    (SUB const-decl "bool" substitution dL)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (integer_pred_re? const-decl "bool" types_ex nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (val const-decl "real" hp_def dL)
    (floor_re const-decl "real" types_ex nil)
    (ASSIGN adt-constructor-decl "[Assigns -> (assign?)]" HP_adt dL)
    (assign? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (Assigns type-eq-decl nil hp_def dL)
    (TRUE const-decl "bool" booleans nil)
    (DLBOOL const-decl "bool" bool_expr dL)
    (cnst const-decl "real" hp_def dL)
    (x const-decl "nat" types_ex nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (DIFF adt-constructor-decl "[[ODEs, BoolExpr] -> (diff?)]" HP_adt
     dL)
    (diff? adt-recognizer-decl "[HP -> boolean]" HP_adt dL)
    (ODEs type-eq-decl nil hp_def dL)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (list type-decl nil list_adt nil)
    (MapExpr type-eq-decl nil hp_def dL)
    (RealExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (HP type-decl nil HP_adt dL)
    (dl_composeb formula-decl nil dynamic_logic dL)
    (dl_assignb formula-decl nil dynamic_logic dL))
   shostak)))

