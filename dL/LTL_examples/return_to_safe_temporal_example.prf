(return_to_safe_temporal_example
 (Csr_TCC1 0
  (Csr_TCC1-1 nil 3903862119 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (Csr subtype "2"
    "{i: integers.int | booleans.OR(return_to_safe_temporal_example.r /= 0, reals.>=(i, 0))}")))
 (S_TCC1 0
  (S_TCC1-1 nil 3903862119
   ("" (inst 1 "Csr") (("" (skeep) nil nil)) nil)
   ((Csr const-decl "BoolExpr" return_to_safe_temporal_example nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil hp_def dL)
    (Environment type-eq-decl nil hp_def dL)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (S existence ""
    "{SS: hp_def.BoolExpr | FORALL (env: hp_def.Environment): booleans.IMPLIES(return_to_safe_temporal_example.Csr(env), SS(env))}")))
 (rts_TCC1 0
  (rts_TCC1-1 nil 3903862119 ("" (grind) nil nil)
   ((x const-decl "nat" return_to_safe_temporal_example nil)
    (sx const-decl "real" return_to_safe_temporal_example nil)
    (y const-decl "nat" return_to_safe_temporal_example nil)
    (sy const-decl "real" return_to_safe_temporal_example nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil
   (rts subtype
    "(: (return_to_safe_temporal_example.x, real_fun_ops[Environment].*((number_fields.-)(return_to_safe_temporal_example.k), ((real_fun_ops[Environment].-)(hp_def.val(return_to_safe_temporal_example.x), hp_def.cnst(return_to_safe_temporal_example.sx))))), (return_to_safe_temporal_example.y, real_fun_ops[Environment].*((number_fields.-)(return_to_safe_temporal_example.k), ((real_fun_ops[Environment].-)(hp_def.val(return_to_safe_temporal_example.y), hp_def.cnst(return_to_safe_temporal_example.sy))))) :)"
    "ODEs")))
 (rts_TCC2 0
  (rts_TCC2-1 nil 3903862119 ("" (grind) nil nil)
   ((x const-decl "nat" return_to_safe_temporal_example nil)
    (y const-decl "nat" return_to_safe_temporal_example nil)
    (length def-decl "nat" list_props nil)
    (nth def-decl "T" list_props nil)
    (mapexpr_inj const-decl "bool" hp_def dL)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null_MapExprInj name-judgement "MapExprInj" hp_def dL))
   nil
   (rts subtype
    "(: (return_to_safe_temporal_example.x, hp_def.cnst(0)), (return_to_safe_temporal_example.y, hp_def.cnst(0)) :)"
    "ODEs")))
 (return_to_Csr 0
  (return_to_Csr-1 nil 3903862281
   ("" (rewrite "norm_DLEG")
    (("" (rewrite "dltl_SEQtriangleEG" :dir rl)
      (("" (rewrite "dltl_TESTEG_eq" :dir rl)
        (("" (expand "rts")
          (("" (rewrite "dltl_choice" :dir rl)
            (("" (dl-ground)
              (("1" (expand "Csr")
                (("1" (rewrite "dltl_SEQtriangleEG" :dir rl)
                  (("1" (dl-assert)
                    (("1" (rewrite "dltl_TESTEG_eq" :dir rl)
                      (("1" (dl-flatten)
                        (("1" (rewrite "dltl_DIFFEG_eq" :dir rl)
                          (("1" (dl-assert)
                            (("1" (rewrite "ALLRUNS_eq")
                              (("1"
                                (rewrite "ALLRUNS_eq")
                                (("1"
                                  (rewrite "SOMERUNS_eq")
                                  (("1"
                                    (rewrite "SOMERUNS_eq")
                                    (("1"
                                      (dl-assert)
                                      (("1"
                                        (dl-ground)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2"
                                          (dl-hide 1 2)
                                          (("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ODEs_s?")
                              (("2"
                                (expand "ODEs_s?")
                                (("2"
                                  (skeep)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "Csr")
                (("2" (rewrite "dltl_SEQtriangleEG" :dir rl)
                  (("2" (dl-assert)
                    (("2" (rewrite "dltl_TESTEG_eq" :dir rl)
                      (("2" (dl-flatten)
                        (("2" (rewrite "dltl_DIFFEG_eq" :dir rl)
                          (("1" (dl-assert)
                            (("1" (rewrite "ALLRUNS_eq")
                              (("1"
                                (rewrite "ALLRUNS_eq")
                                (("1"
                                  (rewrite "SOMERUNS_eq")
                                  (("1"
                                    (rewrite "SOMERUNS_eq")
                                    (("1"
                                      (dl-assert)
                                      (("1"
                                        (dl-ground)
                                        (("1"
                                          (assert)
                                          (("1" (grind) nil nil))
                                          nil)
                                         ("2" (postpone) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "ODEs_s?")
                              (("2"
                                (expand "ODEs_s?")
                                (("2"
                                  (skeep)
                                  (("2" (postpone) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

