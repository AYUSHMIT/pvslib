ltl_expr : THEORY
BEGIN

  IMPORTING bool_expr
  IMPORTING trace_semantics
  IMPORTING reals@bounded_reals

  TraceBoolExpr : TYPE = [ Trace -> bool ]

  State_Trace(P:BoolExpr)(trace:Trace): bool =
  LET c = car(trace) IN
  IF  state?(c)
    THEN P(state(c))
  ELSIF  state_diff?(c)
    THEN EXISTS(T:(D(c))): FORALL(t:(D(c)) |t>=T): P(behavior(c)(t))
  ELSIF  inf_diff?(c)
    THEN EXISTS(T:(hp(0))): FORALL(t:(hp(0))): P(inf_behavior(c)(t+T))
  ELSE TRUE
  ENDIF


% STATE FORMULAS %

  ALLRUNS_st(hp:HP,f:BoolExpr)(env0:Environment): bool =
    FORALL (trace:Trace):
      nth(trace,0) = STATE(env0) AND trace_semantic_rel(hp)(trace) AND finite_trace?(trace)
      IMPLIES
      f(state(last(trace)))

  SOMERUNS_st(hp:HP,f:BoolExpr)(env0:Environment): bool =
    EXISTS (trace:Trace):
      nth(trace,0) = STATE(env0) AND trace_semantic_rel(hp)(trace)
      AND finite_trace?(trace) AND f(state(last(trace)))

  ALLRUNS_tr(hp:HP,f:TraceBoolExpr)(env0:Environment): bool =
    FORALL (trace:Trace):
      nth(trace,0) = STATE(env0) AND trace_semantic_rel(hp)(trace)
      IMPLIES
      f(trace)

  SOMERUNS_tr(hp:HP,f:TraceBoolExpr)(env0:Environment): bool =
    EXISTS (trace:Trace):
      nth(trace,0) = STATE(env0) AND trace_semantic_rel(hp)(trace) AND
      f(trace)

  % @QED ALLRUNS_eq proved by ltitolo on Tue, 18 Apr 2023 19:24:16 GMT
  ALLRUNS_eq: LEMMA
    FORALL (hp:HP,f:BoolExpr):
      ALLRUNS_st(hp,f) = ALLRUNS(hp,f)

  % @QED SOMERUNS_eq proved by ltitolo on Tue, 18 Apr 2023 19:52:53 GMT
  SOMERUNS_eq: LEMMA
    FORALL (hp:HP,f:BoolExpr):
      ALLRUNS_st(hp,f) = ALLRUNS(hp,f)

% TRACE FORMULAS %

  DLSTATE(P:BoolExpr)(trace:Trace): bool = P(state(nth(trace,0)))

  DLTLOR(P,Q:BoolExpr): MACRO TraceBoolExpr = DLSTATE(DLOR(P,Q))
  DLTLAND(P,Q:BoolExpr): MACRO TraceBoolExpr = DLSTATE(DLAND(P,Q))
  DLTLNOT(P:BoolExpr): MACRO TraceBoolExpr = DLSTATE(DLNOT(P))
  DLTLIMPLIES(P,Q: BoolExpr): MACRO TraceBoolExpr = DLSTATE(DLIMPLIES(P,Q))
  DLTLFORALL(qQ:QBoolExpr): MACRO TraceBoolExpr = DLSTATE(DLFORALL(qQ))
  DLTLEXISTS(qQ:QBoolExpr): MACRO TraceBoolExpr = DLSTATE(DLEXISTS(qQ))

  DLNOT_tr(f:TraceBoolExpr)(trace:Trace): bool = NOT f(trace)

  DLGLOBALLY(f:TraceBoolExpr)(trace:Trace): bool =
    FORALL (suffix:Trace | suffix?(suffix,trace)):
        f(suffix) OR error?(car(suffix))

  DLEVENTUALLY(f:TraceBoolExpr)(trace:Trace): bool =
    EXISTS (suffix:Trace | suffix?(suffix,trace) AND NOT error?(car(suffix))):
        f(suffix)


% NORMALIZED TRACE FORMULAS FOR FINITE TRACES %

  normDLGLOBALLY(f,g:BoolExpr)(trace:Trace): bool =
  IF finite_trace?(trace)
    THEN
      IF state?(last(trace)) THEN
        f(state(last(trace))) AND DLGLOBALLY(State_Trace(g))(trace)
      ELSE
        f(behavior(last(trace))(max(D(last(trace))))) AND DLGLOBALLY(State_Trace(g))(trace)
      ENDIF
  ELSE DLGLOBALLY(State_Trace(g))(trace)
  ENDIF

  normDLEVENTUALLY(f,g:BoolExpr)(trace:Trace): bool =
  IF finite_trace?(trace)
    THEN
    IF state?(last(trace)) THEN
      f(state(last(trace))) OR DLEVENTUALLY(State_Trace(g))(trace)
    ELSE
      f(behavior(last(trace))(max(D(last(trace))))) OR DLEVENTUALLY(State_Trace(g))(trace)
    ENDIF
  ELSE DLEVENTUALLY(State_Trace(g))(trace)
  ENDIF

  normDLGE(f,g:BoolExpr)(trace:Trace): bool =
  IF finite_trace?(trace)
    THEN
    IF state?(last(trace)) THEN
      f(state(last(trace)))
    ELSE
      f(behavior(last(trace))(max(D(last(trace)))))
    ENDIF
  ELSE DLGLOBALLY(DLEVENTUALLY(State_Trace(g)))(trace)
  ENDIF

  normDLEG(f,g:BoolExpr)(trace:Trace): bool =
  IF finite_trace?(trace)
    THEN
    IF state?(last(trace)) THEN
      f(state(last(trace)))
    ELSE
      f(behavior(last(trace))(max(D(last(trace)))))
    ENDIF
  ELSE DLEVENTUALLY(DLGLOBALLY(State_Trace(g)))(trace)
  ENDIF

END ltl_expr
