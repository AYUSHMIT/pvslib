(solution_odes_props
 (solution_odes_u_init_TCC1 0
  (solution_odes_u_init_TCC1-1 nil 3900679226
   ("" (subtype-tcc) nil nil) nil nil
   (solution_odes_u_init subtype "interval_def.hp(0)"
    "(hp_expr.dd?)")))
 (solution_odes_u_init 0
  (solution_odes_u_init-1 nil 3900679235
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (typepred "env_at_t(f, fs2, env_at_t(f, fs1, env)(T))(b)")
        (("" (typepred "env_at_t(f, fs1, env)(T + b)")
          (("" (typepred "env_at_t(f, fs1, env)(T)")
            (("" (expand "env_at_t?")
              (("" (flatten)
                (("" (case "not_in_map(f)(x!1)")
                  (("1" (inst -2 "x!1")
                    (("1" (inst -5 "x!1")
                      (("1" (inst -8 "x!1") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "not_in_map" 1)
                    (("2" (skeep)
                      (("2" (inst -3 "i")
                        (("2" (inst -6 "i")
                          (("2" (inst -9 "i")
                            (("2" (replace -1)
                              (("2"
                                (replace -6 1 rl)
                                (("2"
                                  (replace -9 1 rl)
                                  (("2"
                                    (expand "solution_odes_u?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "solution_odes?")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (hide -14 -18)
                                            (("2"
                                              (expand "sol_at_t?")
                                              (("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (solution_odes_init_TCC1 0
  (solution_odes_init_TCC1-1 nil 3900682102 ("" (subtype-tcc) nil nil)
   nil nil
   (solution_odes_init subtype "interval_def.hp(0)" "(hp_expr.dd?)")))
 (solution_odes_init 0
  (solution_odes_init-1 nil 3900682103
   ("" (skeep)
    ((""
      (inst 1
       "LAMBDA(i:below(length(f))): LAMBDA(r:real): fs(i)(r)-env(nth(f, i)`1)+env_at_t(f, fs, env)(T)(nth(f, i)`1)")
      (("" (expand "solution_odes_u?")
        (("" (expand "solution_odes?")
          (("" (flatten)
            (("" (split)
              (("1" (expand "derivable_odes?")
                (("1" (skeep)
                  (("1" (inst -1 "k")
                    (("1" (lemma "dl_derivable_minus")
                      (("1" (expand "restrict")
                        (("1" (lemma "diff_derivable_fun[(D)]")
                          (("1"
                            (inst -1 "LAMBDA (s: (D)):
             env_at_t(f, fs, env)(T)(nth(f, k)`1) + fs(k)(s)"
                             "LAMBDA (s: (D)):env(nth(f, k)`1)")
                            (("1" (assert)
                              (("1"
                                (expand "-")
                                (("1"
                                  (lemma "const_derivable_fun[(D)]")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma
                                         "sum_derivable_fun[(D)]")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA (s: (D)):
                   env_at_t(f, fs, env)(T)(nth(f, k)`1)"
                                           "LAMBDA (s: (D)):fs(k)(s)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+")
                                              (("1"
                                                (hide 2 3)
                                                (("1"
                                                  (lemma
                                                   "const_derivable_fun[(D)]")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide-all-but
                                                         (1 -4))
                                                        (("1"
                                                          (typepred
                                                           "D")
                                                          (("1"
                                                            (expand
                                                             "derivable?")
                                                            (("1"
                                                              (expand
                                                               "derivable?")
                                                              (("1"
                                                                (expand
                                                                 "convergent?")
                                                                (("1"
                                                                  (expand
                                                                   "convergence")
                                                                  (("1"
                                                                    (expand
                                                                     "convergence")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             1
                                                                             "l")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "adh")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "e!1")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "x2")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "A")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("1"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "epsilon")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "delta")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "A")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "NQ")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -7
                                                                                                   "x2")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (expand
                                                                                                     "A")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "dd?")
                                                                                                      (("2"
                                                                                                        (split)
                                                                                                        (("1"
                                                                                                          (skeep)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "closed_interval")
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "hp")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (expand
                                                                             "dd?")
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (expand
                                                                                   "closed_interval")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "dd_noe")
                            (("2" (typepred "D")
                              (("2" (inst -2 "D") nil nil)) nil))
                            nil)
                           ("3" (lemma "dd_deriv_domain")
                            (("3" (typepred "D")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "env_at_t?")
                (("2" (skeep)
                  (("2" (inst -2 "k") (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (expand "sol_at_t?")
                  (("3" (skeep)
                    (("3" (typepred "t")
                      (("3" (typepred "env_1")
                        (("3" (expand "restrict")
                          (("3" (lemma "deriv_diff_fun[(D)]")
                            (("1" (expand "deriv" -1)
                              (("1"
                                (expand "-")
                                (("1"
                                  (inst
                                   -1
                                   "LAMBDA (s: (D)):
             env_at_t(f, fs, env)(T)(nth(f, k)`1) + fs(k)(s)"
                                   "LAMBDA (s: (D)):env(nth(f, k)`1)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (inst -1 "t")
                                        (("1"
                                          (expand "deriv" 1)
                                          (("1"
                                            (replace -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (postpone) nil nil)
                                       ("3" (postpone) nil nil)
                                       ("4" (postpone) nil nil)
                                       ("5" (postpone) nil nil)
                                       ("6" (postpone) nil nil))
                                      nil))
                                    nil)
                                   ("2" (postpone) nil nil)
                                   ("3" (postpone) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

