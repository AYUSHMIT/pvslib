(ltl_expr
 (cut_inf_diff_TCC1 0
  (cut_inf_diff_TCC1-1 nil 3897057430 ("" (subtype-tcc) nil nil) nil
   nil
   (cut_inf_diff subtype
    "list_adt[TraceState_adt.TraceState].car(ltl_expr.trace)"
    "(TraceState_adt.inf_diff?)")))
 (cut_inf_diff_TCC2 0
  (cut_inf_diff_TCC2-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (cut_inf_diff subtype "(number_fields.+)(ltl_expr.T, ltl_expr.t)"
    "(interval_def.hp(0))")))
 (cut_inf_diff_TCC3 0
  (cut_inf_diff_TCC3-1 nil 3897642693 ("" (subtype-tcc) nil nil) nil
   nil
   (cut_inf_diff subtype
    "LAMBDA (t: (interval_def.hp(0))): TraceState_adt.inf_behavior(list_adt[TraceState_adt.TraceState].car(ltl_expr.trace))((number_fields.+)(ltl_expr.T, t))"
    "{ib: [(interval_def.hp(0)) -> hp_def.Environment] | ib(0) = TraceState_adt.inf_behavior(list_adt[TraceState_adt.TraceState].car(ltl_expr.trace))(ltl_expr.T)}")))
 (cut_inf_diff_TCC4 0
  (cut_inf_diff_TCC3-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (INF_DIFF adt-constructor-decl
     "[[s0: Environment, {ib: [(hp(0)) -> Environment] | ib(0) = s0}] ->
   (inf_diff?)]" TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (wf_trace? const-decl "bool" trace_semantics nil))
   nil
   (cut_inf_diff subtype
    "(: TraceState_adt.INF_DIFF(TraceState_adt.inf_behavior(list_adt[TraceState_adt.TraceState].car(ltl_expr.trace))(ltl_expr.T), LAMBDA (t: (interval_def.hp(0))): TraceState_adt.inf_behavior(list_adt[TraceState_adt.TraceState].car(ltl_expr.trace))((number_fields.+)(ltl_expr.T, t))) :)"
    "Trace")))
 (cut_state_diff_TCC1 0
  (cut_state_diff_TCC1-1 nil 3897057430 ("" (subtype-tcc) nil nil) nil
   nil
   (cut_state_diff subtype
    "list_adt[TraceState_adt.TraceState].car(ltl_expr.trace)"
    "(TraceState_adt.state_diff?)")))
 (cut_state_diff_TCC2 0
  (cut_state_diff_TCC2-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil))
   nil
   (cut_state_diff subtype "ltl_expr.c"
    "(TraceState_adt.state_diff?)")))
 (cut_state_diff_TCC3 0
  (cut_state_diff_TCC3-1 nil 3897057430
   ("" (skeep)
    (("" (typepred "D(c)")
      (("" (skeep)
        (("" (lemma "ci_ci") (("" (inst?) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_ci formula-decl nil interval_def ODEs))
   nil
   (cut_state_diff subtype "TraceState_adt.D(ltl_expr.c)"
    "(interval_def.closed_interval?)")))
 (cut_state_diff_TCC4 0
  (cut_state_diff_TCC4-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs))
   nil
   (cut_state_diff subtype
    "(number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T)"
    "{b: reals.real | reals.<(0, b)}")))
 (cut_state_diff_TCC5 0
  (cut_state_diff_TCC5-1 nil 3897057430
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "dd?" 1)
        (("1" (assert) (("1" (flatten) (("1" (inst?) nil nil)) nil))
          nil))
        nil)
       ("2" (assert) (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (dd? const-decl "bool" hp_expr nil))
   nil
   (cut_state_diff subtype
    "interval_def.closed_interval(0, (number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T))"
    "{D: (hp_expr.dd?) | EXISTS (b: real_types.posreal): D = interval_def.closed_interval(0, b)}")))
 (cut_state_diff_TCC6 0
  (cut_state_diff_TCC6-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs))
   nil
   (cut_state_diff subtype "ltl_expr.T"
    "(TraceState_adt.D(ltl_expr.c))")))
 (cut_state_diff_TCC7 0
  (cut_state_diff_TCC7-1 nil 3897057430
   ("" (skeep*)
    (("" (typepred "t")
      (("" (typepred "D(c)")
        (("" (typepred "max_ci(D(c))")
          (("" (skeep)
            (("" (replace -4 1)
              (("" (expand "closed_interval")
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "T")
                      (("" (typepred "D(car(trace))")
                        (("" (skeep)
                          (("" (replace -2 -3)
                            (("" (expand "closed_interval" -)
                              ((""
                                (flatten)
                                ((""
                                  (assert)
                                  ((""
                                    (move-terms -10 r 2)
                                    ((""
                                      (replace -8 -5)
                                      (("" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (cut_state_diff subtype "(number_fields.+)(ltl_expr.T, ltl_expr.t)"
    "(TraceState_adt.D(ltl_expr.c))")))
 (cut_state_diff_TCC8 0
  (cut_state_diff_TCC8-1 nil 3897642693 ("" (subtype-tcc) nil nil)
   ((max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs))
   nil
   (cut_state_diff subtype
    "LAMBDA (t: (interval_def.closed_interval(0, (number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T)))): TraceState_adt.behavior(ltl_expr.c)((number_fields.+)(ltl_expr.T, t))"
    "{b: [(interval_def.closed_interval(0, (number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T))) -> hp_def.Environment] | b(0) = TraceState_adt.behavior(ltl_expr.c)(ltl_expr.T)}")))
 (cut_state_diff_TCC9 0
  (cut_state_diff_TCC8-1 nil 3897057430
   ("" (skeep)
    (("" (split)
      (("1" (expand "wf_trace?")
        (("1" (skeep)
          (("1" (typepred "trace")
            (("1" (expand "wf_trace?")
              (("1" (flatten)
                (("1" (case "i=0")
                  (("1" (expand "nth") (("1" (assert) nil nil)) nil)
                   ("2" (expand "nth")
                    (("2" (assert)
                      (("2" (inst -2 "i")
                        (("1" (assert) nil nil)
                         ("2" (typepred "i")
                          (("2" (expand "length")
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length")
        (("2" (assert)
          (("2" (typepred "trace")
            (("2" (expand "wf_trace?")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (c skolem-const-decl "TraceState" ltl_expr nil)
    (trace skolem-const-decl "{trace: Trace | state_diff?(car(trace))}"
           ltl_expr nil)
    (T skolem-const-decl "(D(car[TraceState](trace)))" ltl_expr nil)
    (i skolem-const-decl "below(length(cons[TraceState]
                 (STATE_DIFF(closed_interval(0, max_ci(D(c)) - T),
                             behavior(c)(T),
                             LAMBDA (t:
                                     (closed_interval
                                      (0, max_ci(D(c)) - T))):
                               behavior(c)(t + T)),
                  cdr[TraceState](trace)))
       - 1)" ltl_expr nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (cut_state_diff subtype
    "list_adt[TraceState_adt.TraceState].cons(TraceState_adt.STATE_DIFF(interval_def.closed_interval(0, (number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T)), TraceState_adt.behavior(ltl_expr.c)(ltl_expr.T), LAMBDA (t: (interval_def.closed_interval(0, (number_fields.-)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)), ltl_expr.T)))): TraceState_adt.behavior(ltl_expr.c)((number_fields.+)(ltl_expr.T, t))), list_adt[TraceState_adt.TraceState].cdr(ltl_expr.trace))"
    "{tt: trace_semantics.Trace | list_props[TraceState_adt.TraceState].length(tt) = list_props[TraceState_adt.TraceState].length(ltl_expr.trace)}")))
 (cut_state_diff_TCC10 0
  (cut_state_diff_TCC9-1 nil 3897638778
   ("" (skeep*)
    (("" (split 2)
      (("1" (expand "wf_trace?" 1)
        (("1" (skeep)
          (("1" (case "i=0")
            (("1" (expand "nth") (("1" (assert) nil nil)) nil)
             ("2" (expand "nth" +)
              (("2" (assert)
                (("2" (typepred "trace")
                  (("2" (expand "wf_trace?" -1)
                    (("2" (flatten)
                      (("2" (inst -2 "i")
                        (("1" (expand "nth" -2)
                          (("1" (propax) nil nil)) nil)
                         ("2" (assert)
                          (("2" (typepred "i")
                            (("2" (expand "length" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "length" 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (assert)
                  (("1" (grind)
                    (("1" (typepred "trace") (("1" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (c skolem-const-decl "TraceState" ltl_expr nil)
    (trace skolem-const-decl "{trace: Trace | state_diff?(car(trace))}"
           ltl_expr nil)
    (i skolem-const-decl "below(length(cons[TraceState]
                 (STATE(behavior(c)(max_ci(D(c)))),
                  cdr[TraceState](trace)))
       - 1)" ltl_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (STATE adt-constructor-decl "[Environment -> (state?)]"
     TraceState_adt nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (<= const-decl "bool" reals nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (cut_state_diff subtype
    "list_adt[TraceState_adt.TraceState].cons(TraceState_adt.STATE(TraceState_adt.behavior(ltl_expr.c)(more_ci_props.max_ci(TraceState_adt.D(ltl_expr.c)))), list_adt[TraceState_adt.TraceState].cdr(ltl_expr.trace))"
    "{tt: trace_semantics.Trace | list_props[TraceState_adt.TraceState].length(tt) = list_props[TraceState_adt.TraceState].length(ltl_expr.trace)}")))
 (cut_state_zero_TCC1 0
  (cut_state_zero_TCC1-1 nil 3897641515
   ("" (skeep*)
    (("" (typepred " D(car[TraceState](trace))")
      (("" (skeep) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (cut_state_zero subtype "0"
    "(TraceState_adt.D(list_adt[TraceState_adt.TraceState].car(ltl_expr.trace)))")))
 (cut_state_zero 0
  (cut_state_zero-1 nil 3897641575
   ("" (skeep)
    (("" (expand "cut_state_diff")
      (("" (assert)
        (("" (typepred "D(car(trace))")
          (("" (skeep)
            (("" (lemma "db_max")
              (("" (inst?)
                (("" (assert)
                  (("" (decompose-equality 1)
                    (("" (lemma "TraceState_STATE_DIFF_eta")
                      (("" (replace -4)
                        (("" (assert)
                          (("" (inst?)
                            (("" (assert)
                              ((""
                                (replace -1 1 rl)
                                ((""
                                  (assert)
                                  ((""
                                    (replace -4)
                                    ((""
                                      (case
                                       "behavior(car(trace)) = LAMBDA (t: (closed_interval(0, max_ci(D(car(trace))) - 0 ))): behavior(car(trace))(t)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "behavior(car(trace))(0) = s0(car(trace))")
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "behavior(car(trace))")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (decompose-equality)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (replace -2)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (replace -4)
                                            (("2"
                                              (lemma "ci_ci")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (assert)
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -2)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (replace -4)
                                        (("4"
                                          (lemma "ci_ci")
                                          (("4" (inst?) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (TraceState_STATE_DIFF_eta formula-decl nil TraceState_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (trace skolem-const-decl "{trace: Trace | state_diff?(car(trace))}"
           ltl_expr nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (behavior adt-accessor-decl
     "[d: (state_diff?) -> {b: [(D(d)) -> Environment] | b(0) = s0(d)}]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (<= const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (STATE_DIFF adt-constructor-decl
     "[[D: {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)},
  s0: Environment, {b: [(D) -> Environment] | b(0) = s0}] ->
   (state_diff?)]" TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Environment type-eq-decl nil hp_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (cut_inf_zero_TCC1 0
  (cut_inf_zero_TCC1-1 nil 3897642890 ("" (subtype-tcc) nil nil)
   ((hp const-decl "bool" interval_def ODEs)) nil
   (cut_inf_zero subtype "0" "(interval_def.hp(0))")))
 (cut_inf_zero 0
  (cut_inf_zero-1 nil 3897642895
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten)
          (("" (case "length(trace)=1")
            (("1" (expand "cut_inf_diff")
              (("1" (assert)
                (("1" (lemma "TraceState_INF_DIFF_eta")
                  (("1" (inst?)
                    (("1" (decompose-equality 1)
                      (("1" (replace -1 1 rl)
                        (("1" (assert)
                          (("1" (typepred "inf_behavior(car(trace))")
                            (("1" (replace -1)
                              (("1"
                                (case
                                 "inf_behavior(car(trace)) = LAMBDA (t: (hp(0))): inf_behavior(car(trace))(t)")
                                (("1" (assert) nil nil)
                                 ("2" (decompose-equality) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -2 "0")
              (("1" (expand "nth") (("1" (propax) nil nil)) nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trace skolem-const-decl "{trace: Trace | inf_diff?(car(trace))}"
           ltl_expr nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (TraceState_INF_DIFF_eta formula-decl nil TraceState_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (hp const-decl "bool" interval_def ODEs)
    (INF_DIFF adt-constructor-decl
     "[[s0: Environment, {ib: [(hp(0)) -> Environment] | ib(0) = s0}] ->
   (inf_diff?)]" TraceState_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (s0 shared-adt-accessor-decl
     "[{x: TraceState | inf_diff?(x) OR state_diff?(x)} -> Environment]"
     TraceState_adt nil)
    (inf_behavior adt-accessor-decl
     "[d: (inf_diff?) -> {ib: [(hp(0)) -> Environment] | ib(0) = s0(d)}]"
     TraceState_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (ALLRUNS_eq 0
  (ALLRUNS_eq-1 nil 3890833892
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS")
              (("1" (expand "ALLRUNS_st")
                (("1" (skeep)
                  (("1" (use "trace_semantics_complete")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep -4) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS")
              (("2" (expand "ALLRUNS_st")
                (("2" (skeep)
                  (("2" (inst -1 "final_env(trace)")
                    (("2" (assert)
                      (("2" (use "trace_semantics_correct")
                        (("2" (beta) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (trace_semantics_complete formula-decl nil trace_semantics nil)
    (trace_semantics_correct formula-decl nil trace_semantics nil)
    (final_env const-decl "Environment" trace_semantics nil))
   shostak))
 (SOMERUNS_eq 0
  (SOMERUNS_eq-1 nil 3890836145
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "SOMERUNS")
              (("1" (expand "SOMERUNS_st")
                (("1" (skeep)
                  (("1" (use "trace_semantics_correct")
                    (("1" (inst?)
                      (("1" (assert) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "SOMERUNS_st")
              (("2" (expand "SOMERUNS")
                (("2" (skeep)
                  (("2" (use "trace_semantics_complete")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (insteep) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (SOMERUNS_st const-decl "bool" ltl_expr nil)
    (SOMERUNS const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (final_env const-decl "Environment" trace_semantics nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (trace_semantics_correct formula-decl nil trace_semantics nil)
    (trace_semantics_complete formula-decl nil trace_semantics nil))
   shostak))
 (DLSTATE_TCC1 0
  (DLSTATE_TCC1-1 nil 3896513617
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?" -1)
        (("" (flatten) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil (DLSTATE subtype "0" "below[length[TraceState](trace)]")))
 (DLSTATE_TCC2 0
  (DLSTATE_TCC1-1 nil 3886161669
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?" -1) (("" (postpone) nil nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (DLSTATE subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, 0)"
    "(TraceState_adt.state?)")))
 (suffix_tr?_TCC1 0
  (suffix_tr?_TCC1-1 nil 3896513617 ("" (subtype-tcc) nil nil) nil nil
   (suffix_tr? subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, ltl_expr.n)"
    "(TraceState_adt.state_diff?)")))
 (suffix_tr?_TCC2 0
  (suffix_tr?_TCC2-1 nil 3896513617 ("" (subtype-tcc) nil nil) nil nil
   (suffix_tr? subtype "(number_fields.+)(ltl_expr.x, ltl_expr.t)"
    "(TraceState_adt.D(list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, ltl_expr.n)))")))
 (suffix_tr?_TCC3 0
  (suffix_tr?_TCC3-1 nil 3896513617 ("" (subtype-tcc) nil nil) nil nil
   (suffix_tr? subtype
    "(number_fields.-)(list_props[TraceState_adt.TraceState].length(ltl_expr.trace), 1)"
    "nat")))
 (suffix_tr?_TCC4 0
  (suffix_tr?_TCC4-1 nil 3896513617 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (hp const-decl "bool" interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (suffix_tr? subtype "(number_fields.+)(ltl_expr.x, ltl_expr.t)"
    "(interval_def.hp(0))")))
 (suffix_tr?_TCC5 0
  (suffix_tr?_TCC5-1 nil 3896513617 ("" (subtype-tcc) nil nil) nil nil
   (suffix_tr? subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, ltl_expr.n)"
    "(TraceState_adt.inf_diff?)")))
 (suffix_tr?_TCC6 0
  (suffix_tr?_TCC6-1 nil 3896513617 ("" (subtype-tcc) nil nil) nil nil
   (suffix_tr? subtype
    "(number_fields.-)(list_props[TraceState_adt.TraceState].length(ltl_expr.trace), 1)"
    "nat")))
 (DLGLOBALLY_TCC1 0
  (DLGLOBALLY_TCC1-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (suffix? def-decl "bool" more_list_props structures)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil))
   nil
   (DLGLOBALLY subtype "ltl_expr.suffix"
    "{trace: trace_semantics.Trace | TraceState_adt.state_diff?(list_adt[TraceState_adt.TraceState].car(trace))}")))
 (DLGLOBALLY_TCC2 0
  (DLGLOBALLY_TCC2-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (suffix? def-decl "bool" more_list_props structures)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (< const-decl "bool" reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (dd? const-decl "bool" hp_expr nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil))
   nil
   (DLGLOBALLY subtype "ltl_expr.t"
    "(TraceState_adt.D(list_adt[TraceState_adt.TraceState].car(ltl_expr.suffix)))")))
 (DLGLOBALLY_TCC3 0
  (DLGLOBALLY_TCC3-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (suffix? def-decl "bool" more_list_props structures)
    (hp const-decl "bool" interval_def ODEs)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (DLGLOBALLY subtype "ltl_expr.suffix"
    "{trace: trace_semantics.Trace | TraceState_adt.inf_diff?(list_adt[TraceState_adt.TraceState].car(trace))}")))
 (DLEVENTUALLY_TCC1 0
  (DLEVENTUALLY_TCC1-1 nil 3897057430 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (suffix? def-decl "bool" more_list_props structures)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def ODEs))
   nil
   (DLEVENTUALLY subtype "ltl_expr.suffix"
    "{trace: trace_semantics.Trace | TraceState_adt.inf_diff?(list_adt[TraceState_adt.TraceState].car(trace))}")))
 (norm_implies_DLGLOBALLY 0
  (norm_implies_DLGLOBALLY-1 nil 3896513690
   ("" (skeep)
    (("" (expand "normDLGLOBALLY") (("" (grind) nil nil)) nil)) nil)
   ((normDLGLOBALLY const-decl "bool" ltl_expr nil)) shostak))
 (DLEVENTUALLY_implies_norm 0
  (DLEVENTUALLY_implies_norm-1 nil 3896513714
   ("" (skeep)
    (("" (expand "normDLEVENTUALLY") (("" (grind) nil nil)) nil)) nil)
   ((normDLEVENTUALLY const-decl "bool" ltl_expr nil)) shostak))
 (DLGLOBALLY_FORALL 0
  (DLGLOBALLY_FORALL-1 nil 3896786389
   ("" (skeep*)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (assert)
            (("1" (flatten)
              (("1" (expand "DLGLOBALLY")
                (("1" (typepred "i")
                  (("1" (inst -2 "trace^(i,length(trace)-1)")
                    (("1" (expand "State_Trace")
                      (("1" (lemma "caret_nth[TraceState]")
                        (("1"
                          (inst -1 "trace" "i"
                           "(i, length(trace) - 1)")
                          (("1" (assert)
                            (("1" (expand "nth" -1 2)
                              (("1"
                                (replace -1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "init_env")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -2 "t")
                                                  (("1"
                                                    (expand "init_env")
                                                    (("1"
                                                      (expand
                                                       "cut_state_diff")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "cut_inf_diff")
                                              (("2"
                                                (expand "init_env")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (typepred
                                                         "trace")
                                                        (("2"
                                                          (expand
                                                           "wf_trace?")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "i")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split)
                      (("1" (typepred "trace")
                        (("1" (expand "wf_trace?")
                          (("1" (flatten)
                            (("1" (split)
                              (("1" (grind) nil nil)
                               ("2"
                                (lemma "caret_nth[TraceState]")
                                (("2"
                                  (inst
                                   -1
                                   "trace"
                                   "i"
                                   "(i, length[TraceState](trace) - 1)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" -1 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -4 "i")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (lemma "caret_nth[TraceState]")
                                  (("3"
                                    (inst
                                     -1
                                     "trace"
                                     "i_1+i"
                                     "(i, length[TraceState](trace) - 1)")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "i_1")
                                        (("3"
                                          (lemma
                                           "caret_length[TraceState]")
                                          (("3"
                                            (inst?)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (replace -1)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (inst -5 "i_1+i")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "caret_suffix[TraceState]")
                        (("2" (inst?)
                          (("1" (assert) (("1" (inst 1 "i") nil nil))
                            nil)
                           ("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "DLGLOBALLY")
          (("2" (skeep)
            (("2" (typepred "suffix")
              (("2" (expand "State_Trace")
                (("2" (lemma "suffix_nth[TraceState]")
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (inst -1 "0")
                        (("1" (expand "nth" -1 1)
                          (("1" (replace -1)
                            (("1"
                              (inst -4
                               "length(trace) - length(suffix)")
                              (("1"
                                (assert)
                                (("1"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "init_env")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (flatten)
                                    (("3"
                                      (assert)
                                      (("3"
                                        (expand "cut_state_diff")
                                        (("3"
                                          (expand "init_env")
                                          (("3"
                                            (replace -3)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (skeep)
                                                (("3"
                                                  (inst -2 "t")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (flatten)
                                    (("4"
                                      (assert)
                                      (("4"
                                        (skeep)
                                        (("4"
                                          (expand "cut_inf_diff")
                                          (("4"
                                            (expand "init_env")
                                            (("4"
                                              (inst -2 "t")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "suffix_length[TraceState]")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "suffix?")
                          (("2" (assert)
                            (("2" (expand "length" 1 1)
                              (("2"
                                (lift-if)
                                (("2"
                                  (split)
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (caret_length formula-decl nil more_list_props structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (caret_suffix formula-decl nil even_more_list_props nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (nth def-decl "T" list_props nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (below type-eq-decl nil nat_types nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (caret_nth formula-decl nil more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (suffix? def-decl "bool" more_list_props structures)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (suffix_length formula-decl nil more_list_props structures)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (DLGLOBALLY_append 0
  (DLGLOBALLY_append-1 nil 3896513739
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "DLGLOBALLY_FORALL")
          (("1" (inst-cp -1 "g" "append(trace1, trace2)")
            (("1" (assert)
              (("1" (inst-cp -1 "g" "trace2")
                (("1" (inst -1 "g" "trace1")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (lemma "length_append[TraceState]")
                        (("1" (inst?)
                          (("1" (lemma "nth_append[TraceState]")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (inst -4 "i")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "wf_trace?")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (inst
                                                           -10
                                                           "i")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (propax) nil nil)
                                                 ("3"
                                                  (flatten)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst -2 "t")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (inst
                                               -4
                                               "i - length(trace1)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (split -4)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (propax)
                                                    nil
                                                    nil)
                                                   ("3"
                                                    (flatten)
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (inst -2 "t")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "DLGLOBALLY_FORALL")
          (("2" (split)
            (("1" (inst-cp -1 "g" "append(trace1, trace2)")
              (("1" (assert)
                (("1" (inst -1 "g" "trace1")
                  (("1" (assert)
                    (("1" (skeep)
                      (("1" (lemma "length_append[TraceState]")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (inst -2 "i")
                              (("1"
                                (lemma "nth_append[TraceState]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil)
                                         ("3"
                                          (flatten)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst -2 "t")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst-cp -1 "g" "append(trace1, trace2)")
              (("2" (inst -1 "g" "trace2")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst -1 "length(trace1)+i")
                      (("1" (lemma "nth_append[TraceState]")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (split -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "length_append[TraceState]")
                                      (("1"
                                        (inst?)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (skeep)
                                      (("3" (inst -2 "t") nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_append[TraceState]")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (i skolem-const-decl "below(length(trace2))" ltl_expr nil)
    (trace2 skolem-const-decl "Trace" ltl_expr nil)
    (trace1 skolem-const-decl "Trace" ltl_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (DLEVENTUALLY_EXISTS 0
  (DLEVENTUALLY_EXISTS-1 nil 3896949354
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "DLEVENTUALLY")
          (("1" (skeep)
            (("1" (expand "State_Trace")
              (("1" (lemma "suffix_nth[TraceState]")
                (("1" (typepred "suffix")
                  (("1" (inst?)
                    (("1" (assert)
                      (("1" (inst -3 "0")
                        (("1" (expand "nth" -3 1)
                          (("1" (replace -3)
                            (("1"
                              (inst 2 "length(trace) - length(suffix)")
                              (("1"
                                (assert)
                                (("1"
                                  (split -4)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "init_env")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand
                                                 "cut_state_diff")
                                                (("1"
                                                  (expand "init_env")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst 4 "t")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "init_env")
                                                (("2"
                                                  (expand
                                                   "cut_inf_diff")
                                                  (("2"
                                                    (inst 6 "t")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "suffix_length[TraceState]")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "wf_trace?")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (assert)
            (("2" (flatten)
              (("2" (expand "DLEVENTUALLY")
                (("2" (expand "State_Trace")
                  (("2" (name "s" "trace^(i,length(trace)-1)")
                    (("2" (lemma "caret_nth[TraceState]")
                      (("2"
                        (inst -1 "trace" "i" "(i, length(trace) - 1)")
                        (("2" (assert)
                          (("2" (expand "nth" -1 2)
                            (("2" (inst 2 "s")
                              (("1"
                                (replace -2)
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "init_env")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst 2 "t")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "cut_state_diff")
                                                  (("2"
                                                    (expand "init_env")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (flatten)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (skeep)
                                            (("3"
                                              (expand "cut_inf_diff")
                                              (("3"
                                                (expand "init_env")
                                                (("3"
                                                  (inst 2 "t")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "wf_trace?")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (lemma
                                       "caret_suffix[TraceState]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (lemma
                                           "caret_length[TraceState]")
                                          (("2"
                                            (inst?)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "caret_nth[TraceState]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "trace"
                                                         "_"
                                                         "(i, length(trace) - 1)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "i!1+i")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "i!1")
                                                                    (("2"
                                                                      (replace
                                                                       -3)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (typepred
                                                                             "trace")
                                                                            (("2"
                                                                              (expand
                                                                               "wf_trace?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -2
                                                                                   "i!1 + i")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (inst 2 "i")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (suffix? def-decl "bool" more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (hp const-decl "bool" interval_def ODEs)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (suffix_length formula-decl nil more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (TraceState type-decl nil TraceState_adt nil)
    (caret_nth formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (caret_suffix formula-decl nil even_more_list_props nil)
    (caret_length formula-decl nil more_list_props structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   shostak))
 (DLEVENTUALLY_append 0
  (DLEVENTUALLY_append-1 nil 3896517847
   ("" (skeep)
    (("" (lemma "DLEVENTUALLY_EXISTS")
      (("" (split)
        (("1" (flatten)
          (("1" (split)
            (("1" (inst-cp -2 "g" "append(trace1, trace2)")
              (("1" (inst -2 "g" "trace1")
                (("1" (assert)
                  (("1" (skeep)
                    (("1" (inst 3 "i")
                      (("1" (assert)
                        (("1" (lemma "nth_append[TraceState]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (lemma "length_append[TraceState]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -2)
                                      (("1"
                                        (split)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst 4 "t")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (flatten)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "length_append[TraceState]")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst-cp -2 "g" "append(trace1, trace2)")
              (("2" (assert)
                (("2" (inst -2 "g" "trace2")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (lemma "length_append[TraceState]")
                        (("2" (inst?)
                          (("2" (inst 3 "length(trace1)+i")
                            (("1" (assert)
                              (("1"
                                (lemma "nth_append[TraceState]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (inst 4 "t")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (inst-cp -2 "g" "append(trace1, trace2)")
            (("2" (inst-cp -2 "g" "trace1")
              (("2" (inst -2 "g" "trace2")
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (lemma "nth_append[TraceState]")
                      (("2" (lemma "length_append[TraceState]")
                        (("2" (inst?)
                          (("2" (assert)
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (replace -2)
                                        (("1"
                                          (inst 4 "i")
                                          (("1"
                                            (expand "wf_trace?")
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (inst -7 "i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -5)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst
                                                               5
                                                               "t")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -3)
                                                    (("2"
                                                      (typepred
                                                       "trace2")
                                                      (("2"
                                                        (expand
                                                         "wf_trace?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (inst 4 "i - length(trace1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (split -4)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst 5 "t")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(append(trace1, trace2)))"
       ltl_expr nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(trace2))" ltl_expr nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (append def-decl "list[T]" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trace2 skolem-const-decl "Trace" ltl_expr nil)
    (i skolem-const-decl "below(length(trace1))" ltl_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (trace1 skolem-const-decl "Trace" ltl_expr nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nth_append formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length_append formula-decl nil list_props nil))
   shostak))
 (DLGE_nth_TCC1 0
  (DLGE_nth_TCC1-1 nil 3896962851 ("" (subtype-tcc) nil nil) nil nil
   (DLGE_nth subtype "(number_fields.+)(ltl_expr.i, ltl_expr.j)"
    "below[length[TraceState](trace)]")))
 (DLGE_nth 0
  (DLGE_nth-1 nil 3896962863
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "DLGLOBALLY")
            (("1" (inst -1 "trace^(j,length(trace)-1)")
              (("1" (assert)
                (("1" (lemma "caret_nth[TraceState]")
                  (("1" (inst -1 "trace" "j" "(j, length(trace) - 1)")
                    (("1" (assert)
                      (("1" (expand "nth" -1 2)
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (flatten)
                                (("1"
                                  (expand "DLEVENTUALLY")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (typepred "suffix")
                                      (("1"
                                        (lemma
                                         "suffix_nth[TraceState]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst -1 "0")
                                              (("1"
                                                (expand "nth" -1 1)
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "State_Trace")
                                                      (("1"
                                                        (expand
                                                         "init_env")
                                                        (("1"
                                                          (expand
                                                           "cut_inf_diff")
                                                          (("1"
                                                            (expand
                                                             "cut_state_diff")
                                                            (("1"
                                                              (lemma
                                                               "caret_nth[TraceState]")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "trace"
                                                                 "length(trace ^ (j, length(trace) - 1)) - length(suffix)+j"
                                                                 "(j, length(trace) - 1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "caret_length[TraceState]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (typepred
                                                                             "suffix")
                                                                            (("1"
                                                                              (expand
                                                                               "wf_trace?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "j")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "suffix_length[TraceState]")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split
                                                                                             -7)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -13
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -7)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       4
                                                                                                       "length(trace) - length(suffix)-j")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           -13)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (skeep)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lift-if)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (split
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   5
                                                                                                                                   "t")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "t")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     6
                                                                                                                                     "max_ci(D(nth(trace, length(trace) - length(suffix))))")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (grind)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "suffix_length[TraceState]")
                                                                  (("2"
                                                                    (inst?)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "wf_trace?")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (inst
                                       -2
                                       "max_ci(D(car(trace ^ (j, length(trace) - 1))))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -3 -2 rl)
                                          (("1"
                                            (lemma
                                             "DLEVENTUALLY_EXISTS")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 4 "i")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "cut_state_diff"
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lift-if)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (name
                                                                         "M"
                                                                         "max_ci(D(nth(trace, j)))")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -3)
                                                                            (("1"
                                                                              (expand
                                                                               "cut_state_diff"
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -6
                                                                                         -3
                                                                                         rl)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (inst
                                                                                             3
                                                                                             "max_ci(D(nth(trace, j)))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "T")
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -3)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "max_ci(D(nth[TraceState](trace, j)))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "T")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "cut_state_diff"
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "nth"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (lemma
                                                                                 "caret_nth[TraceState]")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "trace"
                                                                                   "i+j"
                                                                                   "(j, length(trace) - 1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "j")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "i")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "cut_state_diff(trace ^ (j, length(trace) - 1), max_ci(D(nth(trace, j))))")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "caret_length[TraceState]")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -6)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -6
                                                                                                           -7
                                                                                                           rl)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               +)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (split
                                                                                                                   -7)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           6
                                                                                                                           "t")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "t")
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "cut_state_diff"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("3"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (typepred
                                                           "cut_state_diff(trace ^ (j, length(trace) - 1), max_ci(D(nth(trace, j))))")
                                                          (("2"
                                                            (replace
                                                             -2)
                                                            (("2"
                                                              (lemma
                                                               "caret_length[TraceState]")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "D(car[TraceState] (^[TraceState] (trace, (j, length[TraceState](trace) - 1))))")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (lemma "ci_ci")
                                              (("2" (inst?) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (lemma
                                       "caret_length[TraceState]")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "trace")
                                            (("2"
                                              (expand "wf_trace?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (typepred "j")
                                                  (("2"
                                                    (case
                                                     "j=length(trace)-1")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst 5 "0")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -6
                                                                 "T")
                                                                (("1"
                                                                  (lemma
                                                                   "DLEVENTUALLY_EXISTS")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "cut_inf_diff")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (typepred
                                                                             "i")
                                                                            (("1"
                                                                              (expand
                                                                               "cut_inf_diff")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -9
                                                                                       -2
                                                                                       rl)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           6
                                                                                           "t+T")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "t")
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst -3 "j")
                                                      (("1"
                                                        (replace -6)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (expand "wf_trace?")
                  (("1" (typepred "j")
                    (("1" (lemma "caret_nth[TraceState]")
                      (("1"
                        (inst-cp -1 "trace" "j"
                         "(j, length(trace) - 1)")
                        (("1" (assert)
                          (("1" (expand "nth" -2 2)
                            (("1" (assert)
                              (("1"
                                (lemma "caret_length[TraceState]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1" (propax) nil nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "trace"
                                                       "i+j"
                                                       "(j, length(trace) - 1)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           (2 3)
                                                           rl)
                                                          (("2"
                                                            (typepred
                                                             "trace")
                                                            (("2"
                                                              (expand
                                                               "wf_trace?")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -3
                                                                         "i+j")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "caret_suffix[TraceState]")
                  (("2" (inst?)
                    (("1" (assert) (("1" (inst 1 "j") nil nil)) nil)
                     ("2" (lemma "caret_length[TraceState]")
                      (("2" (inst?)
                        (("2" (assert)
                          (("2" (expand "length" -1 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "DLGLOBALLY")
          (("2" (skeep)
            (("2" (typepred "suffix")
              (("2" (lemma "suffix_length[TraceState]")
                (("2" (inst?)
                  (("2" (assert)
                    (("2"
                      (case "suffix = trace^(length(trace)-length(suffix),length(trace)-1)")
                      (("1" (replace -1)
                        (("1" (lemma "caret_nth[TraceState]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (inst
                                 -1
                                 "length(trace) - length(suffix)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" -1 2)
                                        (("1"
                                          (replace -1 1 rl)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (inst
                                               -6
                                               "length(trace) - length(suffix)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "DLEVENTUALLY_EXISTS")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "i")
                                                                        (("1"
                                                                          (lemma
                                                                           "caret_nth[TraceState]")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "trace"
                                                                             "i+length(trace) - length(suffix)"
                                                                             "(length(trace) - length(suffix), length(trace) - 1)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (replace
                                                                       -4)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -3)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (lemma
                                                                           "DLEVENTUALLY_EXISTS")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 1
                                                                                 "0")
                                                                                (("2"
                                                                                  (expand
                                                                                   "nth"
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "cut_state_diff"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (lift-if)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "cut_state_diff"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "cut_state_diff"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "t")
                                                                                                            (("1"
                                                                                                              (skeep)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "t_1")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "t_1-t")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "cut_state_diff"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -6)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "D(nth(trace, length(trace) - length(suffix)))")
                                                                                                                                (("2"
                                                                                                                                  (skeep)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "db_max")
                                                                                                                                    (("2"
                                                                                                                                      (inst?)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -10)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "closed_interval")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "cut_state_diff"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -2
                                                                                                                 "max_ci(D(nth(trace, length(trace) - length(suffix))))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (skeep)
                                                                                                                    (("1"
                                                                                                                      (typepred
                                                                                                                       "t!1")
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "D(nth(trace, length(trace) - length(suffix)))")
                                                                                                                            (("1"
                                                                                                                              (skeep)
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -2)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (typepred
                                                                                                                                     "max_ci(closed_interval(0, b))")
                                                                                                                                    (("1"
                                                                                                                                      (inst
                                                                                                                                       -2
                                                                                                                                       "t!1")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (typepred
                                                                                                                   "D(nth(trace, length(trace) - length(suffix)))")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "ci_ci")
                                                                                                                        (("2"
                                                                                                                          (inst?)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (flatten)
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (lemma
                                                                     "DLEVENTUALLY_EXISTS")
                                                                    (("3"
                                                                      (inst?)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (expand
                                                                           "cut_inf_diff")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               1
                                                                               "0")
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -2
                                                                                   "t")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "t_1")
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "t_1-t")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (grind)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "DLEVENTUALLY_EXISTS")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "i")
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_nth[TraceState]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "trace"
                                                                                   "i+length(trace) - length(suffix)"
                                                                                   "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (lemma
                                                                                 "DLEVENTUALLY_EXISTS")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       1
                                                                                       "i")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cut_state_diff"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "caret_nth[TraceState]")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "trace"
                                                                                                 "i+length(trace) - length(suffix)"
                                                                                                 "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (split)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "i")
                                                                                    (("1"
                                                                                      (case
                                                                                       "length(suffix)=1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "trace")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "wf_trace?")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -2
                                                                                               "length(trace) - length(suffix)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (split
                                                                       3)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (lemma
                                                                           "DLEVENTUALLY_EXISTS")
                                                                          (("1"
                                                                            (inst?)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "i")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "caret_nth[TraceState]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "trace"
                                                                                     "i+length(trace) - length(suffix)"
                                                                                     "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         1
                                                                                         rl)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (split
                                                                             2)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "DLEVENTUALLY_EXISTS")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "i")
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "caret_nth[TraceState]")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "trace"
                                                                                             "i+length(trace) - length(suffix)"
                                                                                             "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cut_state_diff"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "cut_state_diff"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "nth"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (case
                                                                                           "length(suffix) =1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "i")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "trace")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "wf_trace?")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "length(trace) - length(suffix)")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (flatten)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (split)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (lemma
                                                                         "DLEVENTUALLY_EXISTS")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "i")
                                                                              (("1"
                                                                                (lemma
                                                                                 "caret_nth[TraceState]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "trace"
                                                                                   "i+length(trace) - length(suffix)"
                                                                                   "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "t")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (split)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (lemma
                                                                               "DLEVENTUALLY_EXISTS")
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (inst
                                                                                     1
                                                                                     "i")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "cut_state_diff"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "caret_nth[TraceState]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "trace"
                                                                                               "i+length(trace) - length(suffix)"
                                                                                               "(length(trace) - length(suffix), length(trace) - 1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -1
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "t")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (split)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (typepred
                                                                                 "i")
                                                                                (("1"
                                                                                  (case
                                                                                   "length(suffix) =1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "trace")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "wf_trace?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "length(trace) - length(suffix)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (grind) nil nil)
                                     ("3" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2 -4)
                        (("2" (lemma "list_extensionality[TraceState]")
                          (("2" (inst?)
                            (("1" (assert)
                              (("1"
                                (lemma "caret_length[TraceState]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (lemma
                                             "suffix_nth[TraceState]")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "n")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "caret_nth[TraceState]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (expand "wf_trace?")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "trace")
                                    (("2"
                                      (expand "wf_trace?")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "trace")
                              (("2"
                                (expand "wf_trace?")
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "trace")
                        (("3" (expand "wf_trace?")
                          (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (suffix? def-decl "bool" more_list_props structures)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (j skolem-const-decl "below(length(trace))" ltl_expr nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (trace skolem-const-decl "Trace" ltl_expr nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (^ def-decl "list[T]" more_list_props structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (caret_nth formula-decl nil more_list_props structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (suffix skolem-const-decl "{suffix: Trace |
   suffix?(suffix, trace ^ (j, length(trace) - 1)) AND
    NOT error?(car(suffix))}" ltl_expr nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (suffix_length formula-decl nil more_list_props structures)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (<= const-decl "bool" reals nil)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (caret_length formula-decl nil more_list_props structures)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (init_env const-decl "Environment" trace_semantics nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (suffix_nth formula-decl nil more_list_props structures)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (t skolem-const-decl
     "(D(nth(cut_state_diff(trace ^ (j, length(trace) - 1),
                      max_ci(D(nth(trace, j)))),
       i)))" ltl_expr nil)
    (T skolem-const-decl "(D(nth(trace, i + j)))" ltl_expr nil)
    (i skolem-const-decl
       "below(length(cut_state_diff(trace ^ (j, length(trace) - 1),
                            max_ci(D(nth(trace, j))))))" ltl_expr nil)
    (DLEVENTUALLY_EXISTS formula-decl nil ltl_expr nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (T skolem-const-decl "(hp(0))" ltl_expr nil)
    (t skolem-const-decl "(hp(0))" ltl_expr nil)
    (length_singleton formula-decl nil more_list_props structures)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (hp const-decl "bool" interval_def ODEs)
    (nth def-decl "T" list_props nil)
    (caret_suffix formula-decl nil even_more_list_props nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (t!1 skolem-const-decl "(D(car(suffix)))" ltl_expr nil)
    (t skolem-const-decl
     "(D(nth(trace, i + (length(trace) - length(suffix)))))" ltl_expr
     nil)
    (t skolem-const-decl "(hp(0))" ltl_expr nil)
    (t_1 skolem-const-decl "{t_1: (hp(0)) | t_1 >= t}" ltl_expr nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (suffix skolem-const-decl
     "{suffix: Trace | suffix?(suffix, trace)}" ltl_expr nil)
    (t skolem-const-decl "(D(car(suffix)))" ltl_expr nil)
    (i skolem-const-decl "below(length(suffix))" ltl_expr nil)
    (t_1 skolem-const-decl
     "{t_1: (D(nth(trace, i + (length(trace) - length(suffix))))) | t_1 >= t}"
     ltl_expr nil)
    (db_max formula-decl nil more_ci_props ODEs)
    (list_extensionality formula-decl nil more_list_props structures)
    (reverse def-decl "list[T]" list_props nil))
   shostak))
 (DLEG_nth 0
  (DLEG_nth-1 nil 3896964639
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "DLEVENTUALLY")
          (("1" (skeep)
            (("1" (typepred "suffix")
              (("1" (lemma "suffix_length[TraceState]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (lemma "caret_suffix[TraceState]")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (skeep)
                            (("1" (inst 2 "i")
                              (("1"
                                (lemma "DLGLOBALLY_FORALL")
                                (("1"
                                  (lemma "caret_nth[TraceState]")
                                  (("1"
                                    (inst
                                     -1
                                     "trace"
                                     "i"
                                     "(i,length(trace)-1)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" -1 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (split)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -4 "i_1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace -5)
                                                          (("1"
                                                            (lemma
                                                             "caret_nth[TraceState]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "trace"
                                                               "i+i_1"
                                                               "(i,length(trace)-1)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   -5
                                                                   rl)
                                                                  (("1"
                                                                    (lemma
                                                                     "caret_length[TraceState]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -6)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (flatten)
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (split
                                                                                     4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "t")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (flatten)
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (split
                                                                                     4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "i_1")
                                                        (("2"
                                                          (lemma
                                                           "caret_length[TraceState]")
                                                          (("2"
                                                            (inst?)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma
                                                   "caret_length[TraceState]")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "i_1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "cut_state_diff(suffix, t)")
                                                                        (("1"
                                                                          (replace
                                                                           -2)
                                                                          (("1"
                                                                            (replace
                                                                             -8)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (split
                                                                                 5)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "cut_state_diff"
                                                                                         -8)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "nth"
                                                                                           -8)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -8)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (lift-if)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           2
                                                                                                           "max_ci(D(nth(trace, i_1 + i)))")
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "t!1")
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "max_ci(D(nth(trace, i_1 + i)))")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -2
                                                                                                                   "t!1")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -6)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (typepred
                                                                                                             "D(nth[TraceState](trace, i_1 + i))")
                                                                                                            (("2"
                                                                                                              (skeep)
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -2)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "ci_ci")
                                                                                                                  (("2"
                                                                                                                    (inst?)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (lift-if)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  (("3"
                                                                                                    (split
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           1
                                                                                                           "t")
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "t_1")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -4
                                                                                                                 "t_1-t")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (replace
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "cut_state_diff"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "D(nth(trace, i))")
                                                                                                                          (("2"
                                                                                                                            (skeep)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "db_max")
                                                                                                                              (("2"
                                                                                                                                (inst?)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -14)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -13)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -3)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "closed_interval")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (lift-if)
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -7)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "cut_state_diff"
                                                                                         -7)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "caret_nth[TraceState]")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "trace"
                                                                                               "i+i_1"
                                                                                               "(i,length(trace)-1)")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     +)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -8)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (assert)
                                                                                                          (("3"
                                                                                                            (skeep)
                                                                                                            (("3"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "t!1")
                                                                                                              (("3"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1)
                                                                                                                (("3"
                                                                                                                  (expand
                                                                                                                   "cut_state_diff"
                                                                                                                   1)
                                                                                                                  (("3"
                                                                                                                    (assert)
                                                                                                                    (("3"
                                                                                                                      (replace
                                                                                                                       -9)
                                                                                                                      (("3"
                                                                                                                        (assert)
                                                                                                                        (("3"
                                                                                                                          (typepred
                                                                                                                           "t!1")
                                                                                                                          (("3"
                                                                                                                            (expand
                                                                                                                             "nth"
                                                                                                                             -3
                                                                                                                             2)
                                                                                                                            (("3"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "i_1")
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "cut_inf_diff"
                                                                         -5)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (inst
                                                                             -5
                                                                             "0")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -5)
                                                                                (("1"
                                                                                  (case
                                                                                   "i=length(trace)-1")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       6
                                                                                       "t")
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "t_1")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -8
                                                                                             "t_1-t")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "trace")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "wf_trace?")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "i")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "cut_inf_diff"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "DLEVENTUALLY")
            (("2" (inst 2 "trace^(j,length(trace)-1)")
              (("1" (lemma "caret_length[TraceState]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (lemma "caret_nth[TraceState]")
                      (("1"
                        (inst-cp -1 "trace" "j"
                         "(j, length(trace) - 1)")
                        (("1" (assert)
                          (("1" (expand "nth" -2 2)
                            (("1" (assert)
                              (("1"
                                (replace -2)
                                (("1"
                                  (lemma "DLGLOBALLY_FORALL")
                                  (("1"
                                    (split 2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (replace -4)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst
                                                   -2
                                                   "trace"
                                                   "i+j"
                                                   "(j,length(trace)-1)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (replace -5)
                                                        (("1"
                                                          (inst -6 "i")
                                                          (("1"
                                                            (replace
                                                             -3)
                                                            (("1"
                                                              (split
                                                               -6)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("3"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("4"
                                                                (flatten)
                                                                (("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "t")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (split 2)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst
                                               1
                                               "max_ci(D(car(trace ^ (j, length(trace) - 1))))")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst -5 "i")
                                                      (("1"
                                                        (typepred
                                                         "cut_state_diff(trace ^ (j, length(trace) - 1),
                                    max_ci
                                   
 (D
                                     (car
                                      (trace ^ (j, length(trace) - 1)))))")
                                                        (("1"
                                                          (replace -2)
                                                          (("1"
                                                            (replace
                                                             -6)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "trace"
                                                                 "i+j"
                                                                 "(j,length(trace)-1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (split
                                                                     -7)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "nth"
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "cut_state_diff"
                                                                             3)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -6
                                                                                 2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "cut_state_diff")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "nth")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (expand
                                                                       "cut_state_diff")
                                                                      (("3"
                                                                        (expand
                                                                         "nth"
                                                                         +)
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (lift-if)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -2
                                                                                     "max_ci(D(nth(trace, i + j)))")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -6)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "max_ci(D(nth[TraceState](trace, i + j)))")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "T")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (typepred
                                                                                       "D(nth[TraceState](trace, i + j))")
                                                                                      (("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (replace
                                                                                           -2)
                                                                                          (("3"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("3"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (flatten)
                                                                      (("4"
                                                                        (expand
                                                                         "cut_state_diff")
                                                                        (("4"
                                                                          (expand
                                                                           "nth"
                                                                           +)
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (replace
                                                                               -5)
                                                                              (("4"
                                                                                (expand
                                                                                 "nth"
                                                                                 -1)
                                                                                (("4"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "t")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "t")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "cut_state_diff"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -6
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "D(car[TraceState]
                             (^[TraceState]
                                  (trace,
                       
            (j, length[TraceState](trace) - 1))))")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (lemma "ci_ci")
                                                      (("2"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case
                                                 "j=length(trace)-1")
                                                (("1"
                                                  (replace -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (inst -6 "0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             2
                                                             "T")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "cut_inf_diff")
                                                                  (("1"
                                                                    (expand
                                                                     "nth"
                                                                     +)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (typepred
                                                                           "i")
                                                                          (("1"
                                                                            (expand
                                                                             "cut_inf_diff")
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "T")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -8
                                                                                           "t+T")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "hp")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "trace")
                                                  (("2"
                                                    (expand
                                                     "wf_trace?")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -2 "j")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "wf_trace?" 1)
                (("2" (assert)
                  (("2" (lemma "caret_nth[TraceState]")
                    (("2"
                      (inst -1 "trace" "j"
                       "(j, length[TraceState](trace) - 1)")
                      (("2" (assert)
                        (("2" (expand "nth" -1 2)
                          (("2" (assert)
                            (("2" (lemma "caret_suffix[TraceState]")
                              (("2"
                                (inst?)
                                (("2"
                                  (split 1)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (lemma "caret_nth[TraceState]")
                                      (("2"
                                        (inst
                                         -1
                                         "trace"
                                         "i+j"
                                         "(j,length(trace)-1)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (typepred "j")
                                              (("2"
                                                (lemma
                                                 "caret_length[TraceState]")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -1)
                                                      (("2"
                                                        (typepred
                                                         "trace")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "wf_trace?")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "i+j")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3" (inst 2 "j") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((DLEVENTUALLY const-decl "bool" ltl_expr nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (error? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (suffix? def-decl "bool" more_list_props structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (caret_suffix formula-decl nil even_more_list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (caret_nth formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Environment type-eq-decl nil hp_def nil)
    (trace skolem-const-decl "Trace" ltl_expr nil)
    (i skolem-const-decl "below(length(trace))" ltl_expr nil)
    (i_1 skolem-const-decl "below(length(trace) - i)" ltl_expr nil)
    (suffix skolem-const-decl
     "{suffix: Trace | suffix?(suffix, trace) AND NOT error?(car(suffix))}"
     ltl_expr nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (D adt-accessor-decl "[(state_diff?) ->
   {D: (dd?) | EXISTS (b: posreal): D = closed_interval(0, b)}]"
     TraceState_adt nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     ODEs)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (dd? const-decl "bool" hp_expr nil)
    (state_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (caret_length formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (hp const-decl "bool" interval_def ODEs)
    (inf_diff? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (t_1 skolem-const-decl "{t_1: (hp(0)) | t_1 >= t}" ltl_expr nil)
    (t skolem-const-decl "(hp(0))" ltl_expr nil)
    (t!1 skolem-const-decl "(D(nth(trace, i_1 + i)))" ltl_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn(0)" vector_arithmetic mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (max_ci const-decl "{rr: (d) | FORALL (x: (d)): x <= rr}"
     more_ci_props ODEs)
    (init_env const-decl "Environment" trace_semantics nil)
    (State_Trace const-decl "bool" ltl_expr nil)
    (cut_inf_diff const-decl "Trace" ltl_expr nil)
    (DLGLOBALLY const-decl "bool" ltl_expr nil)
    (reverse def-decl "list[T]" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (closed_interval? const-decl "bool" interval_def ODEs)
    (<= const-decl "bool" reals nil)
    (ci_ci formula-decl nil interval_def ODEs)
    (db_max formula-decl nil more_ci_props ODEs)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (t_1 skolem-const-decl "{t_1: (D(nth(trace, i_1 + i))) | t_1 >= t}"
     ltl_expr nil)
    (t skolem-const-decl "(D(car(suffix)))" ltl_expr nil)
    (cut_state_diff const-decl
     "{tt: Trace | length(tt) = length(trace)}" ltl_expr nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (DLGLOBALLY_FORALL formula-decl nil ltl_expr nil)
    (suffix_length formula-decl nil more_list_props structures)
    (j skolem-const-decl "below(length(trace))" ltl_expr nil)
    (t skolem-const-decl
     "(D(nth(cut_state_diff(trace ^ (j, length(trace) - 1),
                      max_ci(D(car(trace ^ (j, length(trace) - 1))))),
       i)))" ltl_expr nil)
    (T skolem-const-decl "(D(nth(trace, i + j)))" ltl_expr nil)
    (i skolem-const-decl
       "below(length(cut_state_diff(trace ^ (j, length(trace) - 1),
                            max_ci(D(car
                                     (trace ^ (j, length(trace) - 1)))))))"
       ltl_expr nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (T skolem-const-decl "(hp(0))" ltl_expr nil)
    (t skolem-const-decl "(hp(0))" ltl_expr nil))
   shostak)))

