(ltl_expr
 (ALLRUNS_st_TCC1 0
  (ALLRUNS_st_TCC1-1 nil 3890833888 ("" (subtype-tcc) nil nil) nil nil
   (ALLRUNS_st subtype "0" "below[length[TraceState](trace)]")))
 (ALLRUNS_st_TCC2 0
  (ALLRUNS_st_TCC2-1 nil 3890833888 ("" (subtype-tcc) nil nil) nil nil
   (ALLRUNS_st subtype "ltl_expr.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (ALLRUNS_st_TCC3 0
  (ALLRUNS_st_TCC3-1 nil 3890833888 ("" (subtype-tcc) nil nil) nil nil
   (ALLRUNS_st subtype
    "more_list_props[TraceState_adt.TraceState].last(ltl_expr.trace)"
    "(TraceState_adt.state?)")))
 (ALLRUNS_eq 0
  (ALLRUNS_eq-1 nil 3890833892
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS")
              (("1" (expand "ALLRUNS_st")
                (("1" (skeep)
                  (("1" (use "trace_semantics_complete")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep -4)
                          (("1" (expand "nth")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (use "TraceState_STATE_eta")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS")
              (("2" (expand "ALLRUNS_st")
                (("2" (skeep)
                  (("2" (inst -1 "state(last(trace))")
                    (("2" (assert)
                      (("2" (use "trace_semantics_sound")
                        (("2" (beta)
                          (("2" (assert)
                            (("2" (expand "nth")
                              (("2"
                                (replace -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (TraceState_STATE_eta formula-decl nil TraceState_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (nth def-decl "T" list_props nil)
    (trace_semantics_complete formula-decl nil trace_semantics nil)
    (trace_semantics_sound formula-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil))
   shostak))
 (SOMERUNS_eq 0
  (SOMERUNS_eq-1 nil 3890836145
   ("" (skeep)
    (("" (decompose-equality)
      (("" (iff)
        (("" (split)
          (("1" (flatten)
            (("1" (expand "ALLRUNS")
              (("1" (expand "ALLRUNS_st")
                (("1" (skeep)
                  (("1" (use "trace_semantics_complete")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (insteep)
                          (("1" (expand "nth")
                            (("1" (assert)
                              (("1"
                                (replace -1)
                                (("1"
                                  (use "TraceState_STATE_eta")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (expand "ALLRUNS")
              (("2" (expand "ALLRUNS_st")
                (("2" (skeep)
                  (("2" (inst -1 "state(last(trace))")
                    (("2" (assert)
                      (("2" (use "trace_semantics_sound")
                        (("2" (beta)
                          (("2" (expand "nth")
                            (("2" (assert)
                              (("2"
                                (replace -2)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((HP type-decl nil HP_adt nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (ALLRUNS_st const-decl "bool" ltl_expr nil)
    (ALLRUNS const-decl "bool" bool_expr nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (finite_trace? const-decl "bool" trace_semantics nil)
    (FiniteTrace type-eq-decl nil trace_semantics nil)
    (TraceState_STATE_eta formula-decl nil TraceState_adt nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nth def-decl "T" list_props nil)
    (trace_semantics_complete formula-decl nil trace_semantics nil)
    (trace_semantics_sound formula-decl nil trace_semantics nil)
    (last const-decl "T" more_list_props structures)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil))
   shostak))
 (DLSTATE_TCC1 0
  (DLSTATE_TCC1-1 nil 3886161669
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (inst -2 "0") nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (DLSTATE subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, 0)"
    "(TraceState_adt.state?)")))
 (normDLGLOBALLY_TCC1 0
  (normDLGLOBALLY_TCC1-1 nil 3887705051
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (skeep)
          (("" (typepred "i")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "nth" 1)
                  (("" (assert)
                    (("" (expand "last")
                      (("" (inst -3 "length(trace)-1")
                        (("" (assert)
                          (("" (expand "length")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (normDLGLOBALLY subtype "ltl_expr.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (normDLGLOBALLY_TCC2 0
  (normDLGLOBALLY_TCC2-1 nil 3889007200 ("" (subtype-tcc) nil nil) nil
   nil
   (normDLGLOBALLY subtype
    "more_list_props[TraceState_adt.TraceState].last(ltl_expr.trace)"
    "(TraceState_adt.state?)"))))

