(ltl_expr
 (State_Trace_TCC1 0
  (State_Trace_TCC1-1 nil 3887903173
   ("" (subtype-tcc)
    (("1" (inst -2 "0")
      (("1" (expand "nth") (("1" (propax) nil nil)) nil)
       ("2" (grind) nil nil))
      nil)
     ("2" (inst -2 "0")
      (("1" (expand "nth") (("1" (propax) nil nil)) nil)
       ("2" (grind) nil nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil))
   nil
   (State_Trace subtype
    "list_adt[TraceState_adt.TraceState].car(ltl_expr.trace)"
    "(TraceState_adt.state?)")))
 (State_Trace_TCC2 0
  (State_Trace_TCC2-1 nil 3887903173
   ("" (skeep)
    (("" (grind)
      (("1" (typepred "trace")
        (("1" (expand "wf_trace?")
          (("1" (flatten)
            (("1" (inst -2 "i!1+1")
              (("1" (expand "nth" -2) (("1" (propax) nil nil)) nil)
               ("2" (expand "length" 1)
                (("2" (lift-if) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1)
        (("2" (typepred "trace")
          (("2" (expand "wf_trace?")
            (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((wf_trace? const-decl "bool" trace_semantics nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (State_Trace subtype
    "list_adt[TraceState_adt.TraceState].cdr(ltl_expr.trace)"
    "Trace")))
 (State_Trace_TCC3 0
  (State_Trace_TCC3-1 nil 3887903173
   ("" (skeep)
    (("" (assert)
      (("" (expand "length" 4 2)
        (("" (lift-if)
          (("" (typepred "trace")
            (("" (expand "wf_trace?")
              (("" (flatten) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (TraceState type-decl nil TraceState_adt nil)
    (list type-decl nil list_adt nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (length def-decl "nat" list_props nil))
   nil
   (State_Trace termination
    "ltl_expr.State_Trace(ltl_expr.P)(list_adt[TraceState_adt.TraceState].cdr(ltl_expr.trace))"
    "nil")))
 (ALLRUNS_tr_TCC1 0
  (ALLRUNS_tr_TCC1-1 nil 3886161669
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten)
          (("" (expand "length") (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil))
   nil (ALLRUNS_tr subtype "0" "below[length[TraceState](trace)]")))
 (DLSTATE_TCC1 0
  (DLSTATE_TCC1-1 nil 3886161669
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (flatten) (("" (inst -2 "0") nil nil)) nil)) nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (DLSTATE subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.trace, 0)"
    "(TraceState_adt.state?)")))
 (normDLGLOBALLY_TCC1 0
  (normDLGLOBALLY_TCC1-1 nil 3887705051
   ("" (skeep)
    (("" (typepred "trace")
      (("" (expand "wf_trace?")
        (("" (skeep)
          (("" (typepred "i")
            (("" (expand "length")
              (("" (expand "length")
                (("" (expand "nth" 1)
                  (("" (assert)
                    (("" (expand "last")
                      (("" (inst -3 "length(trace)-1")
                        (("" (assert)
                          (("" (expand "length")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Trace type-eq-decl nil trace_semantics nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (list type-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures)
    (below type-eq-decl nil naturalnumbers nil))
   nil
   (normDLGLOBALLY subtype "ltl_expr.trace"
    "{l: list_adt[TraceState_adt.TraceState].list | (booleans.NOT)(list_adt[TraceState_adt.TraceState].null?(l))}")))
 (normDLGLOBALLY_TCC2 0
  (normDLGLOBALLY_TCC2-1 nil 3889007200 ("" (subtype-tcc) nil nil) nil
   nil
   (normDLGLOBALLY subtype
    "more_list_props[TraceState_adt.TraceState].last(ltl_expr.trace)"
    "(TraceState_adt.state?)")))
 (State_Trace_FORALL_TCC1 0
  (State_Trace_FORALL_TCC1-1 nil 3889007200 ("" (subtype-tcc) nil nil)
   nil nil
   (State_Trace_FORALL subtype
    "(: more_list_props[TraceState_adt.TraceState].last(ltl_expr.t) :)"
    "Trace")))
 (State_Trace_FORALL_TCC2 0
  (State_Trace_FORALL_TCC2-1 nil 3889007200 ("" (subtype-tcc) nil nil)
   nil nil
   (State_Trace_FORALL subtype "ltl_expr.n"
    "below[length[TraceState](t)]")))
 (State_Trace_FORALL_TCC3 0
  (State_Trace_FORALL_TCC3-1 nil 3889007200 ("" (subtype-tcc) nil nil)
   nil nil
   (State_Trace_FORALL subtype
    "list_props[TraceState_adt.TraceState].nth(ltl_expr.t, ltl_expr.n)"
    "(TraceState_adt.state?)")))
 (State_Trace_FORALL 0
  (State_Trace_FORALL-1 nil 3889007207
   ("" (induct "t")
    (("1" (assert) nil nil)
     ("2" (expand "wf_trace?") (("2" (propax) nil nil)) nil)
     ("3" (skeep*)
      (("3" (case "cons2_var=null")
        (("1" (assert)
          (("1" (hide -2)
            (("1" (split)
              (("1" (flatten)
                (("1" (split)
                  (("1" (expand "last")
                    (("1" (expand "length")
                      (("1" (expand "length")
                        (("1" (expand "nth")
                          (("1" (replace -2) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (typepred "n") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "last")
                  (("2" (expand "length")
                    (("2" (expand "length")
                      (("2" (expand "nth") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (split)
          (("1" (inst -1 "P")
            (("1" (expand "last" 2)
              (("1" (expand "length" 2)
                (("1" (expand "nth")
                  (("1" (assert)
                    (("1" (expand "length" 2 1)
                      (("1" (assert)
                        (("1" (lift-if)
                          (("1" (assert)
                            (("1" (expand "last")
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "State_Trace" -3)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  nil
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -2 "n-1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (expand
                                                               "nth")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             3)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "n")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "State_Trace" -1)
                                      (("2"
                                        (expand "length")
                                        (("2"
                                          (expand "length")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst-cp -2 "0")
                                      (("1"
                                        (expand "State_Trace" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "length" 1)
                                            (("1"
                                              (expand "length" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide 1)
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (hide -4)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (case
                                                             "length[TraceState](cons2_var) = 1")
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "nth")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (inst
                                                               -3
                                                               "1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -2
                                                             "n+1")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 -2)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length")
                                                              (("2"
                                                                (typepred
                                                                 "n")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "wf_trace?")
            (("2" (assert)
              (("2" (skeep)
                (("2" (inst -1 "i+1")
                  (("1" (expand "nth" -1) (("1" (propax) nil nil)) nil)
                   ("2" (typepred "i") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep) (("4" (assert) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (grind) nil nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "below(length(cons2_var) - 1)" ltl_expr nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (cons1_var skolem-const-decl "TraceState" ltl_expr nil)
    (cons2_var skolem-const-decl "list[TraceState]" ltl_expr nil)
    (n skolem-const-decl
     "below(length(cons(cons1_var, cons2_var)) - 1)" ltl_expr nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cons2_var) - 1)" ltl_expr nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list_induction formula-decl nil list_adt nil)
    (TraceState type-decl nil TraceState_adt nil)
    (state adt-accessor-decl "[(state?) -> Environment]" TraceState_adt
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Environment type-eq-decl nil hp_def nil)
    (BoolExpr type-eq-decl nil hp_def nil)
    (Trace type-eq-decl nil trace_semantics nil)
    (State_Trace def-decl "bool" ltl_expr nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (state? adt-recognizer-decl "[TraceState -> boolean]"
     TraceState_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (wf_trace? const-decl "bool" trace_semantics nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (last const-decl "T" more_list_props structures))
   shostak)))

